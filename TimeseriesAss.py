{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNWMZ9CgkBAoOpltAD/PiX1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mm4GitHub/Time-Series-Analysis/blob/main/TimeseriesAss.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Install conda in Colab\n",
        "!pip install -q condacolab\n",
        "import condacolab\n",
        "condacolab.install()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5IR0Hu31dv0-",
        "outputId": "9583b44c-ed65-4b54-e1e2-6cb04a43e6c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "⏬ Downloading https://github.com/jaimergp/miniforge/releases/download/24.11.2-1_colab/Miniforge3-colab-24.11.2-1_colab-Linux-x86_64.sh...\n",
            "📦 Installing...\n",
            "📌 Adjusting configuration...\n",
            "🩹 Patching environment...\n",
            "⏲ Done in 0:00:24\n",
            "🔁 Restarting kernel...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 2: Use conda to install pmdarima\n",
        "!conda install -c conda-forge pmdarima -y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_DR9OED2d2-H",
        "outputId": "0541689c-3215-423c-cc83-c694b6a37f87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Channels:\n",
            " - conda-forge\n",
            "Platform: linux-64\n",
            "Collecting package metadata (repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n",
            "Solving environment: - \b\b\\ \b\b| \b\bdone\n",
            "\n",
            "## Package Plan ##\n",
            "\n",
            "  environment location: /usr/local\n",
            "\n",
            "  added / updated specs:\n",
            "    - pmdarima\n",
            "\n",
            "\n",
            "The following packages will be downloaded:\n",
            "\n",
            "    package                    |            build\n",
            "    ---------------------------|-----------------\n",
            "    ca-certificates-2025.4.26  |       hbd8a1cb_0         149 KB  conda-forge\n",
            "    certifi-2025.4.26          |     pyhd8ed1ab_0         154 KB  conda-forge\n",
            "    conda-24.11.3              |  py311h38be061_0         1.1 MB  conda-forge\n",
            "    cython-3.1.0               |  py311ha3e34f5_1         3.5 MB  conda-forge\n",
            "    joblib-1.5.0               |     pyhd8ed1ab_0         220 KB  conda-forge\n",
            "    libblas-3.9.0              |31_h59b9bed_openblas          16 KB  conda-forge\n",
            "    libcblas-3.9.0             |31_he106b2a_openblas          16 KB  conda-forge\n",
            "    libgfortran-14.2.0         |       h69a702a_2          52 KB  conda-forge\n",
            "    libgfortran5-14.2.0        |       hf1ad2bd_2         1.4 MB  conda-forge\n",
            "    liblapack-3.9.0            |31_h7ac8fdf_openblas          16 KB  conda-forge\n",
            "    libopenblas-0.3.29         |pthreads_h94d23a6_0         5.6 MB  conda-forge\n",
            "    numpy-2.2.5                |  py311h5d046bc_0         8.6 MB  conda-forge\n",
            "    openssl-3.5.0              |       h7b32b05_1         3.0 MB  conda-forge\n",
            "    pandas-2.2.3               |  py311h7db5c69_3        15.0 MB  conda-forge\n",
            "    patsy-1.0.1                |     pyhd8ed1ab_1         182 KB  conda-forge\n",
            "    pmdarima-2.0.4             |  py311h61187de_2         652 KB  conda-forge\n",
            "    python-dateutil-2.9.0.post0|     pyhff2d567_1         217 KB  conda-forge\n",
            "    python-tzdata-2025.2       |     pyhd8ed1ab_0         141 KB  conda-forge\n",
            "    pytz-2025.2                |     pyhd8ed1ab_0         185 KB  conda-forge\n",
            "    scikit-learn-1.6.1         |  py311h57cc02b_0        10.2 MB  conda-forge\n",
            "    scipy-1.15.2               |  py311h8f841c2_0        16.4 MB  conda-forge\n",
            "    six-1.17.0                 |     pyhd8ed1ab_0          16 KB  conda-forge\n",
            "    statsmodels-0.14.4         |  py311h9f3472d_0        11.7 MB  conda-forge\n",
            "    threadpoolctl-3.6.0        |     pyhecae5ae_0          23 KB  conda-forge\n",
            "    ------------------------------------------------------------\n",
            "                                           Total:        78.6 MB\n",
            "\n",
            "The following NEW packages will be INSTALLED:\n",
            "\n",
            "  cython             conda-forge/linux-64::cython-3.1.0-py311ha3e34f5_1 \n",
            "  joblib             conda-forge/noarch::joblib-1.5.0-pyhd8ed1ab_0 \n",
            "  libblas            conda-forge/linux-64::libblas-3.9.0-31_h59b9bed_openblas \n",
            "  libcblas           conda-forge/linux-64::libcblas-3.9.0-31_he106b2a_openblas \n",
            "  libgfortran        conda-forge/linux-64::libgfortran-14.2.0-h69a702a_2 \n",
            "  libgfortran5       conda-forge/linux-64::libgfortran5-14.2.0-hf1ad2bd_2 \n",
            "  liblapack          conda-forge/linux-64::liblapack-3.9.0-31_h7ac8fdf_openblas \n",
            "  libopenblas        conda-forge/linux-64::libopenblas-0.3.29-pthreads_h94d23a6_0 \n",
            "  numpy              conda-forge/linux-64::numpy-2.2.5-py311h5d046bc_0 \n",
            "  pandas             conda-forge/linux-64::pandas-2.2.3-py311h7db5c69_3 \n",
            "  patsy              conda-forge/noarch::patsy-1.0.1-pyhd8ed1ab_1 \n",
            "  pmdarima           conda-forge/linux-64::pmdarima-2.0.4-py311h61187de_2 \n",
            "  python-dateutil    conda-forge/noarch::python-dateutil-2.9.0.post0-pyhff2d567_1 \n",
            "  python-tzdata      conda-forge/noarch::python-tzdata-2025.2-pyhd8ed1ab_0 \n",
            "  pytz               conda-forge/noarch::pytz-2025.2-pyhd8ed1ab_0 \n",
            "  scikit-learn       conda-forge/linux-64::scikit-learn-1.6.1-py311h57cc02b_0 \n",
            "  scipy              conda-forge/linux-64::scipy-1.15.2-py311h8f841c2_0 \n",
            "  six                conda-forge/noarch::six-1.17.0-pyhd8ed1ab_0 \n",
            "  statsmodels        conda-forge/linux-64::statsmodels-0.14.4-py311h9f3472d_0 \n",
            "  threadpoolctl      conda-forge/noarch::threadpoolctl-3.6.0-pyhecae5ae_0 \n",
            "\n",
            "The following packages will be UPDATED:\n",
            "\n",
            "  ca-certificates    conda-forge/linux-64::ca-certificates~ --> conda-forge/noarch::ca-certificates-2025.4.26-hbd8a1cb_0 \n",
            "  certifi                           2024.12.14-pyhd8ed1ab_0 --> 2025.4.26-pyhd8ed1ab_0 \n",
            "  conda                             24.11.2-py311h38be061_1 --> 24.11.3-py311h38be061_0 \n",
            "  openssl                                  3.4.0-h7b32b05_1 --> 3.5.0-h7b32b05_1 \n",
            "\n",
            "\n",
            "\n",
            "Downloading and Extracting Packages:\n",
            "scipy-1.15.2         | 16.4 MB   | :   0% 0/1 [00:00<?, ?it/s]\n",
            "pandas-2.2.3         | 15.0 MB   | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.1.0         | 3.5 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.4.26    | 154 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | :   0% 0.0019058779654147827/1 [00:00<00:55, 55.44s/it]\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | :   0% 0.003618956404651631/1 [00:00<00:28, 28.26s/it]\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | :   0% 0.002088538133571727/1 [00:00<00:53, 53.17s/it]\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :   1% 0.005331798618838311/1 [00:00<00:21, 21.17s/it]\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | :  10% 0.09719977623615392/1 [00:00<00:01,  1.80s/it]  \n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | :  24% 0.24066060090933347/1 [00:00<00:00,  1.39it/s] \u001b[A\u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | :  14% 0.13575497868216227/1 [00:00<00:01,  1.32s/it] \u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :  21% 0.20794014613469414/1 [00:00<00:00,  1.15it/s] \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :  22% 0.22105505477525556/1 [00:00<00:00,  1.21it/s] \u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | :  37% 0.3686269805754098/1 [00:00<00:00,  1.45it/s] \u001b[A\n",
            "\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | :  31% 0.30970516937990217/1 [00:00<00:00,  1.21it/s]\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :  50% 0.4971902212066725/1 [00:00<00:00,  1.91it/s] \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :  55% 0.5503508605094293/1 [00:00<00:00,  2.04it/s] \u001b[A\u001b[A\u001b[A\n",
            "scipy-1.15.2         | 16.4 MB   | :  56% 0.5565163659011165/1 [00:00<00:00,  1.69it/s] \n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :  84% 0.8424241817764532/1 [00:00<00:00,  2.50it/s]\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :  95% 0.9467254414857497/1 [00:00<00:00,  2.76it/s]\u001b[A\u001b[A\u001b[A\n",
            "scipy-1.15.2         | 16.4 MB   | :  80% 0.8014216844569161/1 [00:00<00:00,  1.94it/s]\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | : 100% 1.0/1 [00:00<00:00,  2.50it/s]               \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | : 100% 1.0/1 [00:00<00:00,  1.80it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | : 100% 1.0/1 [00:00<00:00,  1.80it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | :   0% 0.0027679004637044184/1 [00:00<03:45, 226.53s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.1.0         | 3.5 MB    | :   0% 0.00442046667436507/1 [00:00<02:21, 142.06s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | : 100% 1.0/1 [00:00<00:00,  2.76it/s]               \u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.1.0         | 3.5 MB    | :  97% 0.9725026683603155/1 [00:00<00:00,  1.79it/s]  \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | :   1% 0.005255644910358278/1 [00:00<02:18, 139.12s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | :  73% 0.7251899214905576/1 [00:00<00:00,  1.26it/s]    \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.1.0         | 3.5 MB    | : 100% 1.0/1 [00:00<00:00,  1.79it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | :  98% 0.9775499533266397/1 [00:00<00:00,  1.60it/s]   \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | :   1% 0.011206734985068174/1 [00:00<01:17, 78.34s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | : 100% 1.0/1 [00:00<00:00,  1.60it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | : 100% 1.0/1 [00:00<00:00,  1.26it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | : 100% 1.0/1 [00:00<00:00, 78.34s/it]                 \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | :   1% 0.01364371451460054/1 [00:00<01:09, 70.39s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | :   2% 0.024556943811602196/1 [00:00<00:39, 40.21s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | : 100% 1.0/1 [00:01<00:00,  1.21s/it]               \u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | : 100% 1.0/1 [00:01<00:00,  1.21s/it]\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | :   7% 0.07279836488047632/1 [00:01<00:12, 13.75s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | : 100% 1.0/1 [00:01<00:00, 13.75s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | : 100% 1.0/1 [00:01<00:00,  1.21s/it]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | : 100% 1.0/1 [00:01<00:00, 40.21s/it]                 \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | :   7% 0.07363430035280107/1 [00:01<00:13, 14.09s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | : 100% 1.0/1 [00:01<00:00, 14.09s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | :   9% 0.08668095124725551/1 [00:01<00:11, 12.08s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | : 100% 1.0/1 [00:01<00:00, 12.08s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | :   9% 0.0878056100410517/1 [00:01<00:10, 12.01s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.4.26    | 154 KB    | :  10% 0.1042239185750636/1 [00:01<00:09, 10.12s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.4.26    | 154 KB    | : 100% 1.0/1 [00:01<00:00, 10.12s/it]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | : 100% 1.0/1 [00:01<00:00, 12.01s/it]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | :  11% 0.10758915965669182/1 [00:01<00:08,  9.87s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | : 100% 1.0/1 [00:01<00:00,  9.87s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | :  11% 0.11365149833518313/1 [00:01<00:08,  9.55s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | : 100% 1.0/1 [00:01<00:00,  9.55s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | :  30% 0.30491504289728844/1 [00:01<00:02,  3.58s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | : 100% 1.0/1 [00:01<00:00,  3.58s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | : 100% 1.0/1 [00:02<00:00,  1.80it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | : 100% 1.0/1 [00:03<00:00,  2.50it/s]\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.1.0         | 3.5 MB    | : 100% 1.0/1 [00:04<00:00,  1.79it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | : 100% 1.0/1 [00:04<00:00,  2.76it/s]\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | : 100% 1.0/1 [00:04<00:00,  1.60it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | : 100% 1.0/1 [00:04<00:00,  4.29s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | : 100% 1.0/1 [00:04<00:00,  4.29s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | : 100% 1.0/1 [00:04<00:00,  1.26it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | : 100% 1.0/1 [00:04<00:00,  4.61s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | : 100% 1.0/1 [00:04<00:00,  4.61s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | : 100% 1.0/1 [00:05<00:00,  5.00s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | : 100% 1.0/1 [00:07<00:00,  1.21s/it]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | : 100% 1.0/1 [00:07<00:00,  7.29s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | : 100% 1.0/1 [00:07<00:00,  7.29s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | : 100% 1.0/1 [00:07<00:00,  7.43s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | : 100% 1.0/1 [00:07<00:00,  7.43s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | : 100% 1.0/1 [00:08<00:00,  1.21s/it]\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.4.26    | 154 KB    | : 100% 1.0/1 [00:08<00:00,  7.95s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.4.26    | 154 KB    | : 100% 1.0/1 [00:08<00:00,  7.95s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | : 100% 1.0/1 [00:08<00:00,  7.94s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | : 100% 1.0/1 [00:08<00:00,  7.94s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | : 100% 1.0/1 [00:08<00:00,  8.01s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | : 100% 1.0/1 [00:08<00:00,  8.01s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | : 100% 1.0/1 [00:08<00:00,  7.96s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | : 100% 1.0/1 [00:08<00:00,  7.96s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | : 100% 1.0/1 [00:08<00:00,  8.61s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | : 100% 1.0/1 [00:08<00:00,  8.61s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | : 100% 1.0/1 [00:08<00:00,  8.33s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | : 100% 1.0/1 [00:08<00:00,  8.33s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \n",
            "                                                                        \u001b[A\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\u001b[A\n",
            "\n",
            "\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "Preparing transaction: - \b\b\\ \b\b| \b\b/ \b\bdone\n",
            "Verifying transaction: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n",
            "Executing transaction: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bdone\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pmdarima"
      ],
      "metadata": {
        "id": "ukcMDr-zd3SL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pmdarima import auto_arima"
      ],
      "metadata": {
        "id": "DBOAixcWd3t9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "metadata": {
        "id": "JUf_BcT1eWke"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Install Required Libraries\n",
        "#!pip install pandas numpy matplotlib seaborn statsmodels scipy scikit-learn\n",
        "\n",
        "# Import Libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.tsa.stattools import adfuller\n",
        "from scipy.stats import boxcox\n",
        "from sklearn.preprocessing import MinMaxScaler, StandardScaler"
      ],
      "metadata": {
        "id": "2EoyioXtdxVb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code read the Loan Transaction data.\n",
        "dfLoan = pd.read_csv('Loan.csv')"
      ],
      "metadata": {
        "id": "DJB3KGqNL7LL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BxtRAV6X04GE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code view the structure of the table\n",
        "dfLoan.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RbGfWH85MFsB",
        "outputId": "9a984caf-671a-4068-e68c-596954fe30ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 75 entries, 0 to 74\n",
            "Data columns (total 2 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   Date    75 non-null     object \n",
            " 1   Loans   75 non-null     float64\n",
            "dtypes: float64(1), object(1)\n",
            "memory usage: 1.3+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vWfa6zbM4o8L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code view first six rows of the table\n",
        "dfLoan.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "7frHkm0pMLq4",
        "outputId": "36f18d45-ccc6-4dbf-a7e9-71f30aeac1cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Date   Loans\n",
              "0   January 2019   81.21\n",
              "1  February 2019   79.60\n",
              "2     March 2019  100.48\n",
              "3     April 2019   97.65\n",
              "4       May 2019   81.85"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1a409751-cab4-40fb-a9f1-902c38139d91\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Loans</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>January 2019</td>\n",
              "      <td>81.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>February 2019</td>\n",
              "      <td>79.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>March 2019</td>\n",
              "      <td>100.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>April 2019</td>\n",
              "      <td>97.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>May 2019</td>\n",
              "      <td>81.85</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a409751-cab4-40fb-a9f1-902c38139d91')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1a409751-cab4-40fb-a9f1-902c38139d91 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1a409751-cab4-40fb-a9f1-902c38139d91');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e89d8425-5263-4e75-b25e-b3562b130ba8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e89d8425-5263-4e75-b25e-b3562b130ba8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e89d8425-5263-4e75-b25e-b3562b130ba8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfLoan",
              "summary": "{\n  \"name\": \"dfLoan\",\n  \"rows\": 75,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 73,\n        \"samples\": [\n          \"May 2019\",\n          \"April 2024\",\n          \"July 2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.824632713569196,\n        \"min\": 53.05,\n        \"max\": 115.09,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          81.85,\n          115.09,\n          86.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BimFEwWN6fke"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code view first six rows of the table\n",
        "dfLoan.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "af7qM65pMQcX",
        "outputId": "f557e8b5-c530-4e95-d245-33f28ff01677"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Date  Loans\n",
              "70  November 2024  93.04\n",
              "71  December 2024  99.52\n",
              "72   January 2025  93.81\n",
              "73  December 2024  99.52\n",
              "74   January 2025  93.81"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f23e78c2-f023-40ec-9563-4bd4aa2bcf15\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Loans</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>November 2024</td>\n",
              "      <td>93.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>December 2024</td>\n",
              "      <td>99.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>January 2025</td>\n",
              "      <td>93.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>73</th>\n",
              "      <td>December 2024</td>\n",
              "      <td>99.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>January 2025</td>\n",
              "      <td>93.81</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f23e78c2-f023-40ec-9563-4bd4aa2bcf15')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f23e78c2-f023-40ec-9563-4bd4aa2bcf15 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f23e78c2-f023-40ec-9563-4bd4aa2bcf15');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d642cc21-253e-45a8-ae11-caab9f4b9a89\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d642cc21-253e-45a8-ae11-caab9f4b9a89')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d642cc21-253e-45a8-ae11-caab9f4b9a89 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "XNsj4yH970oc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code read the transaction dataset, and make \"Date\" column as the index column\n",
        "dfLoan = pd.read_csv('Loan.csv',index_col='Date', parse_dates=True)"
      ],
      "metadata": {
        "id": "7T5r-wrJMVSU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code view the first rows to check if Date is make as the index column\n",
        "dfLoan.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "XGX9cTSHMbog",
        "outputId": "d84c391e-20d2-4a06-bab3-656c81f7eb9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans\n",
              "Date              \n",
              "2019-01-01   81.21\n",
              "2019-02-01   79.60\n",
              "2019-03-01  100.48\n",
              "2019-04-01   97.65\n",
              "2019-05-01   81.85"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-87d694ef-2bf6-41d8-95ca-af77986c30f7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-01</th>\n",
              "      <td>81.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-01</th>\n",
              "      <td>79.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87d694ef-2bf6-41d8-95ca-af77986c30f7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-87d694ef-2bf6-41d8-95ca-af77986c30f7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-87d694ef-2bf6-41d8-95ca-af77986c30f7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a8f8e7c9-ab77-4f78-9049-a047d4b1742b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8f8e7c9-ab77-4f78-9049-a047d4b1742b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a8f8e7c9-ab77-4f78-9049-a047d4b1742b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfLoan",
              "summary": "{\n  \"name\": \"dfLoan\",\n  \"rows\": 75,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-01-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 73,\n        \"samples\": [\n          \"2019-05-01 00:00:00\",\n          \"2024-04-01 00:00:00\",\n          \"2020-07-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.824632713569196,\n        \"min\": 53.05,\n        \"max\": 115.09,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          81.85,\n          115.09,\n          86.98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "g9QFGWlP9FgW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IGFMvrgd9FOP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfLoan.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3vjO-c1FMmQl",
        "outputId": "75b2f7b0-1d9e-4d2e-ce40-b42ab0eb0931"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['2019-01-01', '2019-02-01', '2019-03-01', '2019-04-01',\n",
              "               '2019-05-01', '2019-06-01', '2019-07-01', '2019-08-01',\n",
              "               '2019-09-01', '2019-10-01', '2019-11-01', '2019-12-01',\n",
              "               '2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01',\n",
              "               '2020-05-01', '2020-06-01', '2020-07-01', '2020-08-01',\n",
              "               '2020-09-01', '2020-10-01', '2020-11-01', '2020-12-01',\n",
              "               '2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01',\n",
              "               '2021-05-01', '2021-06-01', '2021-07-01', '2021-08-01',\n",
              "               '2021-09-01', '2021-10-01', '2021-11-01', '2021-12-01',\n",
              "               '2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01',\n",
              "               '2022-05-01', '2022-06-01', '2022-07-01', '2022-08-01',\n",
              "               '2022-09-01', '2022-10-01', '2022-11-01', '2022-12-01',\n",
              "               '2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01',\n",
              "               '2023-05-01', '2023-06-01', '2023-07-01', '2023-08-01',\n",
              "               '2023-09-01', '2023-10-01', '2023-11-01', '2023-12-01',\n",
              "               '2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01',\n",
              "               '2024-05-01', '2024-06-01', '2024-07-01', '2024-08-01',\n",
              "               '2024-09-01', '2024-10-01', '2024-11-01', '2024-12-01',\n",
              "               '2025-01-01', '2024-12-01', '2025-01-01'],\n",
              "              dtype='datetime64[ns]', name='Date', freq=None)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ta-Jj3DULMqJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code to check for duplicate rows\n",
        "duplicated_Date = dfLoan[dfLoan.index.duplicated(keep=False)]\n",
        "print(duplicated_Date)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCbXB8WTQQGZ",
        "outputId": "dac97cc7-aa6b-4bf5-f34d-f27a28aaee4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Loans\n",
            "Date             \n",
            "2024-12-01  99.52\n",
            "2025-01-01  93.81\n",
            "2024-12-01  99.52\n",
            "2025-01-01  93.81\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5H9dzL55NALz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code to remove duplicate rows\n",
        "cleaned_dfLoan = dfLoan.drop_duplicates()"
      ],
      "metadata": {
        "id": "hPSDeMqiQaZ6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code check if duplicates are dropped\n",
        "cleaned_dfLoan.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "z_OMSowkQem1",
        "outputId": "bc4e6f43-4eb2-473d-d5ab-fffded1d462d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans\n",
              "Date              \n",
              "2024-09-01  109.90\n",
              "2024-10-01  107.66\n",
              "2024-11-01   93.04\n",
              "2024-12-01   99.52\n",
              "2025-01-01   93.81"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1cf9d57b-1ca9-4fbb-8d0d-909becc130c1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>109.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>107.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>93.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>99.52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>93.81</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1cf9d57b-1ca9-4fbb-8d0d-909becc130c1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1cf9d57b-1ca9-4fbb-8d0d-909becc130c1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1cf9d57b-1ca9-4fbb-8d0d-909becc130c1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9724847a-e28c-4b35-9d64-ea965e678ecb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9724847a-e28c-4b35-9d64-ea965e678ecb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9724847a-e28c-4b35-9d64-ea965e678ecb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"cleaned_dfLoan\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-09-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2024-10-01 00:00:00\",\n          \"2025-01-01 00:00:00\",\n          \"2024-11-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.755396830594807,\n        \"min\": 93.04,\n        \"max\": 109.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          107.66,\n          93.81,\n          93.04\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "10ha38NyOt5d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#checking for null values\n",
        "dfLoan.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "Gk2AlCgbQl1c",
        "outputId": "e9c47565-64b2-4726-a4eb-e010cb5ea1af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loans    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Loans</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hbvX4_2AQv_r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# display the information of the table\n",
        "cleaned_dfLoan.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CTh8ZxWPQr32",
        "outputId": "b2497451-729a-4b6f-8ee1-6e1ac0a75526"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 72 entries, 2019-01-01 to 2025-01-01\n",
            "Data columns (total 1 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   Loans   72 non-null     float64\n",
            "dtypes: float64(1)\n",
            "memory usage: 1.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "x4vfJYv_R2sV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations = pd.read_csv('Inflations.csv')"
      ],
      "metadata": {
        "id": "kJE8_7SYQzGr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "O0AWYwbTQ8Zv",
        "outputId": "35a11c31-4ced-4f19-808f-6316a105c3ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Date  InflationRate\n",
              "0  2019 JAN           0.03\n",
              "1  2019 FEB          -0.01\n",
              "2  2019 MAR           0.02\n",
              "3  2019 APR           0.06\n",
              "4  2019 MAY           0.04"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ca827062-5eaf-4497-9f02-c2bbb4cce163\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>InflationRate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019 JAN</td>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019 FEB</td>\n",
              "      <td>-0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019 MAR</td>\n",
              "      <td>0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019 APR</td>\n",
              "      <td>0.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019 MAY</td>\n",
              "      <td>0.04</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca827062-5eaf-4497-9f02-c2bbb4cce163')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ca827062-5eaf-4497-9f02-c2bbb4cce163 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ca827062-5eaf-4497-9f02-c2bbb4cce163');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3cea20bd-3eaf-4ab4-a3a1-a680cebd2073\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3cea20bd-3eaf-4ab4-a3a1-a680cebd2073')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3cea20bd-3eaf-4ab4-a3a1-a680cebd2073 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfInflations",
              "summary": "{\n  \"name\": \"dfInflations\",\n  \"rows\": 73,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 73,\n        \"samples\": [\n          \"2019 MAY\",\n          \"2024 APR\",\n          \"2020 JUL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04523152010444601,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.03,\n          -0.01,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xiyTOj_WTlDL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "zcocw5pPUOsL",
        "outputId": "51fa39cc-c5ac-41a4-eaec-6393c414ea05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Date  InflationRate\n",
              "68  2024 SEP           0.05\n",
              "69  2024 OCT           0.03\n",
              "70  2024 NOV           0.03\n",
              "71  2024 DEC          -0.01\n",
              "72  2025 JAN           0.02"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09f9f761-2b7d-4583-9647-8a77f4fb5d6e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>InflationRate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>2024 SEP</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>2024 OCT</td>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>2024 NOV</td>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>2024 DEC</td>\n",
              "      <td>-0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>72</th>\n",
              "      <td>2025 JAN</td>\n",
              "      <td>0.02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09f9f761-2b7d-4583-9647-8a77f4fb5d6e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-09f9f761-2b7d-4583-9647-8a77f4fb5d6e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-09f9f761-2b7d-4583-9647-8a77f4fb5d6e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6b8c68c4-869f-4a23-847c-f786cc2d97b5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b8c68c4-869f-4a23-847c-f786cc2d97b5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6b8c68c4-869f-4a23-847c-f786cc2d97b5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#code read the inflation rate dataset, and make \"Date\" column as the index column\n",
        "dfInflations = pd.read_csv('Inflations.csv',index_col='Date', parse_dates=True)"
      ],
      "metadata": {
        "id": "1TPB9mn9VFCn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "7DaIYjc4UtHa",
        "outputId": "6285dbbd-3bcb-46dd-84a4-9dbf2b4f25fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            InflationRate\n",
              "Date                     \n",
              "2019-01-01           0.03\n",
              "2019-02-01          -0.01\n",
              "2019-03-01           0.02\n",
              "2019-04-01           0.06\n",
              "2019-05-01           0.04"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea48b6da-b95c-443d-89b0-a8a1ae5ddae1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InflationRate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-01</th>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-01</th>\n",
              "      <td>-0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>0.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>0.04</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea48b6da-b95c-443d-89b0-a8a1ae5ddae1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea48b6da-b95c-443d-89b0-a8a1ae5ddae1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea48b6da-b95c-443d-89b0-a8a1ae5ddae1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a1499c31-a680-44d2-a6c3-04b7d9ae76ca\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1499c31-a680-44d2-a6c3-04b7d9ae76ca')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a1499c31-a680-44d2-a6c3-04b7d9ae76ca button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfInflations",
              "summary": "{\n  \"name\": \"dfInflations\",\n  \"rows\": 73,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-01-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 73,\n        \"samples\": [\n          \"2019-05-01 00:00:00\",\n          \"2024-04-01 00:00:00\",\n          \"2020-07-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04523152010444601,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.03,\n          -0.01,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DjmjJxcTVerh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "iU9vRv1uVYyo",
        "outputId": "bd365691-943a-437d-db7c-3e1df19d846e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            InflationRate\n",
              "Date                     \n",
              "2024-09-01           0.05\n",
              "2024-10-01           0.03\n",
              "2024-11-01           0.03\n",
              "2024-12-01          -0.01\n",
              "2025-01-01           0.02"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a2c584d7-f2d4-4b32-8412-10e1aa9d621f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InflationRate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>-0.01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>0.02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2c584d7-f2d4-4b32-8412-10e1aa9d621f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a2c584d7-f2d4-4b32-8412-10e1aa9d621f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a2c584d7-f2d4-4b32-8412-10e1aa9d621f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-6c6f8afa-2759-4bc1-81ec-5ea250273b56\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c6f8afa-2759-4bc1-81ec-5ea250273b56')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-6c6f8afa-2759-4bc1-81ec-5ea250273b56 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dfInflations\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-09-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2024-10-01 00:00:00\",\n          \"2025-01-01 00:00:00\",\n          \"2024-11-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.021908902300206645,\n        \"min\": -0.01,\n        \"max\": 0.05,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.03,\n          0.02,\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rQKSdlxBVhv3",
        "outputId": "a232bf7b-55b8-4157-9c11-c821435265b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['2019-01-01', '2019-02-01', '2019-03-01', '2019-04-01',\n",
              "               '2019-05-01', '2019-06-01', '2019-07-01', '2019-08-01',\n",
              "               '2019-09-01', '2019-10-01', '2019-11-01', '2019-12-01',\n",
              "               '2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01',\n",
              "               '2020-05-01', '2020-06-01', '2020-07-01', '2020-08-01',\n",
              "               '2020-09-01', '2020-10-01', '2020-11-01', '2020-12-01',\n",
              "               '2021-01-01', '2021-02-01', '2021-03-01', '2021-04-01',\n",
              "               '2021-05-01', '2021-06-01', '2021-07-01', '2021-08-01',\n",
              "               '2021-09-01', '2021-10-01', '2021-11-01', '2021-12-01',\n",
              "               '2022-01-01', '2022-02-01', '2022-03-01', '2022-04-01',\n",
              "               '2022-05-01', '2022-06-01', '2022-07-01', '2022-08-01',\n",
              "               '2022-09-01', '2022-10-01', '2022-11-01', '2022-12-01',\n",
              "               '2023-01-01', '2023-02-01', '2023-03-01', '2023-04-01',\n",
              "               '2023-05-01', '2023-06-01', '2023-07-01', '2023-08-01',\n",
              "               '2023-09-01', '2023-10-01', '2023-11-01', '2023-12-01',\n",
              "               '2024-01-01', '2024-02-01', '2024-03-01', '2024-04-01',\n",
              "               '2024-05-01', '2024-06-01', '2024-07-01', '2024-08-01',\n",
              "               '2024-09-01', '2024-10-01', '2024-11-01', '2024-12-01',\n",
              "               '2025-01-01'],\n",
              "              dtype='datetime64[ns]', name='Date', freq=None)"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#code to check for duplicate rows\n",
        "duplicated_Date = dfInflations[dfInflations.index.duplicated(keep=False)]\n",
        "print(duplicated_Date)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mhIUurUbVrjR",
        "outputId": "3ad89111-0714-433f-ca2b-a3bacfc17ac7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Empty DataFrame\n",
            "Columns: [InflationRate]\n",
            "Index: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hafClxoWW111"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "gbetPYQEV2a8",
        "outputId": "778847e5-5694-4b8a-e29b-bae2df62f046"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "InflationRate    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>InflationRate</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vAmJziCbXAyn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflations.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c65KeBPaWAbk",
        "outputId": "50e43ecc-7e79-4bbb-82a1-94aff5e81417"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 73 entries, 2019-01-01 to 2025-01-01\n",
            "Data columns (total 1 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   InflationRate  73 non-null     float64\n",
            "dtypes: float64(1)\n",
            "memory usage: 3.2 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LzDhUPr_XLWo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reindex InflationRate to match Loans' DatetimeIndex\n",
        "dfInflation = dfInflations.reindex(cleaned_dfLoan.index)\n",
        "\n",
        "# Check the result\n",
        "print(dfInflation)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Be0dYuW4YAht",
        "outputId": "0495233d-67c6-47c1-f74f-ea3293ad2e92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            InflationRate\n",
            "Date                     \n",
            "2019-01-01           0.03\n",
            "2019-02-01          -0.01\n",
            "2019-03-01           0.02\n",
            "2019-04-01           0.06\n",
            "2019-05-01           0.04\n",
            "...                   ...\n",
            "2024-09-01           0.05\n",
            "2024-10-01           0.03\n",
            "2024-11-01           0.03\n",
            "2024-12-01          -0.01\n",
            "2025-01-01           0.02\n",
            "\n",
            "[72 rows x 1 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wWfQ2WevappA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "HbnTB6cxapVE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfInflation.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1vAjHYx8ZB7A",
        "outputId": "f65bcec5-ce5f-449a-ca83-b26ab3d85ca2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 72 entries, 2019-01-01 to 2025-01-01\n",
            "Data columns (total 1 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   InflationRate  72 non-null     float64\n",
            "dtypes: float64(1)\n",
            "memory usage: 1.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "r5WVcCwicX2T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code merged Loan and Inflation dataset\n",
        "merged_LoanInflation = pd.merge(cleaned_dfLoan, dfInflation, on='Date', how='inner')"
      ],
      "metadata": {
        "id": "W4rteLJFZRHT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(merged_LoanInflation)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PKlo-h_PZvoA",
        "outputId": "dff7b6c8-dc60-42a6-e90f-96d8785acc92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Loans  InflationRate\n",
            "Date                             \n",
            "2019-01-01   81.21           0.03\n",
            "2019-02-01   79.60          -0.01\n",
            "2019-03-01  100.48           0.02\n",
            "2019-04-01   97.65           0.06\n",
            "2019-05-01   81.85           0.04\n",
            "...            ...            ...\n",
            "2024-09-01  109.90           0.05\n",
            "2024-10-01  107.66           0.03\n",
            "2024-11-01   93.04           0.03\n",
            "2024-12-01   99.52          -0.01\n",
            "2025-01-01   93.81           0.02\n",
            "\n",
            "[72 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-WKtRlEOcauE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Xcmw3GBzcaYh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code to make copy of the merged dataset\n",
        "dfLoanInflationcopy = merged_LoanInflation.copy()"
      ],
      "metadata": {
        "id": "DqwKpQA-Z1pj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code to check the number missing values in the variables\n",
        "print(dfLoanInflationcopy.isna().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D_cLjammaK0W",
        "outputId": "f7bbe18b-d29a-4a23-dd6a-11214e59da39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loans            0\n",
            "InflationRate    0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2drajlzCgSgm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfLoanInflationcopy.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "-uLg26ROaVG6",
        "outputId": "53f956f5-0334-46fa-d74c-910d019ff05c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Loans  InflationRate\n",
              "count   72.000000      72.000000\n",
              "mean    90.022083       0.021806\n",
              "std     11.983586       0.045326\n",
              "min     53.050000      -0.100000\n",
              "25%     81.512500       0.000000\n",
              "50%     89.690000       0.010000\n",
              "75%     98.337500       0.040000\n",
              "max    115.090000       0.220000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0db3b03-9306-45c7-9ade-d6ce3a7112af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>72.000000</td>\n",
              "      <td>72.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>90.022083</td>\n",
              "      <td>0.021806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>11.983586</td>\n",
              "      <td>0.045326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>53.050000</td>\n",
              "      <td>-0.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>81.512500</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>89.690000</td>\n",
              "      <td>0.010000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>98.337500</td>\n",
              "      <td>0.040000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>115.090000</td>\n",
              "      <td>0.220000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0db3b03-9306-45c7-9ade-d6ce3a7112af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b0db3b03-9306-45c7-9ade-d6ce3a7112af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b0db3b03-9306-45c7-9ade-d6ce3a7112af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2e9dc737-c0ac-4d27-b7c8-317b58dcd2e2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2e9dc737-c0ac-4d27-b7c8-317b58dcd2e2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2e9dc737-c0ac-4d27-b7c8-317b58dcd2e2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dfLoanInflationcopy\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.804133518182834,\n        \"min\": 11.983585714822883,\n        \"max\": 115.09,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          90.02208333333334,\n          89.69,\n          72.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.44402044305227,\n        \"min\": -0.1,\n        \"max\": 72.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.021805555555555554,\n          0.01,\n          72.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "KxjJRS6aivSK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plot the bar graph of \"Loan Data\"\n",
        "dfLoanInflationcopy['Loans'].plot.bar(figsize=(15,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "kYerkY83azLN",
        "outputId": "afe7a023-b1d9-4dfc-de5a-0dbcd6c34d35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "o-4gB96vlmi7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plot the bar graph of \"Inflation Data\"\n",
        "dfLoanInflationcopy['InflationRate'].plot.bar(figsize=(15,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "NWMFqjdIa6We",
        "outputId": "868eaf85-cbe5-41cf-bbd8-3519c0eea981"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "yvZI-TX_mZk-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Detecting outliers in loan Data\n",
        "Q1 = dfLoanInflationcopy['Loans'].quantile(0.25)\n",
        "Q3 = dfLoanInflationcopy['Loans'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Define Outlier Thresholds\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "# Find Outliers\n",
        "outliers = dfLoanInflationcopy[(dfLoanInflationcopy['Loans'] < lower_bound) | (dfLoanInflationcopy['Loans'] > upper_bound)]\n",
        "print(outliers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yHmp9GJgbD5F",
        "outputId": "a6ab7722-ca1e-4692-971d-c83e1b2add2c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Loans  InflationRate\n",
            "Date                            \n",
            "2020-04-01  56.24           0.00\n",
            "2020-05-01  53.05           0.01\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qInzXRczmimL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tm2FICdxmiKc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#visualise Loan to check Outliers\n",
        "sns.boxplot(x=dfLoanInflationcopy['Loans'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "bcWjSj2cbaW4",
        "outputId": "1591909e-af6d-4d8d-cc38-0a6c6c099911"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Make a copy of the dataframe\n",
        "dfLoanInflationcopy_nooutliers = dfLoanInflationcopy.copy()\n",
        "\n",
        "#Compute IQR bounds\n",
        "Q1 = dfLoanInflationcopy_nooutliers['Loans'].quantile(0.25)\n",
        "Q3 = dfLoanInflationcopy_nooutliers['Loans'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "#Replace outliers with median\n",
        "dfLoanInflationcopy_nooutliers['Loans'] = np.where(\n",
        "    (dfLoanInflationcopy_nooutliers['Loans'] < lower_bound) | (dfLoanInflationcopy_nooutliers['Loans'] > upper_bound),\n",
        "    dfLoanInflationcopy_nooutliers['Loans'].median(),\n",
        "    dfLoanInflationcopy_nooutliers['Loans']\n",
        ")\n",
        "print(dfLoanInflationcopy_nooutliers.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4GMFb_uXbkOJ",
        "outputId": "7bd8839c-f643-4a45-eba4-0077ffe8972c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Loans  InflationRate\n",
            "count   72.000000      72.000000\n",
            "mean    90.995556       0.021806\n",
            "std     10.359642       0.045326\n",
            "min     70.460000      -0.100000\n",
            "25%     82.262500       0.000000\n",
            "50%     89.855000       0.010000\n",
            "75%     98.337500       0.040000\n",
            "max    115.090000       0.220000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IUYDaGKovezC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#visualise Loan Data to check fixed Outliers\n",
        "sns.boxplot(x=dfLoanInflationcopy_nooutliers['Loans'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "y0vFb8Mzb_qW",
        "outputId": "b4deb9c4-8c53-4337-db10-2f06c2d59742"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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jten3HzzzbF48eL46le/Gueee25ceeWVceONN8Y999wTEdH52v/XK32tS8+aOHFirFmzJvbv3x/btm2Lv/zlL/Hee+/FhAkTrEmZncjrP2rUqHjnnXe67D969Gjs2bPHGpWJc0z3lTQQHnnkkTjjjDNi5syZnds+/elPx4ABA2L16tWd2zZv3hwtLS3R0NBQyvH6lHfffTf9rbRfv37R0dERERHjx4+PUaNGdVmXtra2aGpqsi4lMGTIkBg9enTs3bs3nn/++bjsssusSZmdyOvf0NAQra2t8fLLL3ce88ILL0RHR0dMmzat5DPjHPO/UqqrIY8dO1bU19cXt9xyS9p37bXXFvX19cULL7xQvPTSS0VDQ0PR0NBQqtH6pKuuuqo488wzi5UrVxZbtmwpVqxYUXzkIx8pvv3tb3ce893vfrcYPnx48dvf/rZ49dVXi8suu6wYP358cfDgwTJOfmp77rnnimeffbZ48803iz/84Q/F1KlTi2nTphVHjhwpisKa9LT29vaiubm5aG5uLiKi+MEPflA0NzcXW7duLYrixF7/Sy+9tDjvvPOKpqamYt26dcXHP/7xYs6cOeV6Sh96H7Qmu3fvLpqbm4vf//73RUQUTz75ZNHc3Fy8/fbbnffhHNM9JQuE559/voiIYvPmzWnfwYMHi69//evFiBEjitNOO624/PLLuywuJ19bW1tx/fXXF/X19cWgQYOKCRMmFEuWLCkOHz7ceUxHR0dx2223FbW1tUVVVVVx8cUX/9v14+T51a9+VUyYMKEYOHBgMWrUqGLhwoVFa2tr535r0rNefPHFIiLS11VXXVUUxYm9/rt37y7mzJlTDB06tKiuri6+9rWvFe3t7WV4NqeGD1qTRx555N/uX7p0aed9OMd0j1/3DAAkLo0GABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAKeQq6++Or785S+XewzgFCAQAIBEIEAfsWbNmvjsZz8bVVVVMXr06Fi8eHEcPXq0c/9zzz0XF110UQwfPjxGjhwZX/rSl+If//hH5/5//vOfUVFREStWrIjPf/7zcdppp8XUqVOjsbGx85itW7fGrFmzYsSIETFkyJA4++yz45lnninp8wRODoEAfcD27dvji1/8YnzmM5+JV155JR544IF4+OGH46677uo85sCBA7Fo0aJ46aWXYvXq1VFZWRmXX355dHR0dLmvJUuWxE033RQbNmyISZMmxZw5czpDY+HChXH48OFYu3ZtbNy4MZYtWxZDhw4t6XMFTo7+5R4A6Hk/+clPoq6uLu6///6oqKiIyZMnx44dO+KWW26J22+/PSorK2P27NldbvOzn/0sPvrRj8Zrr70W55xzTuf2m266KWbOnBkREXfccUecffbZ8fe//z0mT54cLS0tMXv27Dj33HMjImLChAmle5LASeUTBOgDNm3aFA0NDVFRUdG57cILL4z9+/fHW2+9FRERb7zxRsyZMycmTJgQ1dXVcdZZZ0VEREtLS5f7+uQnP9n559GjR0dExDvvvBMREdddd13cddddceGFF8bSpUvj1Vdf7cmnBfQggQBERMSsWbNiz5498dBDD0VTU1M0NTVFRMSRI0e6HDdgwIDOP78fHO//M8T8+fPjzTffjCuvvDI2btwY559/ftx3330legbAySQQoA+YMmVKNDY2RlEUndv+/Oc/x7Bhw2Ls2LGxe/fu2Lx5c9x6661x8cUXx5QpU2Lv3r3deqy6urq49tprY8WKFfGtb30rHnrooZP1NIAScg0CnGL27dsXGzZs6LJtwYIF8aMf/Si++c1vxje+8Y3YvHlzLF26NBYtWhSVlZUxYsSIGDlyZDz44IMxevToaGlpicWLF/+PH/uGG26IGTNmxKRJk2Lv3r3x4osvxpQpU07SMwNKSSDAKeZPf/pTnHfeeV22zZs3L5555pm4+eabY+rUqXH66afHvHnz4tZbb42IiMrKynjyySfjuuuui3POOSc+8YlPxPLly+Nzn/vc/+ixjx07FgsXLoy33norqqur49JLL40f/vCHJ+upASVUUfzrZ44AAOEaBADg3xAIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACA5P8BerH5hFjtHA0AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jir537Z1vl02"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.histplot(dfLoanInflationcopy_nooutliers['Loans'], kde='True')\n",
        "plt.title('Histogram of Loans')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "eesUjBWTcPkh",
        "outputId": "05ff5a29-e3c9-413a-9896-5e36119887d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Detecting outliers in lnflationRate Data\n",
        "Q1 = dfLoanInflationcopy_nooutliers['InflationRate'].quantile(0.25)\n",
        "Q3 = dfLoanInflationcopy_nooutliers['InflationRate'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Define Outlier Thresholds\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "# Find Outliers\n",
        "outliers = dfLoanInflationcopy_nooutliers[(dfLoanInflationcopy_nooutliers['InflationRate'] < lower_bound) | (dfLoanInflationcopy_nooutliers['InflationRate'] > upper_bound)]\n",
        "print(outliers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eQuZ1oU3ccVc",
        "outputId": "cb4df192-36bc-40bc-92d4-9531820865dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Loans  InflationRate\n",
            "Date                             \n",
            "2022-04-01   86.18           0.12\n",
            "2022-10-01   94.85           0.12\n",
            "2022-11-01   96.29          -0.10\n",
            "2023-04-01  105.88           0.22\n",
            "2024-04-01  115.09           0.14\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "o73QI6-Dvt88"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#visualise InflationRate to check Outliers\n",
        "sns.boxplot(x=dfLoanInflationcopy_nooutliers['InflationRate'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "qlX4MzgmdA3B",
        "outputId": "d9c640d9-65cd-4fec-aebf-58bf24a76ae5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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4cOHR0lJSfzgBz847DE7q2Kvy+zZs7PHzCmnnNKGR9B2DmVt7r777jjnnHNi4MCBMXDgwBg/fny2/5FynilIHaCmpiaNGTMm/fa3v01PPfVUOvHEE9PXv/71g15n/vz5ad68eWnevHkpItJbb71VlHE7k9bM//LLL09Dhw5NS5cuTb///e/TZz7zmXT22We32Cci0k9/+tPU0NBQ+LNz5862PJTDsmjRolRWVpbuueee9OKLL6ZLL700DRgwIG3evHm/+69YsSJ169Yt3XzzzWnt2rXp+uuvTz169EgvvPBCYZ+bbropVVRUpF/84hfp+eefT1/60pfSCSec0KnX4cPaYl2mTp2aampqWjw2tmzZ0l6HVDSHuja/+93v0syZM9MDDzyQqqqq0vz58w97zM6oLdaltrY2jRo1qsVj5v/+7//a+EiK71DX5hvf+Ea644470qpVq9K6devStGnTUkVFRXrttdcK+xwJ55kPavdAWLt2bYqI9Oyzzxa2/frXv04lJSXpT3/600def9myZfsNhMMdt6O1Zv5bt25NPXr0SIsXLy5sW7duXYqIVFdXV9gWEenhhx9us7kX21lnnZVmzJhR+LipqSkNGTIkzZs3b7/7f/WrX01/8zd/02Lb2LFj02WXXZZSSqm5uTlVVVWlW265pXD51q1bU8+ePdMDDzzQBkfQNoq9Lim9HwgTJkxok/m2p0Ndmw+qrq7e7xfCwxmzs2iLdamtrU1jxowp4iw7xuHev3v37k39+/dP9957b0rpyDnPfFC7f4uhrq4uBgwYEH/+539e2DZ+/PgoLS2NlStXdrpx20tr5v/cc8/Fe++9F+PHjy9sO+WUU2LYsGFRV1fXYt8ZM2bEscceG2eddVbcc889H/k2nx1lz5498dxzz7U4ptLS0hg/fnx2TPvU1dW12D8i4sILLyzsX19fH42NjS32qaioiLFjxx5wzM6mLdZlnyeeeCI+8YlPxMknnxxXXHFFvPnmm8U/gDbUmrXpiDHbW1sew/r162PIkCExYsSImDJlSmzcuPFwp9uuirE27777brz33nsxaNCgiDgyzjMf1u6B0NjYGJ/4xCdabOvevXsMGjQoGhsbO9247aU1829sbIyysrIYMGBAi+2VlZUtrjN37tx48MEH49FHH42JEyfGlVdeGbfffnvRj6EY3njjjWhqaorKysoW2z98TB/U2Nh40P33/X0oY3Y2bbEuERE1NTVx3333xdKlS+P73/9+PPnkk/H5z38+mpqain8QbaQ1a9MRY7a3tjqGsWPHxsKFC+M3v/lN/OQnP4n6+vo455xzYvv27Yc75XZTjLW59tprY8iQIYUgOBLOMx/W6ndz/LDvfve78f3vf/+g+6xbt65YN9dldIZ1mTVrVuHfp512Wrzzzjtxyy23xNVXX92mt0vn97Wvfa3w709/+tMxevTo+OQnPxlPPPFEXHDBBR04Mzqrz3/+84V/jx49OsaOHRvV1dXx4IMPxiWXXNKBM2s/N910UyxatCieeOKJ6NWrV0dPp80ULRCuueaamDZt2kH3GTFiRFRVVcXrr7/eYvvevXtjy5YtUVVV1erbb6txD1dbrktVVVXs2bMntm7d2uJZhM2bNx/0mMeOHRvf+973Yvfu3Z3u94ofe+yx0a1bt+wnMQ52TFVVVQfdf9/fmzdvjsGDB7fY59RTTy3i7NtOW6zL/owYMSKOPfbYeOWVV7pMILRmbTpizPbWXscwYMCAGDlyZLzyyitFG7OtHc7a3HrrrXHTTTfFY489FqNHjy5sPxLOMx9WtG8xHHfccXHKKacc9E9ZWVmMGzcutm7dGs8991zhuo8//ng0NzfH2LFjW337bTXu4WrLdTnjjDOiR48esXTp0sK2l156KTZu3Bjjxo074JxWr14dAwcO7HRxEBFRVlYWZ5xxRotjam5ujqVLlx7wmMaNG9di/4iIRx99tLD/CSecEFVVVS322bZtW6xcufKg69SZtMW67M9rr70Wb775ZosTXGfXmrXpiDHbW3sdw44dO2LDhg1HxWPm5ptvju9973vxm9/8psXrxSKOjPNMpiNeGVlTU5NOO+20tHLlyvT000+nk046qcWP87322mvp5JNPTitXrixsa2hoSKtWrUp33313ioi0fPnytGrVqvTmm29+7HE7u9asy+WXX56GDRuWHn/88fT73/8+jRs3Lo0bN65w+X/+53+mu+++O73wwgtp/fr16c4770x9+vRJN9xwQ7se26FYtGhR6tmzZ1q4cGFau3Ztmj59ehowYEBqbGxMKaV08cUXp+9+97uF/VesWJG6d++ebr311rRu3bpUW1u73x9zHDBgQFqyZElas2ZNmjBhQpf78aNir8v27dvTzJkzU11dXaqvr0+PPfZYOv3009NJJ52Udu3a1SHH2FqHuja7d+9Oq1atSqtWrUqDBw9OM2fOTKtWrUrr16//2GN2BW2xLtdcc0164oknUn19fVqxYkUaP358OvbYY9Prr7/e7sd3OA51bW666aZUVlaW/uM//qPFj3hu3769xT5d/TzzQR0SCG+++Wb6+te/nvr165fKy8vTt771rRaLXF9fnyIiLVu2rLCttrY2RUT256c//enHHreza8267Ny5M1155ZVp4MCBqU+fPunLX/5yamhoKFz+61//Op166qmpX79+qW/fvmnMmDFpwYIFqampqT0P7ZDdfvvtadiwYamsrCydddZZ6be//W3hsvPOOy9NnTq1xf4PPvhgGjlyZCorK0ujRo1KjzzySIvLm5ub06xZs1JlZWXq2bNnuuCCC9JLL73UHodSVMVcl3fffTf99V//dTruuONSjx49UnV1dbr00ku71BfADzqUtdn3ufThP+edd97HHrOrKPa6TJ48OQ0ePDiVlZWlP/uzP0uTJ09Or7zySjseUfEcytpUV1fvd21qa2sL+xwp55l9vN0zAJDxXgwAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEI0Ik1NjbGX/3VX0Xfvn0Lb8hVUlISv/jFLw577GKNAxyZBAK0o2nTpsXf/u3ffuz958+fHw0NDbF69ep4+eWXW3Wbs2fP3u+7yTU0NLR4695iOP/886OkpCRKSkqiV69eMXLkyJg3b14c6i9sHT58ePzgBz8o6tyAQ1O0t3sGim/Dhg1xxhlnxEknnVT0sdvqbYsvvfTSmDt3buzevTsef/zxmD59egwYMCCuuOKKNrk9oG14BgE6yPnnnx9XX311/OM//mMMGjQoqqqqYvbs2YXLhw8fHg899FDcd999UVJSEtOmTdvvONdee22MHDky+vTpEyNGjIhZs2bFe++9FxERCxcujDlz5sTzzz9f+J/9woULIyL/FsMLL7wQf/mXfxm9e/eOY445JqZPnx47duwoXL7v2Y9bb701Bg8eHMccc0zMmDGjcFv79OnTJ6qqqqK6ujq+9a1vxejRo+PRRx8tXL5hw4aYMGFCVFZWRr9+/eLMM8+Mxx57rMW6vPrqq/Gd73ynMOd9nn766TjnnHOid+/eMXTo0Lj66qvjnXfeOdSlBz4GgQAd6N57742+ffvGypUr4+abb465c+cWvpg+++yzUVNTE1/96lejoaEhfvjDH+53jP79+8fChQtj7dq18cMf/jDuvvvumD9/fkRETJ48Oa655poYNWpUNDQ0RENDQ0yePDkb45133okLL7wwBg4cGM8++2wsXrw4Hnvssbjqqqta7Lds2bLYsGFDLFu2LO69995YuHBhITg+LKUUTz31VPzP//xPlJWVFbbv2LEjvvCFL8TSpUtj1apVUVNTE1/84hdj48aNERHx85//PI4//viYO3duYc4R74dFTU1NTJw4MdasWRM/+9nP4umnn87mCBRJx76ZJBxdpk6dmiZMmJBSev/tZP/iL/6ixeVnnnlmuvbaawsfT5gwIXsL54hIDz/88AFv45ZbbklnnHFG4ePa2to0ZsyYbL8PjnPXXXelgQMHph07dhQuf+SRR1JpaWnh7Z+nTp2aqqur0969ewv7TJo0KU2ePLnw8XnnnZd69OiR+vbtm3r06JEiIvXq1SutWLHigPNNKaVRo0al22+/vfBxdXV1mj9/fot9LrnkkjR9+vQW25566qlUWlqadu7cedDxgUPnNQjQgUaPHt3i48GDB8frr79+SGP87Gc/ix/96EexYcOG2LFjR+zduzfKy8sPaYx169bFmDFjom/fvoVtn/3sZ6O5uTleeumlqKysjIiIUaNGRbdu3VrM94UXXmgx1pQpU+K6666Lt956K2pra+Pss8+Os88+u3D5jh07Yvbs2fHII49EQ0ND7N27N3bu3Fl4BuFAnn/++VizZk3cf//9hW0ppWhubo76+vr41Kc+dUjHDBycQIAO1KNHjxYfl5SURHNz88e+fl1dXUyZMiXmzJkTF154YVRUVMSiRYvitttuK/ZUI+LjzbeioiJOPPHEiIh48MEH48QTT4zPfOYzMX78+IiImDlzZjz66KNx6623xoknnhi9e/eOr3zlK7Fnz56D3vaOHTvisssui6uvvjq7bNiwYYdzWMB+CATowp555pmorq6O6667rrDt1VdfbbFPWVlZNDU1HXScT33qU7Fw4cJ45513Cs8irFixIkpLS+Pkk09u9fz69esXf//3fx8zZ86MVatWRUlJSaxYsSKmTZsWX/7ylyPi/S/8f/jDHz5yzqeffnqsXbu2EB9A2/IiRejCTjrppNi4cWMsWrQoNmzYED/60Y/i4YcfbrHP8OHDo76+PlavXh1vvPFG7N69OxtnypQp0atXr5g6dWr893//dyxbtiz+7u/+Li6++OLCtxda67LLLouXX345HnroocKcf/7zn8fq1avj+eefj2984xvZsxDDhw+P5cuXx5/+9Kd44403IuL9n9Z45pln4qqrrorVq1fH+vXrY8mSJV6kCG1EIEAX9qUvfSm+853vxFVXXRWnnnpqPPPMMzFr1qwW+0ycODFqamric5/7XBx33HHxwAMPZOP06dMn/uu//iu2bNkSZ555ZnzlK1+JCy64IH784x8f9hwHDRoU3/zmN2P27NnR3Nwc//Iv/xIDBw6Ms88+O774xS/GhRdeGKeffnqL68ydOzf+8Ic/xCc/+ck47rjjIuL912s8+eST8fLLL8c555wTp512Wtxwww0xZMiQw54jkCtJ6RB/xRkAcMTzDAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAAJn/D0G/cwYEoxcpAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking for null values\n",
        "null_values = dfLoanInflationcopy_nooutliers.isnull().sum()\n",
        "print(f\"🔍 Total null values in 'LoanInflationData': {null_values}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "90s1ReBadYrx",
        "outputId": "8b873d98-c599-4be0-df57-fb23fff6bb5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 Total null values in 'LoanInflationData': Loans            0\n",
            "InflationRate    0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking for zero values\n",
        "zero_values = dfLoanInflationcopy_nooutliers[dfLoanInflationcopy_nooutliers['InflationRate'] == 0].shape[0]\n",
        "print(f\"⚙️  Number of zero values in 'InflationRate': {zero_values}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bs6KQLCVeLCr",
        "outputId": "bc67f321-af1e-45cb-c652-57d40fb8c859"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "⚙️  Number of zero values in 'InflationRate': 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hLLn4e5Uv_ZZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions = dfLoanInflationcopy_nooutliers.copy()"
      ],
      "metadata": {
        "id": "YLbH3UaYd6gB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Replace with your actual DataFrame if needed\n",
        "dfTransactions.to_csv('loan_data_for_timeseries.csv', index=True)"
      ],
      "metadata": {
        "id": "tpWXYz1Os4H9",
        "outputId": "0e14b960-6888-480e-9ef2-c29975cc93c4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 158
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'dfTransactions' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1-238758809.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Replace with your actual DataFrame if needed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdfTransactions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'loan_data_for_timeseries.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'dfTransactions' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# This will prompt a download of the file\n",
        "files.download('loan_data_for_timeseries.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "GP4cNAjotD8P",
        "outputId": "7fd782c5-b238-46a4-813c-0219e9e72ddd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_ee1f09c5-489c-49d9-bd4d-4ca407930eee\", \"loan_data_for_timeseries.csv\", 1622)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QruP22PFwzCr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking if the data is normal using Shapiro-Wilk Test\n",
        "from scipy.stats import shapiro\n",
        "\n",
        "# Perform Shapiro-Wilk test on the 'Loans' column\n",
        "stat, p_value = shapiro(dfTransactions['Loans'])\n",
        "\n",
        "# Print the results\n",
        "print(f\"Shapiro-Wilk Test Statistic: {stat}, p-value: {p_value}\")\n",
        "if p_value > 0.05:\n",
        "    print(\"Data appears to be normally distributed (fail to reject H0).\")\n",
        "else:\n",
        "    print(\"Data does not appear to be normally distributed (reject H0).\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IvExdtHtiveJ",
        "outputId": "5b6c0768-f763-47da-a036-3a321d02af6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shapiro-Wilk Test Statistic: 0.9800529027072254, p-value: 0.3096520556427311\n",
            "Data appears to be normally distributed (fail to reject H0).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-g2kZ5kjwgWc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions['Loans'].plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "6dPxT1DvjkCE",
        "outputId": "7958eed4-37b2-4b3e-f836-eb91fbe5b66b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions['InflationRate'].plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "4clhAA0UkDt9",
        "outputId": "0e7e46b5-d379-4c86-f213-72a1935ba402"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a window of 7 and find mean\n",
        "dfTransactions.rolling(window=7).mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "fA65FYabkJ7D",
        "outputId": "637a6bd8-fddd-4177-d85c-fc846b1671d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Loans  InflationRate\n",
              "Date                                 \n",
              "2019-01-01         NaN            NaN\n",
              "2019-02-01         NaN            NaN\n",
              "2019-03-01         NaN            NaN\n",
              "2019-04-01         NaN            NaN\n",
              "2019-05-01         NaN            NaN\n",
              "...                ...            ...\n",
              "2024-09-01  104.352857       0.041429\n",
              "2024-10-01  104.091429       0.035714\n",
              "2024-11-01  100.941429       0.020000\n",
              "2024-12-01  101.521429       0.008571\n",
              "2025-01-01  100.160000       0.012857\n",
              "\n",
              "[72 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6640ca2d-39dc-48af-88e3-a73f8b40b0e7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-02-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>104.352857</td>\n",
              "      <td>0.041429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>104.091429</td>\n",
              "      <td>0.035714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>100.941429</td>\n",
              "      <td>0.020000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>101.521429</td>\n",
              "      <td>0.008571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>100.160000</td>\n",
              "      <td>0.012857</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>72 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6640ca2d-39dc-48af-88e3-a73f8b40b0e7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6640ca2d-39dc-48af-88e3-a73f8b40b0e7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6640ca2d-39dc-48af-88e3-a73f8b40b0e7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4d613afc-46da-4d35-a3f3-1e351cdb1954\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d613afc-46da-4d35-a3f3-1e351cdb1954')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4d613afc-46da-4d35-a3f3-1e351cdb1954 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dfTransactions\",\n  \"rows\": 72,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-01-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 72,\n        \"samples\": [\n          \"2019-05-01 00:00:00\",\n          \"2024-04-01 00:00:00\",\n          \"2020-07-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.057336802143782,\n        \"min\": 78.74571428571429,\n        \"max\": 104.60142857142857,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          99.96571428571428,\n          104.09142857142857,\n          88.75714285714285\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013555707107553138,\n        \"min\": 0.004285714285714287,\n        \"max\": 0.047142857142857146,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          0.014285714285714285,\n          0.012857142857142859,\n          0.032857142857142856\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions['Loans'].plot(figsize=(15,5))\n",
        "dfTransactions.rolling(window=7).mean()['Loans'].plot()\n",
        "dfTransactions.rolling(window=14).mean()['Loans'].plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "BKJvvFZdkRJg",
        "outputId": "37cfd93c-ce58-45f7-d2f1-50a50090ae53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nU8BB8f-xk5N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Using DateLocators and Formatters"
      ],
      "metadata": {
        "id": "AVfSN7GykaI3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#To display plot based on specific periods/values\n",
        "dfTransactions['Loans']['2019-11-01': '2021-01-31'].plot(figsize=(15,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "5gfB651kkh6n",
        "outputId": "5bcac6ae-d0d9-44a5-c060-05748692332c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as dates # Import the dates module\n",
        "ax= dfTransactions['Loans'].plot(xlim=['2019-01-01', '2019-12-01'], ylim=[60,150])\n",
        "ax.xaxis.set_major_locator(dates.MonthLocator())\n",
        "ax.xaxis.set_major_formatter(dates.DateFormatter('%B-%Y'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "v7QW0eNLktOQ",
        "outputId": "befdc2ee-8238-4439-866e-2d94be08f1c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.seasonal import seasonal_decompose"
      ],
      "metadata": {
        "id": "YWbEFOdjk1m_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nAYtwueLyCd7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# decompose plot of loan using multiplicative\n",
        "result = seasonal_decompose(dfTransactions['Loans'], model='multiplicative', period=12)\n",
        "# Plot\n",
        "plt.figure(figsize=(12, 8))\n",
        "result.plot()\n",
        "plt.suptitle(\"Time Series Decomposition of Loans\", fontsize=16)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 509
        },
        "id": "0XuHXklxk9XT",
        "outputId": "873f42d1-26cc-4e91-d1b2-cba3c170b1b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# decompose plot of loan using Addictive\n",
        "result = seasonal_decompose(dfTransactions['Loans'], model='addictive', period=12)\n",
        "# Plot\n",
        "plt.figure(figsize=(12, 8))\n",
        "result.plot()\n",
        "plt.suptitle(\"Time Series Decomposition of Loans\", fontsize=16)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 509
        },
        "id": "hZJDT-VdlElx",
        "outputId": "bbd79fa1-0e69-4580-a5f9-3059c298c800"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pylab import rcParams\n",
        "rcParams['figure.figsize']=12,5\n",
        "\n",
        "result.plot();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 418
        },
        "id": "HfLntI58lQg4",
        "outputId": "eb768a8d-ba74-4992-f6f9-c72b43fe1c53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xuVRAlfoCOAY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Hodrick-Prescott (HP) Filter"
      ],
      "metadata": {
        "id": "fOAjrYsvCNnm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.filters.hp_filter import hpfilter"
      ],
      "metadata": {
        "id": "DRU7DVIAlU0v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply Hodrick-Prescott Filter\n",
        "# Lambda value: 1600 for monthly data\n",
        "Loan_trend, Loan_cycle = hpfilter(dfTransactions['Loans'], lamb=1600)"
      ],
      "metadata": {
        "id": "sBOeO9VmlqbI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_trend.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "E89mV-IQlzri",
        "outputId": "10b818ea-67e9-4864-e8d5-b408d2c440b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 59
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Loan_cycle.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "EA5-2KJjn6DX",
        "outputId": "24596192-c1f1-46e8-a26b-a0934d246db8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "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OijnAAAATVSxvUq3LdikskqHhnYM0fSRXcyOBAA4TZRzAACAJsgwDD3w3206kFuiiEBv/Wtcb1mZAA4AmizKOQAAQBP09uoUfbU9U+5uFr1yXV+18fMyOxIA4E+gnAMAADQxiSlHNOvr3ZKkRy7pqn4xrU1OBAD4syjnAAAATUhukV1/eX+zqpyGRveK1KQhsWZHAgDUAco5AABAE1HlcOruD35Sts2ujm399PSVPWSxcJ85ADQHlHMAAIAm4vll+7T2QL5aeVr1+vV95evlbnYkAEAdoZwDAAA0Act2Zeu175MlSc+M7amObf1NTgQAqEuUcwAAgEbuUH6Jpn+0RZI0eUisRveKNDcQAKDOUc4BAAAasfJKh25bsFlF5VXqGx2khy/uanYkAEA9oJwDAAA0Yo8t2qHdmTa18fXUqxP6ytOdH98AoDni0x0AAKCRWrjxsD5KTJObRXppfB9FBPqYHQkAUE8o5wAAAI3QjvRCPbpopyTpbxd00VkdQ0xOBACoT5RzAACARuZoSYVuf2+TKqqcGp7QVref28HsSACAekY5BwAAaESqHE7d+cFmpR4pU1Swj2Zf01tubhazYwEA6hnlHAAAoBH5x9d7tDopX608rXpjYn8FtvIwOxIAoAFQzgEAABqJjxNT9fbqg5Kk56/upYTwAJMTAQAaCuUcAACgEfjp8FH932c7JEl3D++ki3pEmJwIANCQKOcAAAAmy7aV69b5m1ThcGpktzBNG97J7EgAgAZGOQcAADBReaVDt87fpJwiuzqH+emFa5kADgBaIso5AACASQzD0COf79CW1AIF+njojYn95eflbnYsAIAJKOcAAAAmeXdNiv67KU1uFumV6/oopo2v2ZEAACahnAMAAJhgdVKenvpqtyTp4Yu76uxOoSYnAgCYqV7KeVFRkaZNm6aYmBj5+PhoyJAh2rhxo+t9wzD02GOPKSIiQj4+PhoxYoT279//h/t99dVXFRsbK29vbw0aNEgbNmyoj/gAAAD16nB+qf7y/mY5nIau7NtOU4fGmR0JAGCyeinnN910k5YtW6b58+dr+/btuuCCCzRixAilp6dLkp599lm99NJLev3117V+/Xr5+vrqwgsvVHl5+e/uc+HChZo+fboef/xxbd68Wb169dKFF16onJyc+jgEAACAelFir9LN8xJVUFqpXu0D9Y8reshiYQI4AGjpLIZhGHW5w7KyMvn7+2vRokW65JJLXMv79euniy66SE8++aQiIyP1t7/9Tffee68kqbCwUGFhYXr33Xc1bty4Gvc7aNAgDRgwQK+88ookyel0KioqSnfddZcefPDBP8xls9kUGBiowsJCBQQE1MGRAgAA1I7Taej29zZp6c5shfp76X93DlV4oLfZsQAA9aQ2PbTOz5xXVVXJ4XDI27v6PzQ+Pj5atWqVDh48qKysLI0YMcL1XmBgoAYNGqS1a9fWuM+Kigpt2rSp2jZubm4aMWLE725jt9tls9mqvQAAAMz08rdJWrozW55WN71+fT+KOQDApc7Lub+/vwYPHqwnn3xSGRkZcjgcWrBggdauXavMzExlZWVJksLCwqptFxYW5nrvt/Ly8uRwOGq1zaxZsxQYGOh6RUVF1cHRAQAAnJ6lO7P0wvJ9kqSnxpyhfjGtTU4EAGhM6uWe8/nz58swDLVr105eXl566aWXNH78eLm5Ndzk8A899JAKCwtdr9TU1Ab73gAAAL+2O9Om6Qu3SJImD4nVNQM4aQAAqK5e2nKHDh20cuVKFRcXKzU1VRs2bFBlZaXi4+MVHh4uScrOzq62TXZ2tuu93woJCZHVaq3VNl5eXgoICKj2AgAAaGi5RXbdNDdRJRUODenQRv93SVezIwEAGqF6PZXt6+uriIgIHT16VEuXLtXll1+uuLg4hYeHa8WKFa71bDab1q9fr8GDB9e4H09PT/Xr16/aNk6nUytWrPjdbQAAAMxWXunQLfMTlV5QprgQX/17Ql95WBvuSkIAQNPhXh87Xbp0qQzDUJcuXZSUlKT77rtPCQkJmjJliiwWi6ZNm6annnpKnTp1UlxcnB599FFFRkZqzJgxrn0MHz5cV1xxhe68805J0vTp0zVp0iT1799fAwcO1IsvvqiSkhJNmTKlPg4BAADgTzEMQ/f/d5t+OlygQB8PvTWpv4JaeZodCwDQSNVLOS8sLNRDDz2ktLQ0BQcHa+zYsZo5c6Y8PDwkSffff79KSkp0yy23qKCgQEOHDtWSJUuqzfCenJysvLw819fXXnutcnNz9dhjjykrK0u9e/fWkiVLTpgkDgAAoDF4+dskfbE1Q+5uFr02oa/iQ/3MjgQAaMTq/DnnjRXPOQcAAA3ly20ZuvP9nyRJs67sofEDo01OBAAwg6nPOQcAAGjJtqYW6G8fbZUkTR0aRzEHAJwSyjkAAEAdySws083zEmWvcur8hLZ6+GJmZgcAnBrKOQAAQB0orajSTXMTlVNkV5cwf/1rXG9Z3SxmxwIANBGUcwAAgD/J6TQ07cMt2plhUxtfT705qb/8vT3MjgUAaEIo5wAAAH/Ss0v36ptd2fK0umnOxH6KCm5ldiQAQBNDOQcAAPgTPk5M1esrkyVJz17VU/1igk1OBABoiijnAAAAp2nDwSN6+LPtkqQ7h3XUmD7tTE4EAGiqKOcAAACn4XB+qW6dn6hKh6GLe4Rr+sjOZkcCADRhlHMAAIBaKiyr1NS5G3W0tFI92gXq+at7y42Z2QEAfwLlHAAAoBYqHU7d+f5m7c8pVliAl96Y2F8+nlazYwEAmjjKOQAAwCkyDEOPf7FTP+7Pk4+HVW9NGqDwQG+zYwEAmgHKOQAAwCl6a9VBvb/+sCwW6aXxfXRGu0CzIwEAmgnKOQAAwClYtitbM7/eLUn6v4u7amS3MJMTAQCaE8p5I5NbZFd6QZmcTsPsKAAA4Lgd6YW6+4OfZBjShEHRmjo0zuxIAIBmxt3sAKjuvfWH9OLy/fL2cFN8iJ86tPVTh1BfdQj1U4dQP8WH+srbg0lnAABoKFmF5Zo6d6PKKh06u1OInrisuywWZmYHANQtynkjU2KvkofVovJKp3Zl2rQr01btfYtFahfk4yrrHdoeK+5dwvzV2tfTpNQAADRPJfYqTZ27Udk2uzq19dMr1/WVh5ULDwEAdc9iGEaLuH7aZrMpMDBQhYWFCggIMDvOSVU5nEo9WqbknGIl5/78KlFSTrEKyyp/d7vwAG91CfdXQoS/uoYHKCHCX/EhfvJ054cIAABqy+E0dOv8TVq+O1ttfD31+V/OUlRwK7NjAQCakNr0UM6cN0LuVjfFhfgqLsRXI/TLZDOGYehISYWSc0uUnFusA8dL+77sIqUdLVOWrVxZtnKt3Jfr2sbDalGHUD91jQg4VtzD/dUtIkCh/l5ckgcAwEnM+nq3lu/Olqe7m+ZM7E8xBwDUK8p5E2KxWNTGz0tt/Lw0MC642nvF9irtzSrSniyb9mT+8t8ie5X2ZBVpT1ZRtfWDfT2VEO6vrhEBrv92bOvH/ewAAOjYHDBvrjooSXr+6l7qF9Pa5EQAgOaOy9qbMcMwlFFYrj2ZNu3JKtLu4/89kFusmiaDt7pZFB/iq4SIAHU9fml8t8gAhQV4N3x4AABM8uP+XE1+Z6McTkN/G9lZdw3vZHYkAEATVZseSjlvgcorHdqfXazdx8+u7860aXeWTQWlNd/PHhbgpV7tg9QrKki9o4LUo32gArw9Gjg1AAD1b392ka789xoV2at0ZZ92ev6aXtwGBgA4bZTzGlDOT84wDGXb7NUK+54sm5Jyaj7L3iHU11XWe7UPUkKEv7zcuSQeANB05RXbNebV1Uo7WqaBscGaf9NA/m0DAPwplPMaUM5PT2lFlXZm2LQ1tUBbUgu0Na1AqUfKTljP0+qmrpEB6hMVpD7RQeob3VrtW/twtgEA0CQUlVfqujfWa3t6oWLatNJnd5ylYB5RCgD4kyjnNaCc1538Yru2pRW6yvrW1AIdreGS+FB/L/WJClLfmNbqG91aPdsHMuEcAKDRKa90aPI7G7TuwBEF+3rqv7cNVnyon9mxAADNAOW8BpTz+mMYhlKPlOmn1KP66XCBfjp8VDszbKr6zfXw7m4WdYsMUN/o1pxdBwA0ClUOp25bsFnLd2fLz8tdH95yps5oF2h2LABAM0E5rwHlvGGVVzq0Pb1Qmw8d1ebDR7X5cIFyi+wnrBcR6K0z49vozPhgnRnfRtHBrSjrAIAG4XQauve/W/Xp5nR5urtp3o0DdWZ8G7NjAQCaEcp5DSjn5jIMQ2lHy7T58MnPrlPWAQANwTAM/f3LXXpndYqsbhb95/p+GtEtzOxYAIBmhnJeA8p541NW4dDmw0e17kC+1h3I15bUAlU6KOsAgPr30or9mr1snyRp9jW9dGXf9iYnAgA0R6aWc4fDoSeeeEILFixQVlaWIiMjNXnyZD3yyCOuUvV75erZZ5/VfffdV+N7TzzxhGbMmFFtWZcuXbRnz55TykU5b/xOpay3C/LR4A5tNKRDGw3pEKLwQG+T0gIAmqp5a1P02KKdkqTHLu2mG4fGmZwIANBc1aaHutf1N3/mmWf02muvae7cuerevbsSExM1ZcoUBQYG6u6775YkZWZmVttm8eLFmjp1qsaOHXvSfXfv3l3Lly//Jbx7nceHiXw8rTqrY4jO6hgi6VhZ/8lV1o/op9SjSi8o0383pem/m9IkSfGhvjqrQ4iGdGijwR3aKKgVj70BAPy+RVvSXcX87uGdKOYAgEajztvtmjVrdPnll+uSSy6RJMXGxuqDDz7Qhg0bXOuEh4dX22bRokUaNmyY4uPjTx7W3f2EbdF8+XhaNaRjiIYcL+ulFVVKTDmqNcn5WpOcp+3phTqQW6IDuSWav+6QLBapW0SAzuoYosEd2mhgbLB8vfgFDgDgmG/3ZOtvH22VJE0aHKN7RnQyOREAAL+o8+YyZMgQzZkzR/v27VPnzp21detWrVq1SrNnz65x/ezsbH311VeaO3fuH+57//79ioyMlLe3twYPHqxZs2YpOjq6xnXtdrvs9l9mB7fZbKd3QGg0Wnm665zOoTqnc6gkqbC0UusO5mvt8bK+L7tYOzNs2plh05wfDsjDalHf6NY6p3Oozu4UojMiA+Xmxv3qANASbTh4RLcv2Kwqp6ExvSP1+OjuzGECAGhU6vyec6fTqYcffljPPvusrFarHA6HZs6cqYceeqjG9Z999lk9/fTTysjIkLf3798/vHjxYhUXF6tLly7KzMzUjBkzlJ6erh07dsjf3/+E9Wu6R10S95w3YzlF5VqbfKysr07OU+qRsmrvt27lobM6hrjKekSgj0lJAQANaUd6ocbPWacie5XOT2ir/9zQTx5WN7NjAQBaAFMnhPvwww9133336bnnnlP37t21ZcsWTZs2TbNnz9akSZNOWD8hIUEjR47Uyy+/XKvvU1BQoJiYGM2ePVtTp0494f2azpxHRUVRzluQQ/kl+mF/nn7cl6s1yfkqtldVe79TWz+d3SlUZ3cO0ZlxbeTjaTUpKQCgvhzMK9HVr69RXnGFBsYGa+6NA/m8BwA0GFPLeVRUlB588EH95S9/cS176qmntGDBghNmVv/xxx91zjnnaMuWLerVq1etv9eAAQM0YsQIzZo16w/XZbb2lq3S4dSW1AL9uC9XP+zP07a0Av36EeueVjcNjAvW8K5tNaJrmKKCW5kXFgBQJzILy3TVa2uVXlCmbhEB+vDWMxXg7WF2LABAC2LqbO2lpaVyc6t+qZjVapXT6Txh3bfeekv9+vU7rWJeXFys5ORk3XDDDaedFS2Hh9VNA2KDNSA2WNMv6KKC0gqtTsrXj/tz9cO+XGUUlmtVUp5WJeVpxv92qUuYv0Z0O1bUe7UP4l51AGhi8ortmvDmeqUXlCkuxFdzbxxIMQcANGp1Xs5Hjx6tmTNnKjo6Wt27d9dPP/2k2bNn68Ybb6y2ns1m08cff6znn3++xv0MHz5cV1xxhe68805J0r333qvRo0crJiZGGRkZevzxx2W1WjV+/Pi6PgS0AEGtPHVJzwhd0jNChmEoObdE3+/N0bJd2Uo8dFR7s4u0N7tIr36XrBA/Lw1PaKsR3cI0tGMIl0MCQCNXUFqh699crwO5JYoM9Nb8qQMV6u9ldiwAAE6qzsv5yy+/rEcffVR33HGHcnJyFBkZqVtvvVWPPfZYtfU+/PBDGYbxu+U6OTlZeXl5rq/T0tI0fvx45efnKzQ0VEOHDtW6desUGhpa14eAFsZisahjWz91bOunm86OV0Fphb7fm6tlu7O1cm+u8ortWpiYqoWJqfJyd9PQjiEa0S1MwxPaqm3A709iCABoeEXllZr0zkbtySpSiJ+X3rv5TLVvza1KAIDGr87vOW+suOccp6Oiyqn1B/O1Yvexs+rpBdVngO8dFaSR3cJ0YfcwdQj147E8AGCisgqHJr29QRtSjiiolYcW3jJYXcJPfKILAAANxdQJ4Roryjn+LMMwtDe7SMt3ZWvZrmxtTSus9n5ciK9GdgvTyG5h6hvdWlbuUweABmOvcuimuYn6cX+e/L3c9f7NZ6pH+0CzYwEAWjjKeQ0o56hr2bZyLTte1Ncm56vC8cukh218PXV+QluN7BamszuFcp86ANSjSodTd7y3Wct2ZcvHw6r5Uweqf2yw2bEAAKCc14RyjvpUbK/Syr25WrYrS9/uyZGt/Jdnqnt7uGlox1CNOiNcI7uGKbAVswUDQF1xOA3ds3CLvtiaIU93N70zeYDO6hhidiwAACRRzmtEOUdDqXQ4tfHgEX1z/Kz6r+9T97BadFbHEF18RoRGdgtTa19PE5MCQNPmdBp66NPtWpiYKnc3i/5zQz8N7xpmdiwAAFwo5zWgnMMMhmFoV6ZN3+zM1pIdWdqbXeR6z93NosEd2ujiHhG6sHu4ginqAHDKDMPQjP/t0rtrUuRmkV4a30eX9ow0OxYAANVQzmtAOUdjkJRTrMXbM/XV9kztyfqlqFvdLDozPthV1EP8eB4vAJzMc0v36NXvkiVJ/7y6l67q197kRAAAnIhyXgPKORqbA7nFWrwjS19vz9TODJtruZtFGhh3rKiP6h7Os9QB4Dde/S5Jzy3dK0l68vLuumFwrLmBAAD4HZTzGlDO0Zgdyi9xFfVtv3pEm8Ui9Y9prYvOiNCoM8IVGeRjYkoAMN87qw9qxv92SZIeuihBt57bweREAAD8Psp5DSjnaCpSj5RqyY4sfb0jUz8dLqj2Xp/oIF18vKhHBbcyJyAAmOSNHw5o5te7JUl3D++k6SM7m5wIAICTo5zXgHKOpiijoExLdmRp8Y5MJR46ql//be3ZPlAXnRGhi84IV2yIr3khAaCeGYahF5bv10sr9kuSbj+vg+6/sIssFovJyQAAODnKeQ0o52jqsm3lWrrz2KXvGw4ekfNXf3O7RQTokp4RGt0zUtFtOKMOoPkwDENPfrlbb68+KEm678Iu+suwjianAgDg1FDOa0A5R3OSV2zXNzuztXhHptYk58vxq6bes32gLu0ZoUt6Rqod96gDaMIcTkMPH3+OuSTNuKy7Jg2JNTcUAAC1QDmvAeUczdWRkgp9szNLX27L1JrkvGpn1PtGB+nSnpG6pGeEwpj1HUATUlHl1D0fbdFX2zLlZpGeGdtTV/ePMjsWAAC1QjmvAeUcLUFesV2Ld2Tpy60Z2pByxHWPusUiDYgN1uieERp1RoRC/XmOOoDGq7zSoTve26xv9+TIw2rRv8b10cU9IsyOBQBArVHOa0A5R0uTbSvX19sz9eW2TG06dNS13M0iDekQoqv6tdeoM8Ll7WE1MSUAVFdsr9JNczdq3YEj8nJ30+s39NOwLm3NjgUAwGmhnNeAco6WLL2gTF9vy9SX2zK09VfPUff3dtflvSN1Tf8o9WgXyMzHAExVUFqhSe9s1NbUAvl5ueutSf01KL6N2bEAADhtlPMaUM6BYw7nl+rTn9L0cWKa0gvKXMsTwv11df8oXdGnnYJ9PU1MCKAlyikq18S3NmhPVpGCWnlo3o0D1bN9kNmxAAD4UyjnNaCcA9U5nYbWHsjXR4mpWrwjSxVVTkmSh9Wikd3CdHX/KJ3TKVRWN86mA6hf6QVluv7N9TqYV6JQfy8tmDpIXcL9zY4FAMCfRjmvAeUc+H2FpZX6Ymu6PkpM0/b0Xy57Dw/w1th+7XR1vyjFhviamBBAc3Ugt1jXv7leGYXlahfko/duGsTnDQCg2aCc14ByDpyaXRk2fbwpVZ//lK6jpZWu5YPignVN/yhd3CNCPp5MIgfgz9ubVaQJb65XXrFd8SG+WnDTIEUG+ZgdCwCAOkM5rwHlHKgde5VDK3bnaOHGVP2wP9f1WDY/L3eN7hWpawdEqVd7JpEDcHp2pBfqhrfW62hppbpGBGj+1IEK8eMxjwCA5oVyXgPKOXD6MgrK9MmmNH20KVWpR36ZRK5zmJ+uOT6JXBt+qAZwin46fFQT396govIq9WofqLk3DlRQKyaiBAA0P5TzGlDOgT/P6TS07mC+Pk5M09fbM2X/1SRywxPCdO2AKJ3dKUTuVjeTkwJorDYcPKIp72xQSYVD/WNa650pA+Tv7WF2LAAA6gXlvAaUc6BuFZZV6n9bM/RRYqq2pVWfRG78wGiNHxSltv7eJiYE0Nis2p+nm+clqqzSocHxbfTmpP7y9XI3OxYAAPWGcl4DyjlQf3Zn2vRRYvVJ5DysFl10RoQmDYlR3+jW3JsOtHDf7snWbQs2q6LKqXM7h+o/N/STtweTSwIAmjfKeQ0o50D9s1c5tGRHluatPaRNh466lnePDNCkwbG6rHckP4wDLdCSHVm664PNqnQYGtktTK9c10de7nwWAACaP8p5DSjnQMPakV6ouWtStGhrhiqO35se1MpD1/aP0vVnxigquJXJCQE0hEVb0jX9o61yOA1d0jNCL17bWx7MSwEAaCEo5zWgnAPmOFpSoYWJqZq/9pDSC47N9G6xSMMT2mrSkFid1SFEbm5c8g40Rx8npur+T7bJMKQr+7bTc1f1kpW/7wCAFqQ2PbTOf3XtcDj06KOPKi4uTj4+PurQoYOefPJJ/fp3AJMnT5bFYqn2GjVq1B/u+9VXX1VsbKy8vb01aNAgbdiwoa7jA6hjrX09ddu5HfTD/cP0xsT+OrtTiAxDWr47Rze8tUEjXlipuWtSVGyvMjsqgDq0YN0h3fffY8V8/MBo/ZNiDgDASdX5FKnPPPOMXnvtNc2dO1fdu3dXYmKipkyZosDAQN19992u9UaNGqV33nnH9bWX18mfkbxw4UJNnz5dr7/+ugYNGqQXX3xRF154ofbu3au2bdvW9WEAqGNWN4tGdgvTyG5hSs4t1vy1h/TfTWk6kFuix7/YqeeW7tVV/dpr4uAYxYf6mR0XwGkyDENzfjigWYv3SJImD4nV46O7MSkkAAB/oM4va7/00ksVFhamt956y7Vs7Nix8vHx0YIFCyQdO3NeUFCgzz///JT3O2jQIA0YMECvvPKKJMnpdCoqKkp33XWXHnzwwT/cnsvagcan2F6lTzenae6aFCXnlriWn9s5VJOHxOrczqFc8g40IaUVVXrwk+36YmuGJOm2czvogVFdKOYAgBbL1MvahwwZohUrVmjfvn2SpK1bt2rVqlW66KKLqq33/fffq23bturSpYtuv/125efn/+4+KyoqtGnTJo0YMeKX4G5uGjFihNauXVvjNna7XTabrdoLQOPi5+WuiYNjtXz6uZo/daCGJ7SVxSKt3JerKe9u1PnPf6+3Vx2UrbzS7KgA/kBKXomu/PcafbE1Q+5uFj12aTeKOQAAtVDnl7U/+OCDstlsSkhIkNVqlcPh0MyZMzVhwgTXOqNGjdKVV16puLg4JScn6+GHH9ZFF12ktWvXymo98dEqeXl5cjgcCgsLq7Y8LCxMe/bsqTHHrFmzNGPGjLo9OAD1wmKx6OxOoTq7U6gO5Zdo/tpDWpiYqpT8Uv39y116/pu9urJve00aEqOObf3NjgvgN1bszta0hVtUVF6lED8v/XtCXw2MCzY7FgAATUqdX9b+4Ycf6r777tNzzz2n7t27a8uWLZo2bZpmz56tSZMm1bjNgQMH1KFDBy1fvlzDhw8/4f2MjAy1a9dOa9as0eDBg13L77//fq1cuVLr168/YRu73S673e762mazKSoqisvagSaixF6lz35K19w1KdqfU+xafnanEN18drzO7hTCGTnAZE6noRdX7NdLK/ZLkvpGB+m16/spLMDb5GQAADQOtbmsvc7PnN9333168MEHNW7cOElSjx49dOjQIc2aNet3y3l8fLxCQkKUlJRUYzkPCQmR1WpVdnZ2teXZ2dkKDw+vcZ9eXl5/OMkcgMbL18td158ZowmDorU2OV/vrEnRit3Z+nF/nn7cn6eEcH/ddHa8LusVKU93npkMNLTC0kpNW/iTvtubK0maODhGj1zSjb+PAACcpjr/F7S0tFRubtV3a7Va5XQ6f3ebtLQ05efnKyIiosb3PT091a9fP61YscK1zOl0asWKFdXOpANofiwWi4Z0DNEbE/tr5X3DNOWsWLXytGpPVpHu/Xirhj7zrf79fZIKS7kvHWgouzJsGv3KKn23N1de7m56/upe+vvlZ1DMAQD4E+r8X9HRo0dr5syZ+uqrr5SSkqLPPvtMs2fP1hVXXCFJKi4u1n333ad169YpJSVFK1as0OWXX66OHTvqwgsvdO1n+PDhrpnZJWn69Ol64403NHfuXO3evVu33367SkpKNGXKlLo+BACNVFRwKz0+urvWPjhcD4xKUFiAl3KK7Hp2yV4NfnqFnvhipw7nl5odE2jWPv8pXVe+tlqHj5SqfWsffXL7EI3t197sWAAANHl1fln7yy+/rEcffVR33HGHcnJyFBkZqVtvvVWPPfaYpGNn0bdt26a5c+eqoKBAkZGRuuCCC/Tkk09Wuww9OTlZeXl5rq+vvfZa5ebm6rHHHlNWVpZ69+6tJUuWnDBJHIDmL7CVh24/r4OmDo3T/7Zm6I0fD2hPVpHeXZOieWtTNOqMcN10drz6Rrc2OyrQbFQ6nJr51W69uyZFknRO51C9NK63glp5mhsMAIBmos4nhGuseM450HwZhqHVSfma8+MB/bAv17W8X0xr3TQ0Thd0D5eV56UDpy3HVq6/vL9ZG1OOSpLuOr+jpo3ozN8rAAD+QG16KOUcQLOyN6tIb/54QJ9vSVel49jHW/vWPppyVpyu6d9e/t4eJicEmpalO7P08KfblV9SIX8vd82+trdGduOqNQAATgXlvAaUc6BlybGVa97aQ3pv/SEdPT5ZnJ+Xu64dEKXJQ2IVFdzK5IRA41ZUXqm//2+XPt6UJklKCPfXvyf0VXyon8nJAABoOijnNaCcAy1TWYVDn/2UrrdWHVBybokkyc0iXdg9XFOHxqlfTGuelw78xvoD+frbx1uVdrRMFot06zkddM/ITvJyt5odDQCAJoVyXgPKOdCyOZ2GVu7P1durDurH/b9MNtmrfaBuHBqni3tEyMPKY6DQstmrHJr9zT7N+fGADOPYLSGzr+mtgXHBZkcDAKBJopzXgHIO4Gd7s4r09qqD+mxLuiqqnJKkiEBvTRwcq+sGRiuwFfelo+XZnWnTPQu3aE9WkSTpmv7t9eil3ZinAQCAP4FyXgPKOYDfyiu26711hzV/XYryiiskSa08rbq6X3tNOStOsSG+JicE6p/DaejNHw/o+W/2qcLhVBtfT826socu6B5udjQAAJo8ynkNKOcAfk95pUNfbM3Q26sOus4aWizSiK5hmjo0ToPigrkvHc1S6pFS/e2jrdqQckTSsTH/9NgeCvHzMjkZAADNA+W8BpRzAH/EMAytSc7Xmz8e0Hd7f3le+hntAjR1aJwu6REpT3fuS0fTZxiGPt6Upr//b5eK7VXy9bTqsdHddE3/KH4RBQBAHaKc14ByDqA2knKK9fbqg/p0c5rKK4/dlx4W4KWJg2M1YVC0glp5mpwQOD2pR0r1+Bc79e2eHElS/5jWmn1Nb0W34fGCAADUNcp5DSjnAE7HkZIKvb/+kOauPaTcIrskycfDqrH92unGs+J45jOajIoqp9748YBe/na/yiud8rBadM/Izrr1nA6yunG2HACA+kA5rwHlHMCfYa9y6MutmXpr1UHtyrS5lo/sFqZbz4lX/1geNYXGa21yvh5dtENJOcWSpDPjg/XUmDPUsa2/yckAAGjeKOc1oJwDqAuGYWjdgSN6a9UBLd+d41reNzpIt5zTQSO7hXEWEo1GXrFd//hqtz79KV2SFOLnqf+7pKvG9G7HveUAADQAynkNKOcA6lpSTrHe/PGAPt2crgrHsfvS40J8ddPZcRrbt728PawmJ0RL5XQaen/DYT27ZI9s5VWyWKQJg6J13wUJCmzFc8sBAGgolPMaUM4B1JeconLNXZOi+WsPyVZeJenYGcpJg2N1/Zkxau3L5HFoODvSC/V/n+/Q1tQCSVL3yADNvKKHekcFmZoLAICWiHJeA8o5gPpWYq/Swo2pemvVQaUXlEk6NnnctQOiNHVonKKCmQ0b9aeovFLPf7NP89amyGlIfl7u+tsFnXXDmTFyt/IIQAAAzEA5rwHlHEBDqXI49dX2TM354YB2ZhybPM7NIl10RoQmDYnVgNjW3O+LOlNe6dBHial65dsk5Rx/osClPSP06KXdFBbgbXI6AABaNsp5DSjnABqaYRhanZSv//yQrB/357mWJ4T7a9KQWF3eO1KtPN1NTIimrLzSoQ82HNbrK5OVbTtWyuNCfPX3y7vr7E6hJqcDAAAS5bxGlHMAZtqdadO8tYf02U9pKq88NnlcgLe7rukfpRsGxyimja/JCdFUlFU49P7xUp57/Ex5RKC37jivg64ZECUvdyYiBACgsaCc14ByDqAxKCyt1MebUjV/3SEdyi+VJFks0nmdQzVxSKzO7RQqNx7FhhqUVlTpvXWH9Z8fDiiv+FgpbxfkozuGddBV/dpTygEAaIQo5zWgnANoTJxOQyv352remhR9tzfXtTymTSvdcGaMru4XxSOvIOnYRIML1h3SnB8OKL+kQpLUvrWP7hzWUVf2bS9PdyZ7AwCgsaKc14ByDqCxSskr0YJ1h/RRYqrrUWw+HlZd1itS4wZGqXdUEBPItUDF9irNW5uiN388qCPHS3l0cCvdOayjrujbTh7MwA4AQKNHOa8B5RxAY1daUaVFWzI0d02K9mQVuZZ3DvPTtQOidUWfdgrmmenNkmEYOnykVNvSCrUjvVDb0gq1Pb1QxfZjv6yJbdNKd57fSZf3jqSUAwDQhFDOa0A5B9BUGIahjSlH9eHGw/p6e6ZrAjlPq5tGdg/TuAFROqtDCPemN1GGYSj1SJm2pxdqW3qBdqQXantaoeuqiV+LD/HVned31GW9InlWOQAATRDlvAaUcwBNUWFZpb7YmqGFGw9rR7rNtbx9ax9d0z9KV/Vrr8ggHxMT4mQMw1Da0WNFfPvxEr49vVCFZZUnrOtpdVPXCH/1aB+oHu0CdUa7QCWEB8jKL2EAAGiyKOc1oJwDaOp2pBfqo8RUffZTuoqOn2V1s0jndA7Vtf2jNCyhrbw9mLHbLIZhKL2gzFXAf34VlNZcxBMi/NWj3S9FvHOYP5O7AQDQzFDOa0A5B9BclFc6tHhHphZuTNW6A0dcy1t5WnVOp1CN7Bam8xPaqjX3p9er/GK7NqYc1fb0Am1Pt2l7WoGO1lDEPawWJYQH6Ix2gep5/Kw4RRwAgJaBcl4DyjmA5uhgXok+SkzV5z+lK7Ow3LXc6mbRgNjWuqBbuEZ2C1NUcCsTUzYPhmFod2aRvt2TrW/35Oin1AL99l9QD6tFXcJ/PiMedKyIh/vxDHIAAFooynkNKOcAmjPDMLQj3aZlu7L0za7sarO9S1JCuL8u6B6uC7qFqXtkAI9mO0XllQ6tSc7Tit05+nZPTrVfgEjH/r/2jgpynRXvEu5PEQcAAC6mlnOHw6EnnnhCCxYsUFZWliIjIzV58mQ98sgjslgsqqys1COPPKKvv/5aBw4cUGBgoEaMGKGnn35akZGRv7vfJ554QjNmzKi2rEuXLtqzZ88p5aKcA2hJDueXatnubH2zM0sbU47I+atP+shAb43oFqZBcW3UP7a1wgK8zQvaCGUWlunbPTn6dneOVifnuWbLlyRvDzcN7Riq4V3baliXtgoP5P8dAAD4fbXpoe51/c2feeYZvfbaa5o7d666d++uxMRETZkyRYGBgbr77rtVWlqqzZs369FHH1WvXr109OhR/fWvf9Vll12mxMTEk+67e/fuWr58+S/h3es8PgA0C9FtWmnq0DhNHRqnoyUV+nZPjr7ZlaUf9uUpo7Bc89Ye0ry1hyRJ7YJ81C+mtfrHtlbf6NZKCPdvMY/tMgxDh/JLtTWtQFtTC7X2QL52Z9qqrdMuyEfnJ7TV+V3banB8GybdAwAA9aLOz5xfeumlCgsL01tvveVaNnbsWPn4+GjBggU1brNx40YNHDhQhw4dUnR0dI3rPPHEE/r888+1ZcuW08rFmXMAOHaZ9qr9eVq5L1ebDh3VnixbtbPqkuTraVXv6CD1i26tvjGt1Se6tQJ9PMwJXMdyisq1NbVQ29IKtCW1QNvSTnysmZtF6hvdWud3bavzE9qqS5g/twEAAIDTYuqZ8yFDhmjOnDnat2+fOnfurK1bt2rVqlWaPXv2725TWFgoi8WioKCgk+57//79ioyMlLe3twYPHqxZs2b9bpm32+2y2+2ur202W43rAUBL4u1h1YhuYRrRLUySVGyv0pbDBdp06Kg2HT6qnw4dVZG9SquT8rU6KV+SZLFIHUP91DnMX/GhvooP9VWHUD/Fh/rJz6txXsFUXulQZmG50o6Wake6TVtTC7Q1reCEe8YlydPdTd0jA9SrfZD6RAfp7E6hCmamewAA0MDq/My50+nUww8/rGeffVZWq1UOh0MzZ87UQw89VOP65eXlOuuss5SQkKD33nvvd/e7ePFiFRcXq0uXLsrMzNSMGTOUnp6uHTt2yN/f/4T1a7pHXRJnzgHgJBxOQ/tzio6V9UNHtfnQUaXkl/7u+m39vY4XdV/Fh/qpQ6ivooJbyd/bXX5e7vLxsNb5WWeH01BesV3pBWXKKChTZkG50gvKlFlYpoyCcmUUlCm/pKLGbd0sUqe2/uoVFaie7YPUOyqIx5oBAIB6Y+qEcB9++KHuu+8+Pffcc+revbu2bNmiadOmafbs2Zo0aVK1dSsrKzV27FilpaXp+++/r1VpLigoUExMjGbPnq2pU6ee8H5NZ86joqIo5wBQS7lFdm1PL9CB3BIl55YoObdYB3JLlFds/8Nt3SySn9exou53vLD7erm7yruvl7s8rW6yVzmPvSodx/98/L+Vv/pzlVNlFQ7lFdtV9dtr8WvQytOqiEBvJUQEqFf7QPVqf2xWdd9GerYfAAA0P6Ze1n7ffffpwQcf1Lhx4yRJPXr00KFDhzRr1qxq5byyslLXXHONDh06pG+//bbWhTkoKEidO3dWUlJSje97eXnJy8vr9A8EACBJCvX30vkJYTo/ofrywrJKHcwrUXJOsQ7kFR8v78XKLChXcUWVDENyGpKtvEq28iqpsO4yWd0sCg/wVmSQtyICfRQZ5KN2v/pzZJC3An08uFccAAA0GXVezktLS+XmVv3yQKvVKqfzl0fR/FzM9+/fr++++05t2rSp9fcpLi5WcnKybrjhhj+dGQBQe4E+HuoddezS8N8yDEOlFQ4V26uOvcqrav6zvUqVVU55ebjJ290qLw83eblb5eXu5vqz96+XuVsV4u+ptv7esrpRvAEAQPNR5+V89OjRmjlzpqKjo9W9e3f99NNPmj17tm688UZJx4r5VVddpc2bN+vLL7+Uw+FQVlaWJCk4OFienscm4Rk+fLiuuOIK3XnnnZKke++9V6NHj1ZMTIwyMjL0+OOPy2q1avz48XV9CACAP8liscj3+GXrYWaHAQAAaALqvJy//PLLevTRR3XHHXcoJydHkZGRuvXWW/XYY49JktLT0/XFF19Iknr37l1t2++++07nnXeeJCk5OVl5eXmu99LS0jR+/Hjl5+crNDRUQ4cO1bp16xQaGlrXhwAAAAAAQIOq8wnhGiuecw4AAAAAaEi16aE8OwYAAAAAAJNRzgEAAAAAMBnlHAAAAAAAk1HOAQAAAAAwGeUcAAAAAACTUc4BAAAAADAZ5RwAAAAAAJNRzgEAAAAAMBnlHAAAAAAAk1HOAQAAAAAwmbvZARqKYRiSJJvNZnISAAAAAEBL8HP//LmPnkyLKedFRUWSpKioKJOTAAAAAABakqKiIgUGBp50HYtxKhW+GXA6ncrIyJC/v78sFovZcX6XzWZTVFSUUlNTFRAQYHYcNAGMGdQWYwa1xZhBbTFmUFuMGdRWUxkzhmGoqKhIkZGRcnM7+V3lLebMuZubm9q3b292jFMWEBDQqAcZGh/GDGqLMYPaYsygthgzqC3GDGqrKYyZPzpj/jMmhAMAAAAAwGSUcwAAAAAATEY5b2S8vLz0+OOPy8vLy+woaCIYM6gtxgxqizGD2mLMoLYYM6it5jhmWsyEcAAAAAAANFacOQcAAAAAwGSUcwAAAAAATEY5BwAAAADAZJRzAAAAAABMRjlvYMy/BwAAAAD4Lcp5AyoqKqr2NUUdf6SsrMzsCGjC+IzBqaiqqjI7ApqY4uJisyOgiTl06JDS0tIkSQ6Hw+Q0aAp27NihH3/80ewYDY5y3gAqKyt122236eKLL9ZVV12lefPmSZIsFovJydBYVVZW6vbbb9eVV16piRMnat26dRQt/KHKykr985//1GeffSaJzxicXEVFhe6//37dcsstmj59ug4cOGB2JDRyFRUVuuuuuzRmzBhdeeWVWrhwIf824Q8tWrRIcXFxuvPOOyVJVqvV5ERozCoqKnTTTTepZ8+e+vbbb82O0+Ao5/XswIEDGjBggPbs2aP7779fgYGBevrpp3XbbbeZHQ2NVFZWlgYNGqRt27Zp9OjR2rZtm2677TY999xzkiSn02lyQjRGixcvVq9evXT//ffrk08+UUZGhiTOnqNmH3/8seLi4pSYmKj27dtr4cKFuu2227RmzRqzo6GRmj9/vmJjY7Vjxw5NmjRJRUVF+te//qWlS5eaHQ2N3IYNGzRo0CClpqbqk08+kcTZc9TslVdeUXBwsHbv3q2ffvpJjz/+uNmRGhzlvJ4tXrxYrVu31tdff63Ro0frrbfe0t133605c+bo008/pWjhBKtXr1ZFRYU++ugj3XHHHVq5cqWuuOIKPf7449q5c6fc3NwoXKimpKREn332mUaOHKl//OMf2rt3rxYtWiSJs+c40ZYtW/TOO+/orrvu0rfffqu///3vWr9+vZKSkpSSkmJ2PDRC+/bt0xdffKH7779f3333nW644Qa99dZbOnDggNzd3c2Oh0bq559xCwsLNWDAAPXp00f/+te/VFlZKavVys8yqGbv3r26//77dckll2j16tXq1auXkpOTlZeXp4qKCrPjNRjKeT1LSkpSVVWVWrVqJcMwZLFYXB9G//jHP5Sfn29yQjQWP/8jlpubq6NHj6pdu3aSpMDAQN16660aOnSobr31VkkULlTXqlUrTZ48WXfccYcefPBBRUdHa/Hixdq2bZskrrZAdRUVFerWrZsmTpwo6djtEO3bt1fr1q21e/duk9OhMQoNDdV9992nyZMnu5bl5+erV69e8vPzk91uNy8cGq2fTyYkJSXp+uuv1xVXXKH8/Hy99tprko599gA/i42N1QMPPKBVq1Zpz549Gj9+vC655BINGTJEY8aM0fLly82O2CAo53Vow4YNkqr/IOzv7y9vb299/fXXrkK1evVqzZgxQzt27NCSJUtO2AYtx3//+18tX75cmZmZcnM79tfRarUqPDy82iQY4eHhevDBB7Vx40YtW7ZMEpcrt2S/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T0+Tk6GxYszgdDBuUBuMF9QWYwa1xZhBbTFm6laLv+f8137+PcWqVavk5+fnGmAzZszQX//6V+Xk5JgZD40QYwang3GD2mC8oLYYM6gtxgxqizFTP9zNDtCYWCwWSdKGDRs0duxYLVu2TLfccotKS0s1f/58tW3b1uSEaGwYMzgdjBvUBuMFtcWYQW0xZlBbjJn6wWXtv1FeXq4ePXooOTlZnp6emjFjhh544AGzY6ERY8zgdDBuUBuMF9QWYwa1xZhBbTFm6h7lvAYjR45Up06dNHv2bHl7e5sdB00AYwang3GD2mC8oLYYM6gtxgxqizFTtyjnNXA4HLJarWbHQBPCmMHpYNygNhgvqC3GDGqLMYPaYszULco5AAAAAAAmY7Z2AAAAAABMRjkHAAAAAMBklHMAAAAAAExGOQcAAAAAwGSUcwAAAAAATEY5BwAAAADAZJRzAAAAAABMRjkHAKCFmDx5siwWiywWizw8PBQWFqaRI0fq7bffltPpPOX9vPvuuwoKCqq/oAAAtECUcwAAWpBRo0YpMzNTKSkpWrx4sYYNG6a//vWvuvTSS1VVVWV2PAAAWizKOQAALYiXl5fCw8PVrl079e3bVw8//LAWLVqkxYsX691335UkzZ49Wz169JCvr6+ioqJ0xx13qLi4WJL0/fffa8qUKSosLHSdhX/iiSckSXa7Xffee6/atWsnX19fDRo0SN9//705BwoAQBNDOQcAoIU7//zz1atXL3366aeSJDc3N7300kvauXOn5s6dq2+//Vb333+/JGnIkCF68cUXFRAQoMzMTGVmZuree++VJN15551au3atPvzwQ23btk1XX321Ro0apf3795t2bAAANBUWwzAMs0MAAID6N3nyZBUUFOjzzz8/4b1x48Zp27Zt2rVr1wnv/fe//9Vtt92mvLw8ScfuOZ82bZoKCgpc6xw+fFjx8fE6fPiwIiMjXctHjBihgQMH6h//+EedHw8AAM2Ju9kBAACA+QzDkMVikSQtX75cs2bN0p49e2Sz2VRVVaXy8nKVlpaqVatWNW6/fft2ORwOde7cudpyu92uNm3a1Ht+AACaOso5AADQ7t27FRcXp5SUFF166aW6/fbbNXPmTAUHB2vVqlWaOnWqKioqfrecFxcXy2q1atOmTbJardXe8/Pza4hDAACgSaOcAwDQwn377bfavn277rnnHm3atElOp1PPP/+83NyOTU3z0UcfVVvf09NTDoej2rI+ffrI4XAoJydHZ599doNlBwCguaCcAwDQgtjtdmVlZcnhcCg7O1tLlizRrFmzdOmll2rixInasWOHKisr9fLLL2v06NFavXq1Xn/99Wr7iI2NVXFxsVasWKFevXqpVatW6ty5syZMmKCJEyfq+eefV58+fZSbm6sVK1aoZ8+euuSSS0w6YgAAmgZmawcAoAVZsmSJIiIiFBsbq1GjRum7777TSy+9pEWLFslqtapXr16aPXu2nnnmGZ1xxhl67733NGvWrGr7GDJkiG677TZde+21Cg0N1bPPPitJeueddzRx4kT97W9/U5cuXTRmzBht3LhR0dHRZhwqAABNCrO1AwAAAABgMs6cAwAAAABgMso5AAAAAAAmo5wDAAAAAGAyyjkAAAAAACajnAMAAAAAYDLKOQAAAAAAJqOcAwAAAABgMso5AAAAAAAmo5wDAAAAAGAyyjkAAAAAACajnAMAAAAAYDLKOQAAAAAAJvt/pGngW+ZdFNwAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking for Stationarity using ADFuller test."
      ],
      "metadata": {
        "id": "sPwmvEYml5E6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#The p-value of the stationary test indicates that the data is not normal.\n",
        "#shapiro test is done on the data to test for normality earlier, it indicate the data is normal but ADF Test says its not stationary.\n",
        "#Transformation is done the data before the second differencing is done again"
      ],
      "metadata": {
        "id": "nEHtb159pwqq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import scipy\n",
        "from scipy.stats import boxcox\n",
        "\n",
        "# Create a copy of the DataFrame to avoid modifying the original\n",
        "dfTransactions_log = dfTransactions.copy()\n",
        "\n",
        "# Apply Box-Cox transformation and store the result in a new column\n",
        "dfTransactions_log['Loans_BoxCox'], lambda_bc = boxcox(dfTransactions_log['Loans'].dropna())  # Box-Cox requires positive values\n",
        "\n",
        "# Print the lambda value used in the Box-Cox transformation\n",
        "print(\"Box-Cox Lambda:\", lambda_bc)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YYkzVdGKSyRp",
        "outputId": "bd17c75a-597a-4034-b43b-83c6d8913fa3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Box-Cox Lambda: 0.05290526762775398\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2egFKEdLzp5n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the first few rows of the updated DataFrame\n",
        "print(dfTransactions_log.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ptTDpabr4f1P",
        "outputId": "67fad325-57ee-4d4f-e4e0-c55102aa8fcc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Loans  InflationRate  Loans_BoxCox\n",
            "Date                                           \n",
            "2019-01-01   81.21           0.03      4.950548\n",
            "2019-02-01   79.60          -0.01      4.925292\n",
            "2019-03-01  100.48           0.02      5.220753\n",
            "2019-04-01   97.65           0.06      5.184321\n",
            "2019-05-01   81.85           0.04      4.960456\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Vp7KQ9mczwjY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n",
        "from pandas.plotting import lag_plot # Import the lag_plot function from pandas.plotting\n",
        "lag_plot(dfTransactions_log['Loans_BoxCox'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "S4_avz0vvQzA",
        "outputId": "e6655610-650a-450a-8ac9-8911a5753e63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='y(t)', ylabel='y(t + 1)'>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot ACF and PACF for the transformed  data\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "plot_acf(dfTransactions_log['Loans_BoxCox'].dropna(), ax=plt.gca(), lags=20)\n",
        "plt.title('ACF of Transformed Loans')\n",
        "plt.subplot(1, 2, 2)\n",
        "plot_pacf(dfTransactions_log['Loans_BoxCox'].dropna(), ax=plt.gca(), lags=20)\n",
        "plt.title('PACF of Transformed Loans')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "TjK-u0rE1FPT",
        "outputId": "74c9c77b-a80e-421b-a1c8-ed2ba658d97e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8-vls28K1E9l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform ADF test on the log-transformed series\n",
        "Transactions_adf_result = adfuller(dfTransactions_log['Loans_BoxCox'])\n",
        "print(\"ADF Statistic (Log):\", Transactions_adf_result[0])\n",
        "print(\"p-value (Log):\", Transactions_adf_result[1])\n",
        "\n",
        "# Interpretation\n",
        "#if adf_result[1] <= 0.05:\n",
        "#    print(\"Reject the null hypothesis: The series is stationary.\")\n",
        "#else:\n",
        " #   print(\"Fail to reject the null hypothesis: The series is non-stationary.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jPkSNZXB1_xb",
        "outputId": "cffdf1ed-0db3-4224-dd94-8cdae0c59008"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADF Statistic (Log): -0.6349894444934001\n",
            "p-value (Log): 0.8628782516712462\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply first-order differencing\n",
        "dfTransactions_log['Loans_diff'] = dfTransactions_log['Loans_BoxCox'].diff().dropna()\n"
      ],
      "metadata": {
        "id": "33Rtm2xG5epv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(dfTransactions_log.head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zlpodfRG6Wci",
        "outputId": "c7189df1-1d2f-48ae-981b-809f4a540e9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Loans  InflationRate  Loans_BoxCox  Loans_diff\n",
            "Date                                                       \n",
            "2019-01-01   81.21           0.03      4.950548         NaN\n",
            "2019-02-01   79.60          -0.01      4.925292   -0.025255\n",
            "2019-03-01  100.48           0.02      5.220753    0.295461\n",
            "2019-04-01   97.65           0.06      5.184321   -0.036432\n",
            "2019-05-01   81.85           0.04      4.960456   -0.223865\n",
            "2019-06-01   90.49           0.02      5.087479    0.127023\n",
            "2019-07-01   90.02           0.10      5.080871   -0.006608\n",
            "2019-08-01   77.78           0.01      4.896153   -0.184718\n",
            "2019-09-01   98.06           0.05      5.189660    0.293507\n",
            "2019-10-01   89.36           0.01      5.071536   -0.118124\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gliFwnen0ldA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Perform ADF test on the log-transformed series\n",
        "Transactions_adf_result = adfuller(dfTransactions_log['Loans_diff'].dropna())\n",
        "print(\"ADF Statistic (Log):\", Transactions_adf_result[0])\n",
        "print(\"p-value (Log):\", Transactions_adf_result[1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pcm_wIruCANY",
        "outputId": "fb272caa-8bad-433d-b885-acd4cd97d33e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADF Statistic (Log): -8.724977924970792\n",
            "p-value (Log): 3.3073098435971895e-14\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#p-value is less than 0.05 from the second differencing, it implies the data is stationary."
      ],
      "metadata": {
        "id": "qbmQ52sM2w0K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "pojDdvtT0uFw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#drop nan values\n",
        "dfTransactions_log.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "DEi5705caU84"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tQxbesvB05dS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_log.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "d-QKOWQMakN5",
        "outputId": "3ab52429-5940-452c-8dcb-1b45997f8d47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff\n",
              "Date                                                       \n",
              "2019-02-01   79.60          -0.01      4.925292   -0.025255\n",
              "2019-03-01  100.48           0.02      5.220753    0.295461\n",
              "2019-04-01   97.65           0.06      5.184321   -0.036432\n",
              "2019-05-01   81.85           0.04      4.960456   -0.223865\n",
              "2019-06-01   90.49           0.02      5.087479    0.127023"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70cded4d-b845-4e32-87aa-2b65a88181b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-02-01</th>\n",
              "      <td>79.60</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>4.925292</td>\n",
              "      <td>-0.025255</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.220753</td>\n",
              "      <td>0.295461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.184321</td>\n",
              "      <td>-0.036432</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "      <td>0.04</td>\n",
              "      <td>4.960456</td>\n",
              "      <td>-0.223865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>90.49</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.087479</td>\n",
              "      <td>0.127023</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70cded4d-b845-4e32-87aa-2b65a88181b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70cded4d-b845-4e32-87aa-2b65a88181b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70cded4d-b845-4e32-87aa-2b65a88181b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4ca7aebe-641b-4dc3-9f09-cb8397871062\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ca7aebe-641b-4dc3-9f09-cb8397871062')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4ca7aebe-641b-4dc3-9f09-cb8397871062 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfTransactions_log",
              "summary": "{\n  \"name\": \"dfTransactions_log\",\n  \"rows\": 71,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-02-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 71,\n        \"samples\": [\n          \"2020-12-01 00:00:00\",\n          \"2019-02-01 00:00:00\",\n          \"2023-04-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.366683716001257,\n        \"min\": 70.46,\n        \"max\": 115.09,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          70.92,\n          79.6,\n          97.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04563788887983811,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          -0.01,\n          0.02,\n          0.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14464051039467343,\n        \"min\": 4.772036523771188,\n        \"max\": 5.394628996306013,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          4.780188108405979,\n          4.92529236586556,\n          5.179745650197719\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13193840040195548,\n        \"min\": -0.23919454760586234,\n        \"max\": 0.34070478630456336,\n        \"num_unique_values\": 71,\n        \"samples\": [\n          -0.07031515677927036,\n          -0.02525548481397344,\n          -0.025384055011080875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rGKcTgUd1CVs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Testing for stationarity on the External variable(InflationRate)"
      ],
      "metadata": {
        "id": "ZQx6PJ6E43l3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform ADF test on the 'Loans' column\n",
        "adf_result = adfuller(dfTransactions_log['InflationRate'])\n",
        "\n",
        "# Print the results\n",
        "print(\"ADF Statistic:\", adf_result[0])\n",
        "print(\"p-value:\", adf_result[1])\n",
        "print(\"Critical Values:\", adf_result[4])\n",
        "\n",
        "# Interpretation\n",
        "if adf_result[1] <= 0.05:\n",
        "    print(\"Reject the null hypothesis: The series is stationary.\")\n",
        "else:\n",
        "    print(\"Fail to reject the null hypothesis: The series is non-stationary.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wWJCOLwL40Bi",
        "outputId": "46711feb-a12a-4c38-f97b-7c76c8edf991"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADF Statistic: -1.9555876155466207\n",
            "p-value: 0.3063792359304677\n",
            "Critical Values: {'1%': np.float64(-3.5463945337644063), '5%': np.float64(-2.911939409384601), '10%': np.float64(-2.5936515282964665)}\n",
            "Fail to reject the null hypothesis: The series is non-stationary.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9qPXnjiJ1VMu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply first-order differencing\n",
        "dfTransactions_log['InflationRate_diff'] = dfTransactions_log['InflationRate'].diff().dropna()\n",
        "\n",
        "print(dfTransactions_log.head(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GfM9WlaM5pMC",
        "outputId": "d1c02480-26e2-4ac3-fd68-5f1b9ac4acb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
            "Date                                                          \n",
            "2019-02-01   79.60          -0.01      4.925292   -0.025255   \n",
            "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
            "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
            "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
            "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
            "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
            "2019-08-01   77.78           0.01      4.896153   -0.184718   \n",
            "2019-09-01   98.06           0.05      5.189660    0.293507   \n",
            "2019-10-01   89.36           0.01      5.071536   -0.118124   \n",
            "2019-11-01   80.23           0.00      4.935232   -0.136304   \n",
            "\n",
            "            InflationRate_diff  \n",
            "Date                            \n",
            "2019-02-01                 NaN  \n",
            "2019-03-01                0.03  \n",
            "2019-04-01                0.04  \n",
            "2019-05-01               -0.02  \n",
            "2019-06-01               -0.02  \n",
            "2019-07-01                0.08  \n",
            "2019-08-01               -0.09  \n",
            "2019-09-01                0.04  \n",
            "2019-10-01               -0.04  \n",
            "2019-11-01               -0.01  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform ADF test on the diff series, but handle NaN values\n",
        "Transactions_adf_result = adfuller(dfTransactions_log['InflationRate_diff'].dropna())  # Drop NaN values before the test\n",
        "print(\"ADF Statistic (Log):\", Transactions_adf_result[0])\n",
        "print(\"p-value (Log):\", Transactions_adf_result[1])\n",
        "\n",
        "# Interpretation\n",
        "#if Transactions_adf_result[1] <= 0.05:  # Use the correct variable for the result\n",
        " #   print(\"Reject the null hypothesis: The series is stationary.\")\n",
        "#else:\n",
        " #   print(\"Fail to reject the null hypothesis: The series is non-stationary.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOfqdiZZ-vQJ",
        "outputId": "e6bad176-bf9b-4687-ec43-c0a20bbb62ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ADF Statistic (Log): -5.953010208554414\n",
            "p-value (Log): 2.1251801380272705e-07\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The InflationRate column data is stationary with p-value less than 0.05"
      ],
      "metadata": {
        "id": "BHHUjBWS_H8D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kdJhFyiL1iLN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(dfTransactions_log.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vOqDFYOn_Wlw",
        "outputId": "918f633d-978b-4306-94c0-ef765253dc47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
            "Date                                                          \n",
            "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
            "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
            "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
            "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
            "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
            "\n",
            "            InflationRate_diff  \n",
            "Date                            \n",
            "2019-03-01                0.03  \n",
            "2019-04-01                0.04  \n",
            "2019-05-01               -0.02  \n",
            "2019-06-01               -0.02  \n",
            "2019-07-01                0.08  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qFkufh5Z1zAy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_log.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "iMazrSfrAC8J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy = dfTransactions_log.copy()"
      ],
      "metadata": {
        "id": "AM7NZbYydfoX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "8aTvSt4FeTEa",
        "outputId": "ee2e2ce2-8750-472a-e027-f98a9664c262"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
              "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
              "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
              "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
              "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
              "\n",
              "            InflationRate_diff  \n",
              "Date                            \n",
              "2019-03-01                0.03  \n",
              "2019-04-01                0.04  \n",
              "2019-05-01               -0.02  \n",
              "2019-06-01               -0.02  \n",
              "2019-07-01                0.08  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aa8e8a8c-2722-4565-817c-3cda872e09e6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.220753</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.184321</td>\n",
              "      <td>-0.036432</td>\n",
              "      <td>0.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "      <td>0.04</td>\n",
              "      <td>4.960456</td>\n",
              "      <td>-0.223865</td>\n",
              "      <td>-0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>90.49</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.087479</td>\n",
              "      <td>0.127023</td>\n",
              "      <td>-0.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>90.02</td>\n",
              "      <td>0.10</td>\n",
              "      <td>5.080871</td>\n",
              "      <td>-0.006608</td>\n",
              "      <td>0.08</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa8e8a8c-2722-4565-817c-3cda872e09e6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aa8e8a8c-2722-4565-817c-3cda872e09e6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aa8e8a8c-2722-4565-817c-3cda872e09e6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-a7e12f3b-c928-46ff-8cf7-387f3c8d62e6\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7e12f3b-c928-46ff-8cf7-387f3c8d62e6')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-a7e12f3b-c928-46ff-8cf7-387f3c8d62e6 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfTransactions_copy",
              "summary": "{\n  \"name\": \"dfTransactions_copy\",\n  \"rows\": 70,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 70,\n        \"samples\": [\n          \"2021-01-01 00:00:00\",\n          \"2019-03-01 00:00:00\",\n          \"2023-05-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.347477504393703,\n        \"min\": 70.46,\n        \"max\": 115.09,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          70.46,\n          100.48,\n          105.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04580655155795369,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.02,\n          0.06,\n          -0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14432989049853368,\n        \"min\": 4.772036523771188,\n        \"max\": 5.394628996306013,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          4.772036523771188,\n          5.220753153075026,\n          5.287652129650836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13284819709319712,\n        \"min\": -0.23919454760586234,\n        \"max\": 0.34070478630456336,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.08252638465286832,\n          0.2954607872094659,\n          -0.10790647945311704\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06504036014049254,\n        \"min\": -0.22,\n        \"max\": 0.21,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.21,\n          0.05,\n          0.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8QirfDGg18Lh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Analyzing Correlation"
      ],
      "metadata": {
        "id": "rzrbdIcVCYSF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf"
      ],
      "metadata": {
        "id": "MvNR-MwICudy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pandas.plotting import lag_plot # Import the lag_plot function from pandas.plotting\n",
        "lag_plot(dfTransactions_copy['Loans_diff'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "ZiL1hexmDi3h",
        "outputId": "0ec3006d-ae9d-4b81-d5c8-a85755f6363c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='y(t)', ylabel='y(t + 1)'>"
            ]
          },
          "metadata": {},
          "execution_count": 80
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot ACF and PACF before differencing the data\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "plot_acf(dfTransactions_copy['Loans_diff'].dropna(), ax=plt.gca(), lags=20)\n",
        "plt.title('ACF of Differenced Loans')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plot_pacf(dfTransactions_copy['Loans_diff'].dropna(), ax=plt.gca(), lags=20)\n",
        "plt.title('PACF of Differenced Loans')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "jBPeDkOgI26w",
        "outputId": "928a990d-d6a5-4a0f-872e-c926ff9b121a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Test for Granger causality\n",
        "from statsmodels.tsa.stattools import grangercausalitytests"
      ],
      "metadata": {
        "id": "l_XyV7nC4OPb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Default title text\n",
        "#Perform Granger Causality test to check if inflation rate Granger-causes average monthly transaction increase (or vice versa) using up to 5 lag values.\n",
        "grangercausalitytests(dfTransactions_copy[['Loans_diff','InflationRate_diff']], maxlag=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y93Gz2SWNhjB",
        "outputId": "a16fe517-edcd-49d9-fd6b-414c6035e297"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 1\n",
            "ssr based F test:         F=0.1906  , p=0.6638  , df_denom=66, df_num=1\n",
            "ssr based chi2 test:   chi2=0.1993  , p=0.6553  , df=1\n",
            "likelihood ratio test: chi2=0.1990  , p=0.6555  , df=1\n",
            "parameter F test:         F=0.1906  , p=0.6638  , df_denom=66, df_num=1\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 2\n",
            "ssr based F test:         F=0.0058  , p=0.9942  , df_denom=63, df_num=2\n",
            "ssr based chi2 test:   chi2=0.0125  , p=0.9938  , df=2\n",
            "likelihood ratio test: chi2=0.0125  , p=0.9938  , df=2\n",
            "parameter F test:         F=0.0058  , p=0.9942  , df_denom=63, df_num=2\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 3\n",
            "ssr based F test:         F=0.1184  , p=0.9490  , df_denom=60, df_num=3\n",
            "ssr based chi2 test:   chi2=0.3966  , p=0.9409  , df=3\n",
            "likelihood ratio test: chi2=0.3954  , p=0.9412  , df=3\n",
            "parameter F test:         F=0.1184  , p=0.9490  , df_denom=60, df_num=3\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 4\n",
            "ssr based F test:         F=0.7614  , p=0.5548  , df_denom=57, df_num=4\n",
            "ssr based chi2 test:   chi2=3.5264  , p=0.4739  , df=4\n",
            "likelihood ratio test: chi2=3.4354  , p=0.4878  , df=4\n",
            "parameter F test:         F=0.7614  , p=0.5548  , df_denom=57, df_num=4\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 5\n",
            "ssr based F test:         F=0.3929  , p=0.8516  , df_denom=54, df_num=5\n",
            "ssr based chi2 test:   chi2=2.3647  , p=0.7967  , df=5\n",
            "likelihood ratio test: chi2=2.3227  , p=0.8029  , df=5\n",
            "parameter F test:         F=0.3929  , p=0.8516  , df_denom=54, df_num=5\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 6\n",
            "ssr based F test:         F=1.1596  , p=0.3425  , df_denom=51, df_num=6\n",
            "ssr based chi2 test:   chi2=8.7309  , p=0.1893  , df=6\n",
            "likelihood ratio test: chi2=8.1845  , p=0.2249  , df=6\n",
            "parameter F test:         F=1.1596  , p=0.3425  , df_denom=51, df_num=6\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 7\n",
            "ssr based F test:         F=1.0452  , p=0.4129  , df_denom=48, df_num=7\n",
            "ssr based chi2 test:   chi2=9.6031  , p=0.2122  , df=7\n",
            "likelihood ratio test: chi2=8.9380  , p=0.2571  , df=7\n",
            "parameter F test:         F=1.0452  , p=0.4129  , df_denom=48, df_num=7\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 8\n",
            "ssr based F test:         F=1.9702  , p=0.0725  , df_denom=45, df_num=8\n",
            "ssr based chi2 test:   chi2=21.7164 , p=0.0055  , df=8\n",
            "likelihood ratio test: chi2=18.6187 , p=0.0170  , df=8\n",
            "parameter F test:         F=1.9702  , p=0.0725  , df_denom=45, df_num=8\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 9\n",
            "ssr based F test:         F=1.8035  , p=0.0962  , df_denom=42, df_num=9\n",
            "ssr based chi2 test:   chi2=23.5746 , p=0.0050  , df=9\n",
            "likelihood ratio test: chi2=19.9323 , p=0.0183  , df=9\n",
            "parameter F test:         F=1.8035  , p=0.0962  , df_denom=42, df_num=9\n",
            "\n",
            "Granger Causality\n",
            "number of lags (no zero) 10\n",
            "ssr based F test:         F=1.4385  , p=0.2002  , df_denom=39, df_num=10\n",
            "ssr based chi2 test:   chi2=22.1309 , p=0.0145  , df=10\n",
            "likelihood ratio test: chi2=18.8382 , p=0.0424  , df=10\n",
            "parameter F test:         F=1.4385  , p=0.2002  , df_denom=39, df_num=10\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{np.int64(1): ({'ssr_ftest': (np.float64(0.19063158525904247),\n",
              "    np.float64(0.6638165475348958),\n",
              "    np.float64(66.0),\n",
              "    np.int64(1)),\n",
              "   'ssr_chi2test': (np.float64(0.1992966573162717),\n",
              "    np.float64(0.6552891638858267),\n",
              "    np.int64(1)),\n",
              "   'lrtest': (np.float64(0.19900939035369447),\n",
              "    np.float64(0.6555216284703688),\n",
              "    np.int64(1)),\n",
              "   'params_ftest': (np.float64(0.19063158525905),\n",
              "    np.float64(0.6638165475348836),\n",
              "    np.float64(66.0),\n",
              "    1.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8bc49e7d0>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba8d67d0>,\n",
              "   array([[0., 1., 0.]])]),\n",
              " np.int64(2): ({'ssr_ftest': (np.float64(0.005780700171245789),\n",
              "    np.float64(0.994236503226161),\n",
              "    np.float64(63.0),\n",
              "    np.int64(2)),\n",
              "   'ssr_chi2test': (np.float64(0.012478971798244877),\n",
              "    np.float64(0.9937799392709972),\n",
              "    np.int64(2)),\n",
              "   'lrtest': (np.float64(0.012477826903534606),\n",
              "    np.float64(0.9937805081578578),\n",
              "    np.int64(2)),\n",
              "   'params_ftest': (np.float64(0.005780700171250802),\n",
              "    np.float64(0.9942365032261574),\n",
              "    np.float64(63.0),\n",
              "    2.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba774d10>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba792090>,\n",
              "   array([[0., 0., 1., 0., 0.],\n",
              "          [0., 0., 0., 1., 0.]])]),\n",
              " np.int64(3): ({'ssr_ftest': (np.float64(0.11839348326320231),\n",
              "    np.float64(0.9489622701003193),\n",
              "    np.float64(60.0),\n",
              "    np.int64(3)),\n",
              "   'ssr_chi2test': (np.float64(0.3966181689317278),\n",
              "    np.float64(0.940940212680561),\n",
              "    np.int64(3)),\n",
              "   'lrtest': (np.float64(0.39544885613270253),\n",
              "    np.float64(0.9411810418506061),\n",
              "    np.int64(3)),\n",
              "   'params_ftest': (np.float64(0.11839348326320477),\n",
              "    np.float64(0.948962270100318),\n",
              "    np.float64(60.0),\n",
              "    3.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba7f4810>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba972fd0>,\n",
              "   array([[0., 0., 0., 1., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 1., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 1., 0.]])]),\n",
              " np.int64(4): ({'ssr_ftest': (np.float64(0.7613823438627509),\n",
              "    np.float64(0.5547623490253506),\n",
              "    np.float64(57.0),\n",
              "    np.int64(4)),\n",
              "   'ssr_chi2test': (np.float64(3.5264024347327414),\n",
              "    np.float64(0.47387516905655747),\n",
              "    np.int64(4)),\n",
              "   'lrtest': (np.float64(3.435420750378057),\n",
              "    np.float64(0.48776545035012475),\n",
              "    np.int64(4)),\n",
              "   'params_ftest': (np.float64(0.7613823438627512),\n",
              "    np.float64(0.5547623490253506),\n",
              "    np.float64(57.0),\n",
              "    4.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba758e90>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba75a590>,\n",
              "   array([[0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 1., 0.]])]),\n",
              " np.int64(5): ({'ssr_ftest': (np.float64(0.39291178754655826),\n",
              "    np.float64(0.8515549082466672),\n",
              "    np.float64(54.0),\n",
              "    np.int64(5)),\n",
              "   'ssr_chi2test': (np.float64(2.3647468694931746),\n",
              "    np.float64(0.7967121734027398),\n",
              "    np.int64(5)),\n",
              "   'lrtest': (np.float64(2.322746901041967),\n",
              "    np.float64(0.8029202572886985),\n",
              "    np.int64(5)),\n",
              "   'params_ftest': (np.float64(0.3929117875465552),\n",
              "    np.float64(0.851554908246669),\n",
              "    np.float64(54.0),\n",
              "    5.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba647090>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba7e6090>,\n",
              "   array([[0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.]])]),\n",
              " np.int64(6): ({'ssr_ftest': (np.float64(1.1595676046838044),\n",
              "    np.float64(0.342463666342259),\n",
              "    np.float64(51.0),\n",
              "    np.int64(6)),\n",
              "   'ssr_chi2test': (np.float64(8.730861964678056),\n",
              "    np.float64(0.1892895201823872),\n",
              "    np.int64(6)),\n",
              "   'lrtest': (np.float64(8.184494227611992),\n",
              "    np.float64(0.22489605242371086),\n",
              "    np.int64(6)),\n",
              "   'params_ftest': (np.float64(1.159567604683802),\n",
              "    np.float64(0.3424636663422598),\n",
              "    np.float64(51.0),\n",
              "    6.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba657050>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba656a90>,\n",
              "   array([[0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.]])]),\n",
              " np.int64(7): ({'ssr_ftest': (np.float64(1.0452373308536482),\n",
              "    np.float64(0.41290860668539814),\n",
              "    np.float64(48.0),\n",
              "    np.int64(7)),\n",
              "   'ssr_chi2test': (np.float64(9.603117977217895),\n",
              "    np.float64(0.21220181778347316),\n",
              "    np.int64(7)),\n",
              "   'lrtest': (np.float64(8.938007937281213),\n",
              "    np.float64(0.25713753422889885),\n",
              "    np.int64(7)),\n",
              "   'params_ftest': (np.float64(1.04523733085365),\n",
              "    np.float64(0.41290860668539653),\n",
              "    np.float64(48.0),\n",
              "    7.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba65acd0>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba65a6d0>,\n",
              "   array([[0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.]])]),\n",
              " np.int64(8): ({'ssr_ftest': (np.float64(1.9702403876507257),\n",
              "    np.float64(0.07247019927406168),\n",
              "    np.float64(45.0),\n",
              "    np.int64(8)),\n",
              "   'ssr_chi2test': (np.float64(21.716427383883556),\n",
              "    np.float64(0.005469177348928898),\n",
              "    np.int64(8)),\n",
              "   'lrtest': (np.float64(18.61865197046461),\n",
              "    np.float64(0.01703765564021622),\n",
              "    np.int64(8)),\n",
              "   'params_ftest': (np.float64(1.970240387650727),\n",
              "    np.float64(0.0724701992740615),\n",
              "    np.float64(45.0),\n",
              "    8.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba658f10>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba658d10>,\n",
              "   array([[0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,\n",
              "           0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n",
              "           0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,\n",
              "           0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,\n",
              "           0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,\n",
              "           0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,\n",
              "           0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,\n",
              "           0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n",
              "           0.]])]),\n",
              " np.int64(9): ({'ssr_ftest': (np.float64(1.8035179912246564),\n",
              "    np.float64(0.09619118395248945),\n",
              "    np.float64(42.0),\n",
              "    np.int64(9)),\n",
              "   'ssr_chi2test': (np.float64(23.574556599579434),\n",
              "    np.float64(0.005027107235983932),\n",
              "    np.int64(9)),\n",
              "   'lrtest': (np.float64(19.9323360752349),\n",
              "    np.float64(0.01833460545825581),\n",
              "    np.int64(9)),\n",
              "   'params_ftest': (np.float64(1.8035179912246508),\n",
              "    np.float64(0.09619118395249064),\n",
              "    np.float64(42.0),\n",
              "    9.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba7a7b50>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba65b950>,\n",
              "   array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n",
              "           0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,\n",
              "           0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,\n",
              "           0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,\n",
              "           0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,\n",
              "           0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,\n",
              "           0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n",
              "           0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "           1., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "           0., 1., 0.]])]),\n",
              " np.int64(10): ({'ssr_ftest': (np.float64(1.4385061986465932),\n",
              "    np.float64(0.20017291680096375),\n",
              "    np.float64(39.0),\n",
              "    np.int64(10)),\n",
              "   'ssr_chi2test': (np.float64(22.13086459456297),\n",
              "    np.float64(0.01445163265652444),\n",
              "    np.int64(10)),\n",
              "   'lrtest': (np.float64(18.838159357280745),\n",
              "    np.float64(0.04236711298485165),\n",
              "    np.int64(10)),\n",
              "   'params_ftest': (np.float64(1.4385061986465943),\n",
              "    np.float64(0.20017291680096283),\n",
              "    np.float64(39.0),\n",
              "    10.0)},\n",
              "  [<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba660a10>,\n",
              "   <statsmodels.regression.linear_model.RegressionResultsWrapper at 0x78a8ba6605d0>,\n",
              "   array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,\n",
              "           0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,\n",
              "           0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,\n",
              "           0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,\n",
              "           0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,\n",
              "           0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,\n",
              "           0., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "           1., 0., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "           0., 1., 0., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "           0., 0., 1., 0., 0.],\n",
              "          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "           0., 0., 0., 1., 0.]])])}"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.holtwinters import SimpleExpSmoothing"
      ],
      "metadata": {
        "id": "78O9ZZsd2nsf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "span=12\n",
        "alpha = 2/(span+1)"
      ],
      "metadata": {
        "id": "LWtYQI2520p4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy['EWMA12']= dfTransactions_copy['Loans_diff'].ewm(alpha=alpha, adjust=False).mean()"
      ],
      "metadata": {
        "id": "mourkJqJ26s3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "4QEwB5Of3Pin",
        "outputId": "df59811c-839d-4954-da68-53b50d1b609e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
              "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
              "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
              "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
              "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
              "\n",
              "            InflationRate_diff    EWMA12  \n",
              "Date                                      \n",
              "2019-03-01                0.03  0.295461  \n",
              "2019-04-01                0.04  0.244400  \n",
              "2019-05-01               -0.02  0.172359  \n",
              "2019-06-01               -0.02  0.165385  \n",
              "2019-07-01                0.08  0.138924  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0e6cf6e4-74cd-4c26-a6fc-4f278fa81a20\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.220753</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.295461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.184321</td>\n",
              "      <td>-0.036432</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.244400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "      <td>0.04</td>\n",
              "      <td>4.960456</td>\n",
              "      <td>-0.223865</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.172359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>90.49</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.087479</td>\n",
              "      <td>0.127023</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.165385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>90.02</td>\n",
              "      <td>0.10</td>\n",
              "      <td>5.080871</td>\n",
              "      <td>-0.006608</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.138924</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e6cf6e4-74cd-4c26-a6fc-4f278fa81a20')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0e6cf6e4-74cd-4c26-a6fc-4f278fa81a20 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0e6cf6e4-74cd-4c26-a6fc-4f278fa81a20');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7d30ad92-85e3-4457-9324-9b39002af480\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d30ad92-85e3-4457-9324-9b39002af480')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7d30ad92-85e3-4457-9324-9b39002af480 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfTransactions_copy",
              "summary": "{\n  \"name\": \"dfTransactions_copy\",\n  \"rows\": 70,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 70,\n        \"samples\": [\n          \"2021-01-01 00:00:00\",\n          \"2019-03-01 00:00:00\",\n          \"2023-05-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.347477504393703,\n        \"min\": 70.46,\n        \"max\": 115.09,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          70.46,\n          100.48,\n          105.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04580655155795369,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.02,\n          0.06,\n          -0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14432989049853368,\n        \"min\": 4.772036523771188,\n        \"max\": 5.394628996306013,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          4.772036523771188,\n          5.220753153075026,\n          5.287652129650836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13284819709319712,\n        \"min\": -0.23919454760586234,\n        \"max\": 0.34070478630456336,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.08252638465286832,\n          0.2954607872094659,\n          -0.10790647945311704\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06504036014049254,\n        \"min\": -0.22,\n        \"max\": 0.21,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.21,\n          0.05,\n          0.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05779850354221349,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.028962641862430697,\n          0.2954607872094659,\n          0.0057457399884141315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = SimpleExpSmoothing(dfTransactions_copy['Loans_diff'])"
      ],
      "metadata": {
        "id": "snfw19S13XxI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fitted_model = model.fit(smoothing_level=alpha, optimized=False)"
      ],
      "metadata": {
        "id": "Bviymf0N3ie_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy['SES']=fitted_model.fittedvalues.shift(-1)"
      ],
      "metadata": {
        "id": "_k8Yf_Ag3s-4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "vvphJsxi38TO",
        "outputId": "0608a2c7-1a47-45eb-a3e5-204e30a749d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
              "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
              "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
              "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
              "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
              "\n",
              "            InflationRate_diff    EWMA12       SES  \n",
              "Date                                                \n",
              "2019-03-01                0.03  0.295461  0.295461  \n",
              "2019-04-01                0.04  0.244400  0.244400  \n",
              "2019-05-01               -0.02  0.172359  0.172359  \n",
              "2019-06-01               -0.02  0.165385  0.165385  \n",
              "2019-07-01                0.08  0.138924  0.138924  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3387b5ce-e6e8-494a-aefa-4852825cb192\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "      <th>SES</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.220753</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.295461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.184321</td>\n",
              "      <td>-0.036432</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.244400</td>\n",
              "      <td>0.244400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "      <td>0.04</td>\n",
              "      <td>4.960456</td>\n",
              "      <td>-0.223865</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.172359</td>\n",
              "      <td>0.172359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>90.49</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.087479</td>\n",
              "      <td>0.127023</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.165385</td>\n",
              "      <td>0.165385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>90.02</td>\n",
              "      <td>0.10</td>\n",
              "      <td>5.080871</td>\n",
              "      <td>-0.006608</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.138924</td>\n",
              "      <td>0.138924</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3387b5ce-e6e8-494a-aefa-4852825cb192')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3387b5ce-e6e8-494a-aefa-4852825cb192 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3387b5ce-e6e8-494a-aefa-4852825cb192');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-dc44ef1d-5d11-4d23-8d54-d995600c2a2d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dc44ef1d-5d11-4d23-8d54-d995600c2a2d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-dc44ef1d-5d11-4d23-8d54-d995600c2a2d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfTransactions_copy",
              "summary": "{\n  \"name\": \"dfTransactions_copy\",\n  \"rows\": 70,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 70,\n        \"samples\": [\n          \"2021-01-01 00:00:00\",\n          \"2019-03-01 00:00:00\",\n          \"2023-05-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.347477504393703,\n        \"min\": 70.46,\n        \"max\": 115.09,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          70.46,\n          100.48,\n          105.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04580655155795369,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.02,\n          0.06,\n          -0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14432989049853368,\n        \"min\": 4.772036523771188,\n        \"max\": 5.394628996306013,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          4.772036523771188,\n          5.220753153075026,\n          5.287652129650836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13284819709319712,\n        \"min\": -0.23919454760586234,\n        \"max\": 0.34070478630456336,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.08252638465286832,\n          0.2954607872094659,\n          -0.10790647945311704\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06504036014049254,\n        \"min\": -0.22,\n        \"max\": 0.21,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.21,\n          0.05,\n          0.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05779850354221349,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.028962641862430697,\n          0.2954607872094659,\n          0.0057457399884141315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05799836812983171,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          -0.028962641862430697,\n          0.2954607872094659,\n          0.03582684077741166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.holtwinters import ExponentialSmoothing"
      ],
      "metadata": {
        "id": "NBg2jwB74OqD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "qhlxwO2g4WJv",
        "outputId": "75e534a5-4d67-419e-e2b0-5a9e1d5d14e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 93
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy['DES_add_12']= ExponentialSmoothing(dfTransactions_copy['Loans_diff'], trend= 'add').fit().fittedvalues.shift(-1)"
      ],
      "metadata": {
        "id": "hyhcVF6Z46nZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "ayfSAQRC5GzY",
        "outputId": "343e9bdf-2e64-4ad8-d57d-4058beb0d549"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
              "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
              "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
              "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
              "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
              "\n",
              "            InflationRate_diff    EWMA12       SES  DES_add_12  \n",
              "Date                                                            \n",
              "2019-03-01                0.03  0.295461  0.295461    0.007948  \n",
              "2019-04-01                0.04  0.244400  0.244400    0.007800  \n",
              "2019-05-01               -0.02  0.172359  0.172359    0.007651  \n",
              "2019-06-01               -0.02  0.165385  0.165385    0.007503  \n",
              "2019-07-01                0.08  0.138924  0.138924    0.007354  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-21b0bf67-7d70-4f89-bbaa-94cab237ac1a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "      <th>SES</th>\n",
              "      <th>DES_add_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.220753</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.007948</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.184321</td>\n",
              "      <td>-0.036432</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.244400</td>\n",
              "      <td>0.244400</td>\n",
              "      <td>0.007800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "      <td>0.04</td>\n",
              "      <td>4.960456</td>\n",
              "      <td>-0.223865</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.172359</td>\n",
              "      <td>0.172359</td>\n",
              "      <td>0.007651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>90.49</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.087479</td>\n",
              "      <td>0.127023</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.165385</td>\n",
              "      <td>0.165385</td>\n",
              "      <td>0.007503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>90.02</td>\n",
              "      <td>0.10</td>\n",
              "      <td>5.080871</td>\n",
              "      <td>-0.006608</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.138924</td>\n",
              "      <td>0.138924</td>\n",
              "      <td>0.007354</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21b0bf67-7d70-4f89-bbaa-94cab237ac1a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-21b0bf67-7d70-4f89-bbaa-94cab237ac1a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-21b0bf67-7d70-4f89-bbaa-94cab237ac1a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b120a3c5-062a-415c-9098-09e327b0aa6d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b120a3c5-062a-415c-9098-09e327b0aa6d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b120a3c5-062a-415c-9098-09e327b0aa6d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfTransactions_copy",
              "summary": "{\n  \"name\": \"dfTransactions_copy\",\n  \"rows\": 70,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 70,\n        \"samples\": [\n          \"2021-01-01 00:00:00\",\n          \"2019-03-01 00:00:00\",\n          \"2023-05-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.347477504393703,\n        \"min\": 70.46,\n        \"max\": 115.09,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          70.46,\n          100.48,\n          105.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04580655155795369,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.02,\n          0.06,\n          -0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14432989049853368,\n        \"min\": 4.772036523771188,\n        \"max\": 5.394628996306013,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          4.772036523771188,\n          5.220753153075026,\n          5.287652129650836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13284819709319712,\n        \"min\": -0.23919454760586234,\n        \"max\": 0.34070478630456336,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.08252638465286832,\n          0.2954607872094659,\n          -0.10790647945311704\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06504036014049254,\n        \"min\": -0.22,\n        \"max\": 0.21,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.21,\n          0.05,\n          0.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05779850354221349,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.028962641862430697,\n          0.2954607872094659,\n          0.0057457399884141315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05799836812983171,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          -0.028962641862430697,\n          0.2954607872094659,\n          0.03582684077741166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0029786484963042438,\n        \"min\": -0.0021477068870807262,\n        \"max\": 0.007948201679109415,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          0.004681870694122706,\n          0.007948201679109415,\n          0.0009701476384234949\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xYNonx9R4syg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy[['Loans_diff', 'SES', 'DES_add_12']].plot(figsize=(12,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "lhqHHxtV5ROi",
        "outputId": "96dd342b-ae71-4830-ab7f-c9b654ecb8e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 96
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy[['Loans_diff', 'SES', 'DES_add_12']].iloc[:24].plot(figsize=(12,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "mQlM_rKW5sK-",
        "outputId": "e3a1e950-e508-4e96-9d75-7a79ebaf92fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 97
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy[['Loans_diff', 'SES', 'DES_add_12']].iloc[-24:].plot(figsize=(12,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "id": "3fAuDMvR6KqP",
        "outputId": "05eb6634-4e45-4f29-ab3d-c8fc8a8fa4b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 98
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TRIPLE EXPONENTIAL SMOOTHING\n",
        "dfTransactions_copy['TES_add_12']= ExponentialSmoothing(dfTransactions_copy['Loans_diff'], trend='add', seasonal ='add', seasonal_periods=12).fit().fittedvalues"
      ],
      "metadata": {
        "id": "TiqvLjHS9qeZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.head()"
      ],
      "metadata": {
        "id": "EDdH6Any-ck7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "outputId": "39196975-f393-4627-a12f-9fc08d753daf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
              "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
              "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
              "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
              "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
              "\n",
              "            InflationRate_diff    EWMA12       SES  DES_add_12  TES_add_12  \n",
              "Date                                                                        \n",
              "2019-03-01                0.03  0.295461  0.295461    0.007948    0.101954  \n",
              "2019-04-01                0.04  0.244400  0.244400    0.007800   -0.076834  \n",
              "2019-05-01               -0.02  0.172359  0.172359    0.007651   -0.015123  \n",
              "2019-06-01               -0.02  0.165385  0.165385    0.007503   -0.000119  \n",
              "2019-07-01                0.08  0.138924  0.138924    0.007354   -0.037596  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-635081a3-f3e8-4708-a3df-e2ab85af142f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "      <th>SES</th>\n",
              "      <th>DES_add_12</th>\n",
              "      <th>TES_add_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.220753</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.007948</td>\n",
              "      <td>0.101954</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.184321</td>\n",
              "      <td>-0.036432</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.244400</td>\n",
              "      <td>0.244400</td>\n",
              "      <td>0.007800</td>\n",
              "      <td>-0.076834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "      <td>0.04</td>\n",
              "      <td>4.960456</td>\n",
              "      <td>-0.223865</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.172359</td>\n",
              "      <td>0.172359</td>\n",
              "      <td>0.007651</td>\n",
              "      <td>-0.015123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>90.49</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.087479</td>\n",
              "      <td>0.127023</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.165385</td>\n",
              "      <td>0.165385</td>\n",
              "      <td>0.007503</td>\n",
              "      <td>-0.000119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>90.02</td>\n",
              "      <td>0.10</td>\n",
              "      <td>5.080871</td>\n",
              "      <td>-0.006608</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.138924</td>\n",
              "      <td>0.138924</td>\n",
              "      <td>0.007354</td>\n",
              "      <td>-0.037596</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-635081a3-f3e8-4708-a3df-e2ab85af142f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-635081a3-f3e8-4708-a3df-e2ab85af142f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-635081a3-f3e8-4708-a3df-e2ab85af142f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f65ba148-e70a-4054-a764-add845a4e8ee\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f65ba148-e70a-4054-a764-add845a4e8ee')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f65ba148-e70a-4054-a764-add845a4e8ee button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dfTransactions_copy",
              "summary": "{\n  \"name\": \"dfTransactions_copy\",\n  \"rows\": 70,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 70,\n        \"samples\": [\n          \"2021-01-01 00:00:00\",\n          \"2019-03-01 00:00:00\",\n          \"2023-05-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.347477504393703,\n        \"min\": 70.46,\n        \"max\": 115.09,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          70.46,\n          100.48,\n          105.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04580655155795369,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.02,\n          0.06,\n          -0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14432989049853368,\n        \"min\": 4.772036523771188,\n        \"max\": 5.394628996306013,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          4.772036523771188,\n          5.220753153075026,\n          5.287652129650836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13284819709319712,\n        \"min\": -0.23919454760586234,\n        \"max\": 0.34070478630456336,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.08252638465286832,\n          0.2954607872094659,\n          -0.10790647945311704\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06504036014049254,\n        \"min\": -0.22,\n        \"max\": 0.21,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          0.21,\n          0.05,\n          0.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05779850354221349,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.028962641862430697,\n          0.2954607872094659,\n          0.0057457399884141315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05799836812983171,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          -0.028962641862430697,\n          0.2954607872094659,\n          0.03582684077741166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0029786484963042438,\n        \"min\": -0.0021477068870807262,\n        \"max\": 0.007948201679109415,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          0.004681870694122706,\n          0.007948201679109415,\n          0.0009701476384234949\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07517816130334475,\n        \"min\": -0.1015371751289568,\n        \"max\": 0.1257313483911358,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          -0.034576935729304044,\n          0.10195400870496546,\n          -0.08215085108535788\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-iT7DCte5NMp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy[['Loans_diff','DES_add_12', 'TES_add_12']].iloc[:24].plot(figsize=(12,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "d56vfbCMahoS",
        "outputId": "c332d6ea-d146-4d55-b2de-2c64a6911ee3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 101
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy[['Loans_diff', 'DES_add_12', 'TES_add_12']].iloc[-24:].plot(figsize=(12,5))"
      ],
      "metadata": {
        "id": "ptIVDelq-uy0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "outputId": "153fa2e8-87f3-4eef-cfd1-4913af6c30d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 102
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.info()"
      ],
      "metadata": {
        "id": "7SKkeFvn-5s3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "60a2a132-396e-4c74-b36e-45932b8c241b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 70 entries, 2019-03-01 to 2025-01-01\n",
            "Data columns (total 9 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   Loans               70 non-null     float64\n",
            " 1   InflationRate       70 non-null     float64\n",
            " 2   Loans_BoxCox        70 non-null     float64\n",
            " 3   Loans_diff          70 non-null     float64\n",
            " 4   InflationRate_diff  70 non-null     float64\n",
            " 5   EWMA12              70 non-null     float64\n",
            " 6   SES                 69 non-null     float64\n",
            " 7   DES_add_12          69 non-null     float64\n",
            " 8   TES_add_12          70 non-null     float64\n",
            "dtypes: float64(9)\n",
            "memory usage: 5.5 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P-fqOOAodEUL",
        "outputId": "4a079768-be9a-420e-9f5a-f806b6ca4f10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01',\n",
              "               '2019-07-01', '2019-08-01', '2019-09-01', '2019-10-01',\n",
              "               '2019-11-01', '2019-12-01', '2020-01-01', '2020-02-01',\n",
              "               '2020-03-01', '2020-04-01', '2020-05-01', '2020-06-01',\n",
              "               '2020-07-01', '2020-08-01', '2020-09-01', '2020-10-01',\n",
              "               '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01',\n",
              "               '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01',\n",
              "               '2021-07-01', '2021-08-01', '2021-10-01', '2021-11-01',\n",
              "               '2021-12-01', '2022-01-01', '2022-02-01', '2022-03-01',\n",
              "               '2022-04-01', '2022-05-01', '2022-06-01', '2022-07-01',\n",
              "               '2022-08-01', '2022-09-01', '2022-10-01', '2022-11-01',\n",
              "               '2022-12-01', '2023-01-01', '2023-02-01', '2023-03-01',\n",
              "               '2023-04-01', '2023-05-01', '2023-06-01', '2023-07-01',\n",
              "               '2023-08-01', '2023-09-01', '2023-10-01', '2023-11-01',\n",
              "               '2023-12-01', '2024-01-01', '2024-02-01', '2024-03-01',\n",
              "               '2024-04-01', '2024-05-01', '2024-06-01', '2024-07-01',\n",
              "               '2024-08-01', '2024-09-01', '2024-10-01', '2024-11-01',\n",
              "               '2024-12-01', '2025-01-01'],\n",
              "              dtype='datetime64[ns]', name='Date', freq=None)"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the index to a datetime object if it's not already\n",
        "dfTransactions_copy.index = pd.to_datetime(dfTransactions_copy.index)\n",
        "\n",
        "# Reset the index to make 'Date' a regular column\n",
        "dfTransactions_copy = dfTransactions_copy.reset_index()\n",
        "\n",
        "# Now you can access the 'Date' column\n",
        "dfTransactions_copy['Date'] = pd.to_datetime(dfTransactions_copy['Date'])\n",
        "\n",
        "# Set 'Date' as the index again\n",
        "dfTransactions_copy.set_index('Date', inplace=True)\n",
        "\n",
        "# Check for missing dates and inferred frequency\n",
        "print(\"Original Index:\", dfTransactions_copy.index)\n",
        "print(\"Inferred Frequency:\", dfTransactions_copy.index.inferred_freq)\n",
        "\n",
        "# Ensure a consistent monthly frequency\n",
        "dfTransactions_copy_fixed = dfTransactions_copy.asfreq('MS')  # 'MS' for Month End\n",
        "\n",
        "# Forward fill missing values\n",
        "dfTransactions_copy_fixed.ffill(inplace=True)\n",
        "\n",
        "# Verify the fixed frequency\n",
        "print(\"Fixed Frequency:\", dfTransactions_copy_fixed.index.freq)\n",
        "\n",
        "# Display the fixed DataFrame\n",
        "print(dfTransactions_copy_fixed.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cjBMF33xd2eX",
        "outputId": "c3945e68-931e-4888-8650-706ca8f4bbec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Index: DatetimeIndex(['2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01',\n",
            "               '2019-07-01', '2019-08-01', '2019-09-01', '2019-10-01',\n",
            "               '2019-11-01', '2019-12-01', '2020-01-01', '2020-02-01',\n",
            "               '2020-03-01', '2020-04-01', '2020-05-01', '2020-06-01',\n",
            "               '2020-07-01', '2020-08-01', '2020-09-01', '2020-10-01',\n",
            "               '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01',\n",
            "               '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01',\n",
            "               '2021-07-01', '2021-08-01', '2021-10-01', '2021-11-01',\n",
            "               '2021-12-01', '2022-01-01', '2022-02-01', '2022-03-01',\n",
            "               '2022-04-01', '2022-05-01', '2022-06-01', '2022-07-01',\n",
            "               '2022-08-01', '2022-09-01', '2022-10-01', '2022-11-01',\n",
            "               '2022-12-01', '2023-01-01', '2023-02-01', '2023-03-01',\n",
            "               '2023-04-01', '2023-05-01', '2023-06-01', '2023-07-01',\n",
            "               '2023-08-01', '2023-09-01', '2023-10-01', '2023-11-01',\n",
            "               '2023-12-01', '2024-01-01', '2024-02-01', '2024-03-01',\n",
            "               '2024-04-01', '2024-05-01', '2024-06-01', '2024-07-01',\n",
            "               '2024-08-01', '2024-09-01', '2024-10-01', '2024-11-01',\n",
            "               '2024-12-01', '2025-01-01'],\n",
            "              dtype='datetime64[ns]', name='Date', freq=None)\n",
            "Inferred Frequency: None\n",
            "Fixed Frequency: <MonthBegin>\n",
            "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
            "Date                                                          \n",
            "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
            "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
            "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
            "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
            "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
            "\n",
            "            InflationRate_diff    EWMA12       SES  DES_add_12  TES_add_12  \n",
            "Date                                                                        \n",
            "2019-03-01                0.03  0.295461  0.295461    0.007948    0.101954  \n",
            "2019-04-01                0.04  0.244400  0.244400    0.007800   -0.076834  \n",
            "2019-05-01               -0.02  0.172359  0.172359    0.007651   -0.015123  \n",
            "2019-06-01               -0.02  0.165385  0.165385    0.007503   -0.000119  \n",
            "2019-07-01                0.08  0.138924  0.138924    0.007354   -0.037596  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfTransactions_copy_fixed.index"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l_vvHvzEhB9j",
        "outputId": "b5363f60-dc08-4b1e-97e0-053f57f842bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DatetimeIndex(['2019-03-01', '2019-04-01', '2019-05-01', '2019-06-01',\n",
              "               '2019-07-01', '2019-08-01', '2019-09-01', '2019-10-01',\n",
              "               '2019-11-01', '2019-12-01', '2020-01-01', '2020-02-01',\n",
              "               '2020-03-01', '2020-04-01', '2020-05-01', '2020-06-01',\n",
              "               '2020-07-01', '2020-08-01', '2020-09-01', '2020-10-01',\n",
              "               '2020-11-01', '2020-12-01', '2021-01-01', '2021-02-01',\n",
              "               '2021-03-01', '2021-04-01', '2021-05-01', '2021-06-01',\n",
              "               '2021-07-01', '2021-08-01', '2021-09-01', '2021-10-01',\n",
              "               '2021-11-01', '2021-12-01', '2022-01-01', '2022-02-01',\n",
              "               '2022-03-01', '2022-04-01', '2022-05-01', '2022-06-01',\n",
              "               '2022-07-01', '2022-08-01', '2022-09-01', '2022-10-01',\n",
              "               '2022-11-01', '2022-12-01', '2023-01-01', '2023-02-01',\n",
              "               '2023-03-01', '2023-04-01', '2023-05-01', '2023-06-01',\n",
              "               '2023-07-01', '2023-08-01', '2023-09-01', '2023-10-01',\n",
              "               '2023-11-01', '2023-12-01', '2024-01-01', '2024-02-01',\n",
              "               '2024-03-01', '2024-04-01', '2024-05-01', '2024-06-01',\n",
              "               '2024-07-01', '2024-08-01', '2024-09-01', '2024-10-01',\n",
              "               '2024-11-01', '2024-12-01', '2025-01-01'],\n",
              "              dtype='datetime64[ns]', name='Date', freq='MS')"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dfAverage_Monthly_TransactionLoan = dfTransactions_copy_fixed.copy()"
      ],
      "metadata": {
        "id": "h2TB2CSDiJDf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfAverage_Monthly_TransactionLoan.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aN2-_aUOlGRe",
        "outputId": "96c52c5c-2e49-4fe4-ca52-675af01062d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "DatetimeIndex: 71 entries, 2019-03-01 to 2025-01-01\n",
            "Freq: MS\n",
            "Data columns (total 9 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   Loans               71 non-null     float64\n",
            " 1   InflationRate       71 non-null     float64\n",
            " 2   Loans_BoxCox        71 non-null     float64\n",
            " 3   Loans_diff          71 non-null     float64\n",
            " 4   InflationRate_diff  71 non-null     float64\n",
            " 5   EWMA12              71 non-null     float64\n",
            " 6   SES                 71 non-null     float64\n",
            " 7   DES_add_12          71 non-null     float64\n",
            " 8   TES_add_12          71 non-null     float64\n",
            "dtypes: float64(9)\n",
            "memory usage: 5.5 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Bz7arnoc6xOX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QKcoX3SX6w8m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data = dfAverage_Monthly_TransactionLoan.iloc[:56]\n",
        "test_data = dfAverage_Monthly_TransactionLoan.iloc[55:]"
      ],
      "metadata": {
        "id": "ferBZ6R_lVuK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tvwFWcUo66yv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "P5_GGRCT66Ae",
        "outputId": "d150b909-06b8-4ba0-f236-3f1bee130a8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2019-03-01  100.48           0.02      5.220753    0.295461   \n",
              "2019-04-01   97.65           0.06      5.184321   -0.036432   \n",
              "2019-05-01   81.85           0.04      4.960456   -0.223865   \n",
              "2019-06-01   90.49           0.02      5.087479    0.127023   \n",
              "2019-07-01   90.02           0.10      5.080871   -0.006608   \n",
              "\n",
              "            InflationRate_diff    EWMA12       SES  DES_add_12  TES_add_12  \n",
              "Date                                                                        \n",
              "2019-03-01                0.03  0.295461  0.295461    0.007948    0.101954  \n",
              "2019-04-01                0.04  0.244400  0.244400    0.007800   -0.076834  \n",
              "2019-05-01               -0.02  0.172359  0.172359    0.007651   -0.015123  \n",
              "2019-06-01               -0.02  0.165385  0.165385    0.007503   -0.000119  \n",
              "2019-07-01                0.08  0.138924  0.138924    0.007354   -0.037596  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b768f592-d714-46f4-b06e-60c8c0fab989\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "      <th>SES</th>\n",
              "      <th>DES_add_12</th>\n",
              "      <th>TES_add_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-03-01</th>\n",
              "      <td>100.48</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.220753</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.295461</td>\n",
              "      <td>0.007948</td>\n",
              "      <td>0.101954</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-04-01</th>\n",
              "      <td>97.65</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.184321</td>\n",
              "      <td>-0.036432</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.244400</td>\n",
              "      <td>0.244400</td>\n",
              "      <td>0.007800</td>\n",
              "      <td>-0.076834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-05-01</th>\n",
              "      <td>81.85</td>\n",
              "      <td>0.04</td>\n",
              "      <td>4.960456</td>\n",
              "      <td>-0.223865</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.172359</td>\n",
              "      <td>0.172359</td>\n",
              "      <td>0.007651</td>\n",
              "      <td>-0.015123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-06-01</th>\n",
              "      <td>90.49</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.087479</td>\n",
              "      <td>0.127023</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>0.165385</td>\n",
              "      <td>0.165385</td>\n",
              "      <td>0.007503</td>\n",
              "      <td>-0.000119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-07-01</th>\n",
              "      <td>90.02</td>\n",
              "      <td>0.10</td>\n",
              "      <td>5.080871</td>\n",
              "      <td>-0.006608</td>\n",
              "      <td>0.08</td>\n",
              "      <td>0.138924</td>\n",
              "      <td>0.138924</td>\n",
              "      <td>0.007354</td>\n",
              "      <td>-0.037596</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b768f592-d714-46f4-b06e-60c8c0fab989')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b768f592-d714-46f4-b06e-60c8c0fab989 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b768f592-d714-46f4-b06e-60c8c0fab989');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0b2f43cc-0035-4b8a-aa3a-98f4f82b604b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b2f43cc-0035-4b8a-aa3a-98f4f82b604b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0b2f43cc-0035-4b8a-aa3a-98f4f82b604b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_data",
              "summary": "{\n  \"name\": \"train_data\",\n  \"rows\": 56,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2019-03-01 00:00:00\",\n        \"max\": \"2023-10-01 00:00:00\",\n        \"num_unique_values\": 56,\n        \"samples\": [\n          \"2019-03-01 00:00:00\",\n          \"2019-08-01 00:00:00\",\n          \"2021-12-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.410247714351337,\n        \"min\": 70.46,\n        \"max\": 108.0,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          80.09,\n          99.17,\n          97.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04498159796899346,\n        \"min\": -0.1,\n        \"max\": 0.22,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.02,\n          0.06,\n          0.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1342415472893865,\n        \"min\": 4.772036523771188,\n        \"max\": 5.313036184661917,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          4.933029649838118,\n          5.204011126968805,\n          5.179745650197719\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13178941950736822,\n        \"min\": -0.2238649343467447,\n        \"max\": 0.34070478630456336,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          0.0660876224400182,\n          -0.1847176692890553,\n          -0.1759995729499524\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06524852588273647,\n        \"min\": -0.22,\n        \"max\": 0.21,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          -0.18,\n          0.02,\n          -0.06999999999999999\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06267775267153412,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          0.01112143699353644,\n          0.08913320399485869,\n          -0.01766641069007723\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06267775267153412,\n        \"min\": -0.028962641862430697,\n        \"max\": 0.2954607872094659,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          0.01112143699353644,\n          0.08913320399485869,\n          -0.01766641069007723\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0023572097032384005,\n        \"min\": -6.913714565580095e-05,\n        \"max\": 0.007948201679109415,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          0.003345650989799875,\n          0.0072058502890673375,\n          0.0031971791207345487\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07411284320812214,\n        \"min\": -0.09887893504439256,\n        \"max\": 0.1257313483911358,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          -0.08519804336873554,\n          0.033946786848909664,\n          -0.09754981711344757\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gtquH2sh7crV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "jGUipvWnkRNN",
        "outputId": "03816e21-9e4b-41e8-a928-186e35f542cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2023-06-01   99.17          -0.02      5.204011    0.024265   \n",
              "2023-07-01  101.74           0.01      5.236662    0.032651   \n",
              "2023-08-01   93.79           0.00      5.132982   -0.103680   \n",
              "2023-09-01  105.76           0.02      5.286201    0.153219   \n",
              "2023-10-01  106.02           0.06      5.289343    0.003142   \n",
              "\n",
              "            InflationRate_diff    EWMA12       SES  DES_add_12  TES_add_12  \n",
              "Date                                                                        \n",
              "2023-06-01               -0.06  0.008595  0.008595    0.000525   -0.020440  \n",
              "2023-07-01                0.03  0.012296  0.012296    0.000376   -0.005436  \n",
              "2023-08-01               -0.01 -0.005547 -0.005547    0.000228   -0.042912  \n",
              "2023-09-01                0.02  0.018879  0.018879    0.000079    0.028630  \n",
              "2023-10-01                0.04  0.016458  0.016458   -0.000069    0.120415  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-04c17fba-0e5c-4d85-9009-c024a68146fb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "      <th>SES</th>\n",
              "      <th>DES_add_12</th>\n",
              "      <th>TES_add_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-06-01</th>\n",
              "      <td>99.17</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>5.204011</td>\n",
              "      <td>0.024265</td>\n",
              "      <td>-0.06</td>\n",
              "      <td>0.008595</td>\n",
              "      <td>0.008595</td>\n",
              "      <td>0.000525</td>\n",
              "      <td>-0.020440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-07-01</th>\n",
              "      <td>101.74</td>\n",
              "      <td>0.01</td>\n",
              "      <td>5.236662</td>\n",
              "      <td>0.032651</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.012296</td>\n",
              "      <td>0.012296</td>\n",
              "      <td>0.000376</td>\n",
              "      <td>-0.005436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-08-01</th>\n",
              "      <td>93.79</td>\n",
              "      <td>0.00</td>\n",
              "      <td>5.132982</td>\n",
              "      <td>-0.103680</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>-0.005547</td>\n",
              "      <td>-0.005547</td>\n",
              "      <td>0.000228</td>\n",
              "      <td>-0.042912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-09-01</th>\n",
              "      <td>105.76</td>\n",
              "      <td>0.02</td>\n",
              "      <td>5.286201</td>\n",
              "      <td>0.153219</td>\n",
              "      <td>0.02</td>\n",
              "      <td>0.018879</td>\n",
              "      <td>0.018879</td>\n",
              "      <td>0.000079</td>\n",
              "      <td>0.028630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-10-01</th>\n",
              "      <td>106.02</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.289343</td>\n",
              "      <td>0.003142</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.016458</td>\n",
              "      <td>0.016458</td>\n",
              "      <td>-0.000069</td>\n",
              "      <td>0.120415</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-04c17fba-0e5c-4d85-9009-c024a68146fb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-04c17fba-0e5c-4d85-9009-c024a68146fb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-04c17fba-0e5c-4d85-9009-c024a68146fb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b3cb00f9-9393-48b7-aa5b-8e8d4b73a9d2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3cb00f9-9393-48b7-aa5b-8e8d4b73a9d2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b3cb00f9-9393-48b7-aa5b-8e8d4b73a9d2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"train_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-06-01 00:00:00\",\n        \"max\": \"2023-10-01 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2023-07-01 00:00:00\",\n          \"2023-10-01 00:00:00\",\n          \"2023-08-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.08184316955964,\n        \"min\": 93.79,\n        \"max\": 106.02,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          101.74,\n          106.02,\n          93.79\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.029664793948382652,\n        \"min\": -0.02,\n        \"max\": 0.06,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.01,\n          0.06,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06483116184888077,\n        \"min\": 5.132982083720925,\n        \"max\": 5.289343215444673,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.236662259455421,\n          5.289343215444673,\n          5.132982083720925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09149870976074671,\n        \"min\": -0.10368017573449606,\n        \"max\": 0.15321885742108154,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.032651132486615886,\n          0.003142274302667225,\n          -0.10368017573449606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0403732584763727,\n        \"min\": -0.06,\n        \"max\": 0.039999999999999994,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.03,\n          0.039999999999999994,\n          -0.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.009609722207289121,\n        \"min\": -0.005546586346793643,\n        \"max\": 0.018878866540571772,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.012295884450970435,\n          0.01645785235012492,\n          -0.005546586346793643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.009609722207289121,\n        \"min\": -0.005546586346793643,\n        \"max\": 0.018878866540571772,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.012295884450970435,\n          0.01645785235012492,\n          -0.005546586346793643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00023474990013839066,\n        \"min\": -6.913714565580095e-05,\n        \"max\": 0.0005247383872522366,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.00037626966935967233,\n          -6.913714565580095e-05,\n          0.00022779892218463205\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06387477831922438,\n        \"min\": -0.04291210101367165,\n        \"max\": 0.1204148732761752,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.005435898343826615,\n          0.1204148732761752,\n          -0.04291210101367165\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "0TZL55KikeEl",
        "outputId": "804cb13e-9318-4530-ffd3-4332f8933250"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "Date                                                          \n",
              "2023-10-01  106.02           0.06      5.289343    0.003142   \n",
              "2023-11-01  100.04          -0.06      5.215153   -0.074190   \n",
              "2023-12-01   91.10           0.04      5.096008   -0.119146   \n",
              "2024-01-01  102.41          -0.01      5.245046    0.149038   \n",
              "2024-02-01  100.64          -0.02      5.222784   -0.022262   \n",
              "\n",
              "            InflationRate_diff    EWMA12       SES  DES_add_12  TES_add_12  \n",
              "Date                                                                        \n",
              "2023-10-01                0.04  0.016458  0.016458   -0.000069    0.120415  \n",
              "2023-11-01               -0.12  0.002512  0.002512   -0.000218   -0.087856  \n",
              "2023-12-01                0.10 -0.016205 -0.016205   -0.000366   -0.100208  \n",
              "2024-01-01               -0.05  0.009217  0.009217   -0.000515    0.043187  \n",
              "2024-02-01               -0.01  0.004374  0.004374   -0.000663   -0.038564  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8cbd0fc0-1e4d-4104-8461-bf63b3946b6d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "      <th>SES</th>\n",
              "      <th>DES_add_12</th>\n",
              "      <th>TES_add_12</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-10-01</th>\n",
              "      <td>106.02</td>\n",
              "      <td>0.06</td>\n",
              "      <td>5.289343</td>\n",
              "      <td>0.003142</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.016458</td>\n",
              "      <td>0.016458</td>\n",
              "      <td>-0.000069</td>\n",
              "      <td>0.120415</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>100.04</td>\n",
              "      <td>-0.06</td>\n",
              "      <td>5.215153</td>\n",
              "      <td>-0.074190</td>\n",
              "      <td>-0.12</td>\n",
              "      <td>0.002512</td>\n",
              "      <td>0.002512</td>\n",
              "      <td>-0.000218</td>\n",
              "      <td>-0.087856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>91.10</td>\n",
              "      <td>0.04</td>\n",
              "      <td>5.096008</td>\n",
              "      <td>-0.119146</td>\n",
              "      <td>0.10</td>\n",
              "      <td>-0.016205</td>\n",
              "      <td>-0.016205</td>\n",
              "      <td>-0.000366</td>\n",
              "      <td>-0.100208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>102.41</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>5.245046</td>\n",
              "      <td>0.149038</td>\n",
              "      <td>-0.05</td>\n",
              "      <td>0.009217</td>\n",
              "      <td>0.009217</td>\n",
              "      <td>-0.000515</td>\n",
              "      <td>0.043187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>100.64</td>\n",
              "      <td>-0.02</td>\n",
              "      <td>5.222784</td>\n",
              "      <td>-0.022262</td>\n",
              "      <td>-0.01</td>\n",
              "      <td>0.004374</td>\n",
              "      <td>0.004374</td>\n",
              "      <td>-0.000663</td>\n",
              "      <td>-0.038564</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8cbd0fc0-1e4d-4104-8461-bf63b3946b6d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8cbd0fc0-1e4d-4104-8461-bf63b3946b6d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8cbd0fc0-1e4d-4104-8461-bf63b3946b6d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9b63c6ec-4f84-4b15-bd56-d6f439966438\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b63c6ec-4f84-4b15-bd56-d6f439966438')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9b63c6ec-4f84-4b15-bd56-d6f439966438 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_data",
              "summary": "{\n  \"name\": \"test_data\",\n  \"rows\": 16,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-10-01 00:00:00\",\n        \"max\": \"2025-01-01 00:00:00\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"2023-10-01 00:00:00\",\n          \"2023-11-01 00:00:00\",\n          \"2024-03-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.229171431314472,\n        \"min\": 91.1,\n        \"max\": 115.09,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          106.02,\n          100.04,\n          109.49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04895150661624217,\n        \"min\": -0.06,\n        \"max\": 0.14,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.03,\n          0.05,\n          0.06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09095960511385649,\n        \"min\": 5.09600755055872,\n        \"max\": 5.394628996306013,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          5.289343215444673,\n          5.2151530526463,\n          5.330596002836172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13248989449256038,\n        \"min\": -0.23919454760586234,\n        \"max\": 0.23506730706581713,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.003142274302667225,\n          -0.07419016279837365,\n          0.10781220644032175\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06303438215238834,\n        \"min\": -0.12,\n        \"max\": 0.1,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          -0.019999999999999997,\n          0.05,\n          0.039999999999999994\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.015290836123645438,\n        \"min\": -0.0220497216322993,\n        \"max\": 0.027017947510350977,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.01645785235012492,\n          0.002512003865740525,\n          0.020287939154080118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.014745044070781614,\n        \"min\": -0.0220497216322993,\n        \"max\": 0.027017947510350977,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.007781606683112195,\n          0.017506744321257074,\n          0.01645785235012492\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.000692082569159023,\n        \"min\": -0.0021477068870807262,\n        \"max\": -6.913714565580095e-05,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          -0.0014053598694747482,\n          -0.0017022974892641415,\n          -6.913714565580095e-05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08223499759143661,\n        \"min\": -0.1015371751289568,\n        \"max\": 0.1204148732761752,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0.1204148732761752,\n          -0.08785627835900958,\n          0.11121520502899307\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "77KgDiqf7jcn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fitted_model= ExponentialSmoothing(train_data['Loans_diff'],\n",
        "                                   trend='add', seasonal ='add', seasonal_periods=12).fit()"
      ],
      "metadata": {
        "id": "oNXPja3JmIMO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_predictions= fitted_model.forecast(16)"
      ],
      "metadata": {
        "id": "4xL1oyqCmwuI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "xXAK25DKm9z7",
        "outputId": "932f148e-8cce-4ff2-f20a-0cbb6e8cc102"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-11-01   -0.036200\n",
              "2023-12-01   -0.071144\n",
              "2024-01-01    0.040563\n",
              "2024-02-01    0.013047\n",
              "2024-03-01    0.228190\n",
              "2024-04-01   -0.049171\n",
              "2024-05-01   -0.057972\n",
              "2024-06-01    0.018387\n",
              "2024-07-01    0.005467\n",
              "2024-08-01   -0.072991\n",
              "2024-09-01    0.183028\n",
              "2024-10-01   -0.031534\n",
              "2024-11-01   -0.032477\n",
              "2024-12-01   -0.067420\n",
              "2025-01-01    0.044287\n",
              "2025-02-01    0.016771\n",
              "Freq: MS, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>-0.036200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>-0.071144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>0.040563</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>0.013047</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-01</th>\n",
              "      <td>0.228190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-01</th>\n",
              "      <td>-0.049171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-05-01</th>\n",
              "      <td>-0.057972</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-01</th>\n",
              "      <td>0.018387</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-01</th>\n",
              "      <td>0.005467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-08-01</th>\n",
              "      <td>-0.072991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>0.183028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>-0.031534</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>-0.032477</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>-0.067420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>0.044287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-01</th>\n",
              "      <td>0.016771</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data['Loans_diff'].plot(legend=True, label='Train data')\n",
        "test_data['Loans_diff'].plot(legend=True, label='Test data')\n",
        "test_predictions.plot(legend=True, label='Prediction')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "id": "rJ3_A3LgnRrv",
        "outputId": "85a36606-4f22-4976-b4d3-2623c2188786"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 115
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "test_data['Loans_diff'].plot(legend=True, label='Test data')\n",
        "test_predictions.plot(legend=True, label='Prediction')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "CVNDnXeCocUh",
        "outputId": "f18923cf-8216-44b9-84ca-3e54585071e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 116
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+EAAAHQCAYAAADOAGvHAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAA4bJJREFUeJzs3XV4VGfawOHfmYm7CyFECCTBtRQopRRa6qXuXupr7Vp3t93K7tfdrWzddevUqJeW4O6ehAghAeIhriPfH+/MJEASIiOR576uXDlMJue8tGEyz3kf0cxmsxkhhBBCCCGEEEI4nM7VCxBCCCGEEEIIIQYLCcKFEEIIIYQQQggnkSBcCCGEEEIIIYRwEgnChRBCCCGEEEIIJ5EgXAghhBBCCCGEcBIJwoUQQgghhBBCCCeRIFwIIYQQQgghhHASCcKFEEIIIYQQQggncXP1AuzNZDJx5MgR/P390TTN1csRQgghhBBCCDHAmc1mampqGDJkCDpd53vdAy4IP3LkCLGxsa5ehhBCCCGEEEKIQaagoIChQ4d2+pwBF4T7+/sD6i8fEBDg4tUIIYQQQgghhBjoqquriY2NtcWjnRlwQbg1BT0gIECCcCGEEEIIIYQQTtOVkmhpzCaEEEIIIYQQQjiJBOFCCCGEEEIIIYSTDLh0dCGEEEIIIYToC4xGIy0tLa5ehrATDw+Pk3Y+7woJwoUQQgghhBDCjsxmM0VFRVRWVrp6KcKOdDodCQkJeHh49Oo8EoQLIYQQQgghhB1ZA/CIiAh8fHy61KxL9G0mk4kjR45QWFjIsGHDevX/VIJwIYQQQgghhLATo9FoC8BDQ0NdvRxhR+Hh4Rw5cgSDwYC7u3uPzyON2YQQQgghhBDCTqw14D4+Pi5eibA3axq60Wjs1XkkCBdCCCGEEEIIO5MU9IHHXv9PJQgXQgghhBBCCCGcRIJwIYQQQgghhBDCSSQIF0IIIYQQQgjR5+Tl5aFpGjt27HD1UuxKgnAhhBBCCCGEGOQ0Tev045FHHunVuRcvXmy3tXbm5ptvZsGCBU65Vk/JiDIhhBBCCCGEGOQKCwttx59++ikPP/wwmZmZtsf8/PxcsawBSXbChRBCCCFEv3W4soGZ/1rG82lZrl6KEB0ym83UNxtc8mE2m7u0xqioKNtHYGAgmqYd89gnn3xCamoqXl5epKSk8PLLL9u+t7m5mfvuu4/o6Gi8vLyIi4vjiSeeACA+Ph6ASy65BE3TbH9uz6ZNm5g4cSJeXl5MmTKF7du3H/N1o9HIbbfdRkJCAt7e3iQnJ/Pcc8/Zvv7II4/w3nvv8fXXX9t28FesWAHAn/70J0aOHImPjw+JiYk89NBDtnFyziY74UIIIYQQot/6eW8RhysbeGN1LnefMRx3vewxib6nocXIqIeXuOTa+x6bj49H78K+Dz/8kIcffpgXX3yRiRMnsn37dhYuXIivry833XQTzz//PN988w2LFi1i2LBhFBQUUFBQAMDmzZuJiIjgnXfe4ZxzzkGv17d7jdraWi644ALOOussPvjgAw4cOMBvfvObY55jMpkYOnQon332GaGhoaxbt4477riD6OhorrzySn7/+9+Tnp5OdXU177zzDgAhISEA+Pv78+677zJkyBB2797NwoUL8ff3549//GOv/tv0hAThQgghhBCi30ovrAagptHA5rwKZgwPc/GKhBh4/v73v/P0009z6aWXApCQkMC+fft47bXXuOmmm8jPz2fEiBGcdtppaJpGXFyc7XvDw8MBCAoKIioqqsNrfPTRR5hMJt566y28vLwYPXo0hw4d4u6777Y9x93dnUcffdT254SEBNavX8+iRYu48sor8fPzw9vbm6amphOu9be//c12HB8fz+9//3s++eQTCcKFEEIIIYTojn2WIBwgLb1EgnDRJ3m769n32HyXXbs36urqyMnJ4bbbbmPhwoW2xw0GA4GBgYBqhnbWWWeRnJzMOeecwwUXXMDZZ5/dreukp6czbtw4vLy8bI9Nnz79hOe99NJLvP322+Tn59PQ0EBzczMTJkw46fk//fRTnn/+eXJycqitrcVgMBAQENCtNdqLBOFCCCGEEKJfajGa2F9Ua/tzWnoxfzs/FU3TXLgqIU6kaVqvU8JdpbZW/Rt74403mDZt2jFfs6aWT5o0iQMHDvDjjz+ydOlSrrzySubNm8fnn39u17V88skn/P73v+fpp59m+vTp+Pv78+STT7Jx48ZOv2/9+vVcd911PProo8yfP5/AwEA++eQTnn76abuur6v650+CEEL0ZUYDfHo9ePjCZW+CvBkUQgiHyCmtpdlowtdDT4vRTF55PTmldSRFSBdnIewlMjKSIUOGkJuby3XXXdfh8wICArjqqqu46qqruPzyyznnnHOo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4h3bJJkXLoQQvVFS00R5XTN6ncbIyJOPIvJy13NaktqNS0uXlHQh7O26664jLCyMiy++mNWrV3PgwAFWrFjBr3/9aw4dOgTAb37zG/71r3+xePFiMjIyuOeee06Y8d1WfHw8N910E7feeiuLFy+2nXPRokUAxMXFoWka3333HaWlpdTW1p5wjhEjRnDxxRezcOFC1qxZw86dO7n++uuJiYnh4osvdsh/i+5waBBeVlaG0WgkMvLYWsnIyEiKioq6dI4//elPDBky5JhAvq0nnnjCdpclMDCQ2NjYXq9bCCE61dIAexer466kolslngE6NyjPhooDjliZEEIMaNZU9MQwX7zc9V36nnmpqvxxqcwLF8LufHx8WLVqFcOGDePSSy8lNTWV2267jcbGRgICVLbKAw88wA033MBNN93E9OnT8ff355JLLun0vK+88gqXX34599xzDykpKSxcuJC6ujoAYmJiePTRR/nzn/9MZGQk9913X7vneOedd5g8eTIXXHAB06dPx2w288MPP5yQgu4KmtmBSe9HjhwhJiaGdevWMX36dNvjf/zjH1m5cuUx6QHt+de//sV//vMfVqxYwbhx49p9TlNTE01NTbY/V1dXExsbS1VVle1/vBBC2NXuz+GL2yBwGPxmJ+i6cT/znfPh4Bo47yk4ZaHj1iiEEAPQS8uzeXJJJhdPGMJzV0/s0veUVDdyyv+pssZNf51LhL+XI5coBI2NjRw4cICEhAS8vOTnbSDp7P9tdXU1gYGBXYpDHboTHhYWhl6vp7j42PSf4uJioqKiOv3ep556in/961/8/PPPHQbgoIbJBwQEHPMhhBAOtcvakO2q7gXgAElz1WeZFy6EEN3WnaZsVhEBXowfGgjActkNF0L0AQ4Nwj08PJg8efIxTdWsTdba7owf7z//+Q+PP/44P/30U6ft64UQwulqiiHb8po2rhup6FYjLKPKDqyClkb7rUsIIQaBro4nO97cVMuosnQJwoUQrufw7uj3338/b7zxBu+99x7p6encfffd1NXVccsttwBw44038uCDD9qe/+9//5uHHnqIt99+m/j4eIqKiigqKmq34F4IIZxuz+dgNkLMFAhL6v73R44BvyhoqYf8rjWoFEIIAbVNBvLKVU1oajd2wgHmWurC12SV0djScUdlIYRwBocH4VdddRVPPfUUDz/8MBMm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Qv+2iVjNJnYXVPDlunxATdlERETk3CgIFxEROYWYcCs9MxIAOOhsztYvU0G4iIiInD0F4SIiIqcxxDkvHKBlQiTp8ZE+XI2IiIgEOgXhIiIipzGkXXP319oFFxERkXOlIFxEROQ0erdOINxq/Lnsp3pwEREROUcKwkVERE4jIszCVf0zSIkN54Iuab5ejoiIiAQ4k8PhcPh6EU2ppKSE+Ph4iouLiYuL8/VyREREREREJMg1Jg7VTriIiIiIiIiIlygIFxEREREREfESBeEiIiIiIiIiXqIgXERERERERMRLFISLiIiIiIiIeImCcBEREREREREvURAuIiIiIiIi4iUKwkVERERERES8REG4iIiIiIiIiJcoCBcRERERERHxEgXhIiIiIiIiIl6iIFxERERERETESxSEi4iIiIiIiHiJgnARERERERERL1EQLiIiIiIiIuIlVl8voKk5HA4ASkpKfLwSERERERERCQWu+NMVj55O0AXhpaWlAGRkZPh4JSIiIiIiIhJKSktLiY+PP+1rTI6GhOoBxG6306FDB1asWIHJZPL1cjyqf//+LFu2zNfL8IpQONeSkhIyMjLYs2cPcXFxvl6OR4XCv0/QeQYbnWdwCZXzhNA5V51ncNF5Bo9QucZ1OBz07duXLVu2YDafvuo76HbCzWYzNpvtjHcfgoHFYgnqH+RjhdK5xsXFBf25hsq/T51ncNF5BpdQOU8InXPVeQYXnWfwCYVrXJvNdsYAHIK0MduUKVN8vQSvCJXzhNA611AQKv8+dZ7BRecZXELlPCF0zlXnGVx0nhKIGvrvM+jS0UUCVUlJCfHx8RQXFwf9XUIRERERCQ26xj1RUO6EiwSi8PBwHnnkEcLDw329FBERERGRJqFr3BNpJ1xERERERETES7QTLiIiIgKYTCY++eQTXy9DRESCnIJwERE5pZycHCwWC5dccomvlyLSaJMmTWL8+PG+XoaIiMhxAi4I37NnDzfddBMtWrTAZrPRpk0b7r77bo4cOdKg98+bNw+TyURRUZFnFyoiEgSmTZvGnXfeyYIFC9i/f/85Hau+vh673d5EKxMRCT66zhUJDQEVhO/YsYN+/fqxdetW3nnnHbZt28aLL77Id999x+DBgykoKPD1EkVEgkZZWRnvvfcet99+O5dccgmvv/66+znXhd4XX3xBjx49iIiIYNCg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Dl9//bVvTtxDFISLNJEXXngBgJEjRx73/ddee41JkyYB8PTTT2M2m5k4cSLV1dWMHTuW559/3v3aDz74gEOHDvH222/z9ttvu7/fpk0bcnNzPX0KIiIiIiIn8NZ1bk1NDffffz/79u0jKiqKHj168O233zJq1CiPnp+3aU64iIiIiIiIiJeoJlxERERERETESxSEi4iIiIiIiHiJgnARERERERERL1EQLiIiIiIiIuIlCsJFREREREREvERBuIiIiIiIiIiXKAgXERERERER8RIF4SIiIiIiIiJeoiBcREQkyEyaNAmTyYTJZCIsLIzU1FQuuOACpk+fjt1ub/BxXn/9dRISEjy3UBERkRCkIFxERCQIjRs3jry8PHJzc/nyyy8ZNWoUd999N5deeil1dXW+Xp6IiEjIUhAuIiIShMLDw0lLS6Nly5b06dOH3//+93z66ad8+eWXvP766wA89dRTdO/enejoaDIyMrjjjjsoKysDYN68efzqV7+iuLjYvav+6KOPAlBdXc0DDzxAy5YtiY6OZuDAgcybN883JyoiIhJgFISLiIiEiNGjR9OzZ08++ugjAMxmM8888wzr16/njTfeYM6cOfz2t78FYMiQIfzrX/8iLi6OvLw88vLyeOCBBwCYOnUqOTk5vPvuu6xZs4af//znjBs3jq1bt/rs3ERERAKFyeFwOHy9CBEREWk6kyZNoqioiE8++eSE566++mrWrFnDhg0bTnjugw8+4LbbbuPw4cOAURN+zz33UFRU5H7N7t27ycrKYvfu3bRo0cL9/fPPP58BAwbw17/+tcnPR0REJJhYfb0AERER8R6Hw4HJZALg22+/5fHHH2fTpk2UlJRQV1dHVVUVFRUVREVFnfT9a9eupb6+ng4dOhz3/erqapKSkjy+fhERkUCnIFxERCSEbNy4kbZt25Kbm8ull17K7bffzmOPPUZiYiI//PADkydPpqam5pRBeFlZGRaLhRUrVmCxWI57LiYmxhunICIiEtAUhIuIiISIOXPmsHbtWu69915WrFiB3W7nySefxGw2WsS8//77x73eZrNRX19/3Pd69+5NfX09Bw8eZNiwYV5bu4iISLBQEC4iIhKEqquryc/Pp76+ngMHDjB79mwef/xxLr30Um644QbWrVtHbW0tzz77LJdddhkLFy7kxRdfPO4YmZmZlJWV8d1339GzZ0+ioqLo0KED1113HTfccANPPvkkvXv35tChQ3z33Xf06NGDSy65xEdnLCIiEhjUHV1ERCQIzZ49m/T0dDIzMxk3bhxz587lmWee4dNPP8VisdCzZ0+eeuop/v73v9OtWzdmzJjB448/ftwxhgwZwm233cZVV11FcnIy//jHPwB47bXXuOGGG7j//vvp2LEj48ePZ9myZbRu3doXpyoiIhJQ1B1dRERERERExEu0Ey4iIiIiIiLiJQrCRURERERERLxEQbiIiIiIiIiIlygIFxEREREREfESBeEiIiIiIiIiXqIgXERERERERMRLFISLiIiIiIiIeImCcBEREREREREvURAuIiIiIiIi4iUKwkVERERERES8REG4iIiIiIiIiJcoCBcRERERERHxkv8PNSWq0rQp92wAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluating Predictions\n",
        "#y - real test value, y_pred - predicted value\n",
        "\n",
        "from sklearn.metrics import root_mean_squared_error, mean_absolute_error, mean_absolute_percentage_error"
      ],
      "metadata": {
        "id": "S62TFOHdojjm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DCg7jfGL8L2j"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "k__oNOm6pCiN",
        "outputId": "69f06061-d46a-4cfa-ad11-3807099e2e8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Loans  InflationRate  Loans_BoxCox  Loans_diff  \\\n",
              "count   16.000000      16.000000     16.000000   16.000000   \n",
              "mean   101.544375       0.023125      5.231330   -0.009559   \n",
              "std      7.229171       0.048952      0.090960    0.132490   \n",
              "min     91.100000      -0.060000      5.096008   -0.239195   \n",
              "25%     95.047500      -0.010000      5.149889   -0.086225   \n",
              "50%    101.525000       0.025000      5.233915   -0.009560   \n",
              "75%    106.430000       0.052500      5.294257    0.089588   \n",
              "max    115.090000       0.140000      5.394629    0.235067   \n",
              "\n",
              "       InflationRate_diff     EWMA12        SES  DES_add_12  TES_add_12  \n",
              "count        1.600000e+01  16.000000  16.000000   16.000000   16.000000  \n",
              "mean         8.673617e-19   0.001885   0.002577   -0.001173   -0.000952  \n",
              "std          6.303438e-02   0.015291   0.014745    0.000692    0.082235  \n",
              "min         -1.200000e-01  -0.022050  -0.022050   -0.002148   -0.101537  \n",
              "25%         -4.250000e-02  -0.014057  -0.006000   -0.001739   -0.084574  \n",
              "50%         -5.000000e-03   0.004072   0.004072   -0.001183   -0.014267  \n",
              "75%          4.250000e-02   0.012179   0.012179   -0.000626    0.056217  \n",
              "max          1.000000e-01   0.027018   0.027018   -0.000069    0.120415  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a147dfa9-4200-4a73-98ff-85861cce6423\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loans</th>\n",
              "      <th>InflationRate</th>\n",
              "      <th>Loans_BoxCox</th>\n",
              "      <th>Loans_diff</th>\n",
              "      <th>InflationRate_diff</th>\n",
              "      <th>EWMA12</th>\n",
              "      <th>SES</th>\n",
              "      <th>DES_add_12</th>\n",
              "      <th>TES_add_12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>16.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>1.600000e+01</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>16.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>101.544375</td>\n",
              "      <td>0.023125</td>\n",
              "      <td>5.231330</td>\n",
              "      <td>-0.009559</td>\n",
              "      <td>8.673617e-19</td>\n",
              "      <td>0.001885</td>\n",
              "      <td>0.002577</td>\n",
              "      <td>-0.001173</td>\n",
              "      <td>-0.000952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7.229171</td>\n",
              "      <td>0.048952</td>\n",
              "      <td>0.090960</td>\n",
              "      <td>0.132490</td>\n",
              "      <td>6.303438e-02</td>\n",
              "      <td>0.015291</td>\n",
              "      <td>0.014745</td>\n",
              "      <td>0.000692</td>\n",
              "      <td>0.082235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>91.100000</td>\n",
              "      <td>-0.060000</td>\n",
              "      <td>5.096008</td>\n",
              "      <td>-0.239195</td>\n",
              "      <td>-1.200000e-01</td>\n",
              "      <td>-0.022050</td>\n",
              "      <td>-0.022050</td>\n",
              "      <td>-0.002148</td>\n",
              "      <td>-0.101537</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>95.047500</td>\n",
              "      <td>-0.010000</td>\n",
              "      <td>5.149889</td>\n",
              "      <td>-0.086225</td>\n",
              "      <td>-4.250000e-02</td>\n",
              "      <td>-0.014057</td>\n",
              "      <td>-0.006000</td>\n",
              "      <td>-0.001739</td>\n",
              "      <td>-0.084574</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>101.525000</td>\n",
              "      <td>0.025000</td>\n",
              "      <td>5.233915</td>\n",
              "      <td>-0.009560</td>\n",
              "      <td>-5.000000e-03</td>\n",
              "      <td>0.004072</td>\n",
              "      <td>0.004072</td>\n",
              "      <td>-0.001183</td>\n",
              "      <td>-0.014267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>106.430000</td>\n",
              "      <td>0.052500</td>\n",
              "      <td>5.294257</td>\n",
              "      <td>0.089588</td>\n",
              "      <td>4.250000e-02</td>\n",
              "      <td>0.012179</td>\n",
              "      <td>0.012179</td>\n",
              "      <td>-0.000626</td>\n",
              "      <td>0.056217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>115.090000</td>\n",
              "      <td>0.140000</td>\n",
              "      <td>5.394629</td>\n",
              "      <td>0.235067</td>\n",
              "      <td>1.000000e-01</td>\n",
              "      <td>0.027018</td>\n",
              "      <td>0.027018</td>\n",
              "      <td>-0.000069</td>\n",
              "      <td>0.120415</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a147dfa9-4200-4a73-98ff-85861cce6423')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a147dfa9-4200-4a73-98ff-85861cce6423 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a147dfa9-4200-4a73-98ff-85861cce6423');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1587f3fe-648f-490d-9805-68fd6270022f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1587f3fe-648f-490d-9805-68fd6270022f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1587f3fe-648f-490d-9805-68fd6270022f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"test_data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Loans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42.416335113971314,\n        \"min\": 7.229171431314472,\n        \"max\": 115.09,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          101.544375,\n          101.525,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.646051458559055,\n        \"min\": -0.06,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.023125,\n          0.025,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_BoxCox\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.447576397273062,\n        \"min\": 0.09095960511385649,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.23132954545531,\n          5.2339149120985375,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loans_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.652984766887594,\n        \"min\": -0.23919454760586234,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.009559233373364506,\n          -0.009559978551353154,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InflationRate_diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.655334933594568,\n        \"min\": -0.12,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.673617379884035e-19,\n          -0.005,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EWMA12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.655646807623408,\n        \"min\": -0.0220497216322993,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0018854954140469346,\n          0.004072221348028755,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.655229449880843,\n        \"min\": -0.0220497216322993,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0025768192929192238,\n          0.004072221348028755,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.657169797789879,\n        \"min\": -0.0021477068870807262,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.0011733775066945216,\n          -0.001182657299997328,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TES_add_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.654473943697465,\n        \"min\": -0.1015371751289568,\n        \"max\": 16.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.0009522654561207062,\n          -0.014266829292012933,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Then calculate the error\n",
        "mean_absolute_error(test_data['Loans_diff'], test_predictions)  # Compare 'Loans_diff' with test_predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aANObTdQpH8z",
        "outputId": "e630f326-8c80-4db8-99a5-ef4266bf4710"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.13860911717431662"
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_absolute_percentage_error(test_data['Loans_diff'], test_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0cR9D1L1sZpg",
        "outputId": "2c2887d5-e526-4552-ce56-1f39fcdcd050"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.536672167451654"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import root_mean_squared_error, mean_absolute_error, mean_absolute_percentage_error, mean_squared_error # Import mean_squared_error\n",
        "np.sqrt(mean_squared_error(test_data['Loans_diff'], test_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XNhg05j0pMTd",
        "outputId": "ddb9132c-2862-4299-b041-74fc6b626eb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.1705832998871303)"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9bNUW63r8twk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Install conda in Colab\n",
        "!pip install -q condacolab\n",
        "import condacolab\n",
        "condacolab.install()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bkYulfHXy73r",
        "outputId": "f49e1cf8-0d52-4ec6-b84e-43b8c31a92a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "⏬ Downloading https://github.com/jaimergp/miniforge/releases/download/24.11.2-1_colab/Miniforge3-colab-24.11.2-1_colab-Linux-x86_64.sh...\n",
            "📦 Installing...\n",
            "📌 Adjusting configuration...\n",
            "🩹 Patching environment...\n",
            "⏲ Done in 0:00:17\n",
            "🔁 Restarting kernel...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 2: Use conda to install pmdarima\n",
        "!conda install -c conda-forge pmdarima -y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F_EzTZUL0Xbl",
        "outputId": "2247270f-d2ed-4d9d-ed3f-3680537154e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Channels:\n",
            " - conda-forge\n",
            "Platform: linux-64\n",
            "Collecting package metadata (repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n",
            "Solving environment: / \b\b- \b\b\\ \b\bdone\n",
            "\n",
            "## Package Plan ##\n",
            "\n",
            "  environment location: /usr/local\n",
            "\n",
            "  added / updated specs:\n",
            "    - pmdarima\n",
            "\n",
            "\n",
            "The following packages will be downloaded:\n",
            "\n",
            "    package                    |            build\n",
            "    ---------------------------|-----------------\n",
            "    ca-certificates-2025.4.26  |       hbd8a1cb_0         149 KB  conda-forge\n",
            "    certifi-2025.1.31          |     pyhd8ed1ab_0         159 KB  conda-forge\n",
            "    conda-24.11.3              |  py311h38be061_0         1.1 MB  conda-forge\n",
            "    cython-3.0.12              |  py311ha3e34f5_0         3.6 MB  conda-forge\n",
            "    joblib-1.5.0               |     pyhd8ed1ab_0         220 KB  conda-forge\n",
            "    libblas-3.9.0              |31_h59b9bed_openblas          16 KB  conda-forge\n",
            "    libcblas-3.9.0             |31_he106b2a_openblas          16 KB  conda-forge\n",
            "    libgfortran-14.2.0         |       h69a702a_2          52 KB  conda-forge\n",
            "    libgfortran5-14.2.0        |       hf1ad2bd_2         1.4 MB  conda-forge\n",
            "    liblapack-3.9.0            |31_h7ac8fdf_openblas          16 KB  conda-forge\n",
            "    libopenblas-0.3.29         |pthreads_h94d23a6_0         5.6 MB  conda-forge\n",
            "    numpy-2.2.5                |  py311h5d046bc_0         8.6 MB  conda-forge\n",
            "    openssl-3.5.0              |       h7b32b05_1         3.0 MB  conda-forge\n",
            "    pandas-2.2.3               |  py311h7db5c69_3        15.0 MB  conda-forge\n",
            "    patsy-1.0.1                |     pyhd8ed1ab_1         182 KB  conda-forge\n",
            "    pmdarima-2.0.4             |  py311h61187de_2         652 KB  conda-forge\n",
            "    python-dateutil-2.9.0.post0|     pyhff2d567_1         217 KB  conda-forge\n",
            "    python-tzdata-2025.2       |     pyhd8ed1ab_0         141 KB  conda-forge\n",
            "    pytz-2025.2                |     pyhd8ed1ab_0         185 KB  conda-forge\n",
            "    scikit-learn-1.6.1         |  py311h57cc02b_0        10.2 MB  conda-forge\n",
            "    scipy-1.15.2               |  py311h8f841c2_0        16.4 MB  conda-forge\n",
            "    six-1.17.0                 |     pyhd8ed1ab_0          16 KB  conda-forge\n",
            "    statsmodels-0.14.4         |  py311h9f3472d_0        11.7 MB  conda-forge\n",
            "    threadpoolctl-3.6.0        |     pyhecae5ae_0          23 KB  conda-forge\n",
            "    ------------------------------------------------------------\n",
            "                                           Total:        78.7 MB\n",
            "\n",
            "The following NEW packages will be INSTALLED:\n",
            "\n",
            "  cython             conda-forge/linux-64::cython-3.0.12-py311ha3e34f5_0 \n",
            "  joblib             conda-forge/noarch::joblib-1.5.0-pyhd8ed1ab_0 \n",
            "  libblas            conda-forge/linux-64::libblas-3.9.0-31_h59b9bed_openblas \n",
            "  libcblas           conda-forge/linux-64::libcblas-3.9.0-31_he106b2a_openblas \n",
            "  libgfortran        conda-forge/linux-64::libgfortran-14.2.0-h69a702a_2 \n",
            "  libgfortran5       conda-forge/linux-64::libgfortran5-14.2.0-hf1ad2bd_2 \n",
            "  liblapack          conda-forge/linux-64::liblapack-3.9.0-31_h7ac8fdf_openblas \n",
            "  libopenblas        conda-forge/linux-64::libopenblas-0.3.29-pthreads_h94d23a6_0 \n",
            "  numpy              conda-forge/linux-64::numpy-2.2.5-py311h5d046bc_0 \n",
            "  pandas             conda-forge/linux-64::pandas-2.2.3-py311h7db5c69_3 \n",
            "  patsy              conda-forge/noarch::patsy-1.0.1-pyhd8ed1ab_1 \n",
            "  pmdarima           conda-forge/linux-64::pmdarima-2.0.4-py311h61187de_2 \n",
            "  python-dateutil    conda-forge/noarch::python-dateutil-2.9.0.post0-pyhff2d567_1 \n",
            "  python-tzdata      conda-forge/noarch::python-tzdata-2025.2-pyhd8ed1ab_0 \n",
            "  pytz               conda-forge/noarch::pytz-2025.2-pyhd8ed1ab_0 \n",
            "  scikit-learn       conda-forge/linux-64::scikit-learn-1.6.1-py311h57cc02b_0 \n",
            "  scipy              conda-forge/linux-64::scipy-1.15.2-py311h8f841c2_0 \n",
            "  six                conda-forge/noarch::six-1.17.0-pyhd8ed1ab_0 \n",
            "  statsmodels        conda-forge/linux-64::statsmodels-0.14.4-py311h9f3472d_0 \n",
            "  threadpoolctl      conda-forge/noarch::threadpoolctl-3.6.0-pyhecae5ae_0 \n",
            "\n",
            "The following packages will be UPDATED:\n",
            "\n",
            "  ca-certificates    conda-forge/linux-64::ca-certificates~ --> conda-forge/noarch::ca-certificates-2025.4.26-hbd8a1cb_0 \n",
            "  certifi                           2024.12.14-pyhd8ed1ab_0 --> 2025.1.31-pyhd8ed1ab_0 \n",
            "  conda                             24.11.2-py311h38be061_1 --> 24.11.3-py311h38be061_0 \n",
            "  openssl                                  3.4.0-h7b32b05_1 --> 3.5.0-h7b32b05_1 \n",
            "\n",
            "\n",
            "\n",
            "Downloading and Extracting Packages:\n",
            "scipy-1.15.2         | 16.4 MB   | :   0% 0/1 [00:00<?, ?it/s]\n",
            "pandas-2.2.3         | 15.0 MB   | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.0.12        | 3.6 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.1.31    | 159 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | :   0% 0/1 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | :  11% 0.11054092199405739/1 [00:00<00:00,  1.10it/s]\n",
            "pandas-2.2.3         | 15.0 MB   | :  16% 0.15559609095109367/1 [00:00<00:00,  1.55it/s]\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :   0% 0.0015245176191396935/1 [00:00<01:06, 66.30s/it]\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | :  15% 0.14656773438839107/1 [00:00<00:00,  1.45it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :   0% 0.0013329496547095777/1 [00:00<01:41, 101.43s/it]\u001b[A\u001b[A\n",
            "scipy-1.15.2         | 16.4 MB   | :  33% 0.3297168880167574/1 [00:00<00:00,  1.72it/s] \n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :  29% 0.28965834763654175/1 [00:00<00:00,  1.69it/s]  \u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | :  53% 0.5265581568768124/1 [00:00<00:00,  2.82it/s] \u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :  23% 0.23060029026475695/1 [00:00<00:00,  1.18it/s]   \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :  60% 0.6006599419410392/1 [00:00<00:00,  2.34it/s] \u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | :  63% 0.6265614400715181/1 [00:00<00:00,  2.08it/s]\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | :  50% 0.5021988438867953/1 [00:00<00:00,  1.63it/s]\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :  49% 0.48785957362370547/1 [00:00<00:00,  1.77it/s]\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | :  97% 0.9726422410111244/1 [00:00<00:00,  2.88it/s]\u001b[A\u001b[A\u001b[A\n",
            "scipy-1.15.2         | 16.4 MB   | :  74% 0.7442453454944726/1 [00:00<00:00,  1.93it/s]\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | :  82% 0.8224299369558095/1 [00:00<00:00,  2.36it/s] \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | : 100% 1.0/1 [00:00<00:00,  3.44it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | :   0% 0.0027679004637044184/1 [00:00<03:06, 186.65s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | :  57% 0.5701874955231102/1 [00:00<00:00,  1.17it/s]    \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scikit-learn-1.6.1   | 10.2 MB   | : 100% 1.0/1 [00:00<00:00,  2.88it/s]               \u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | : 100% 1.0/1 [00:00<00:00,  2.33it/s]               \u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.0.12        | 3.6 MB    | :   0% 0.004370146966996908/1 [00:00<02:51, 172.58s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | : 100% 1.0/1 [00:00<00:00,  1.04s/it]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | : 100% 1.0/1 [00:00<00:00,  1.47it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.0.12        | 3.6 MB    | :  43% 0.428274402765697/1 [00:00<00:00,  1.49s/it]    \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | : 100% 1.0/1 [00:00<00:00,  2.36it/s]               \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | : 100% 1.0/1 [00:00<00:00,  1.47it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | :   1% 0.011206734985068174/1 [00:00<01:19, 80.13s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | : 100% 1.0/1 [00:00<00:00,  1.49it/s]                  \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | : 100% 1.0/1 [00:00<00:00,  1.49it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | :   1% 0.01364371451460054/1 [00:00<01:05, 66.27s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | :   2% 0.024556943811602196/1 [00:00<00:36, 37.01s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | :   7% 0.07279836488047632/1 [00:00<00:11, 12.90s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | : 100% 1.0/1 [00:00<00:00, 12.90s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | : 100% 1.0/1 [00:00<00:00, 66.27s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | : 100% 1.0/1 [00:00<00:00, 37.01s/it]                 \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | : 100% 1.0/1 [00:00<00:00, 80.13s/it]                 \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.0.12        | 3.6 MB    | :  66% 0.6555220450495363/1 [00:00<00:00,  1.09s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | :   7% 0.07363430035280107/1 [00:01<00:12, 13.63s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | :   9% 0.0878056100410517/1 [00:01<00:10, 11.43s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | :   9% 0.08668095124725551/1 [00:01<00:10, 11.64s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.1.31    | 159 KB    | :  10% 0.1006876801396255/1 [00:01<00:09, 10.04s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | : 100% 1.0/1 [00:01<00:00, 11.43s/it]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | : 100% 1.0/1 [00:01<00:00, 13.63s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.1.31    | 159 KB    | : 100% 1.0/1 [00:01<00:00, 10.04s/it]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | : 100% 1.0/1 [00:01<00:00, 11.64s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | :  11% 0.10758915965669182/1 [00:01<00:08,  9.76s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | : 100% 1.0/1 [00:01<00:00,  9.76s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | :  11% 0.11365149833518313/1 [00:01<00:08,  9.34s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | : 100% 1.0/1 [00:01<00:00,  9.34s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | :  30% 0.30491504289728844/1 [00:01<00:02,  3.56s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | : 100% 1.0/1 [00:01<00:00,  3.56s/it]                \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.0.12        | 3.6 MB    | : 100% 1.0/1 [00:01<00:00,  1.32it/s]               \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.0.12        | 3.6 MB    | : 100% 1.0/1 [00:01<00:00,  1.32it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "numpy-2.2.5          | 8.6 MB    | : 100% 1.0/1 [00:02<00:00,  3.44it/s]\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "scipy-1.15.2         | 16.4 MB   | : 100% 1.0/1 [00:05<00:00,  1.04s/it]\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libopenblas-0.3.29   | 5.6 MB    | : 100% 1.0/1 [00:05<00:00,  1.47it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "pandas-2.2.3         | 15.0 MB   | : 100% 1.0/1 [00:06<00:00,  2.33it/s]\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "openssl-3.5.0        | 3.0 MB    | : 100% 1.0/1 [00:06<00:00,  1.49it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | : 100% 1.0/1 [00:06<00:00,  6.82s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "joblib-1.5.0         | 220 KB    | : 100% 1.0/1 [00:06<00:00,  6.82s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | : 100% 1.0/1 [00:07<00:00,  7.13s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "conda-24.11.3        | 1.1 MB    | : 100% 1.0/1 [00:07<00:00,  7.13s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | : 100% 1.0/1 [00:07<00:00,  7.36s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pmdarima-2.0.4       | 652 KB    | : 100% 1.0/1 [00:07<00:00,  7.36s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | : 100% 1.0/1 [00:07<00:00,  7.47s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran5-14.2.0  | 1.4 MB    | : 100% 1.0/1 [00:07<00:00,  7.47s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | : 100% 1.0/1 [00:07<00:00,  7.66s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "patsy-1.0.1          | 182 KB    | : 100% 1.0/1 [00:07<00:00,  7.66s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | : 100% 1.0/1 [00:07<00:00,  7.67s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-dateutil-2.9. | 217 KB    | : 100% 1.0/1 [00:07<00:00,  7.67s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.1.31    | 159 KB    | : 100% 1.0/1 [00:07<00:00,  7.76s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "certifi-2025.1.31    | 159 KB    | : 100% 1.0/1 [00:07<00:00,  7.76s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | : 100% 1.0/1 [00:08<00:00,  8.16s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "pytz-2025.2          | 185 KB    | : 100% 1.0/1 [00:08<00:00,  8.16s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | : 100% 1.0/1 [00:08<00:00,  8.22s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "ca-certificates-2025 | 149 KB    | : 100% 1.0/1 [00:08<00:00,  8.22s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "statsmodels-0.14.4   | 11.7 MB   | : 100% 1.0/1 [00:08<00:00,  2.36it/s]\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | : 100% 1.0/1 [00:08<00:00,  9.01s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "libgfortran-14.2.0   | 52 KB     | : 100% 1.0/1 [00:08<00:00,  9.01s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " ... (more hidden) ...\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | : 100% 1.0/1 [00:08<00:00,  8.79s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "python-tzdata-2025.2 | 141 KB    | : 100% 1.0/1 [00:08<00:00,  8.79s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "cython-3.0.12        | 3.6 MB    | : 100% 1.0/1 [00:09<00:00,  1.32it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \n",
            "                                                                        \u001b[A\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "                                                                        \u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "\u001b[A\n",
            "\n",
            "\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\u001b[A\u001b[A\u001b[A\n",
            "\n",
            "\n",
            "\n",
            "\u001b[A\u001b[A\u001b[A\u001b[A\n",
            "Preparing transaction: - \b\b\\ \b\b| \b\b/ \b\bdone\n",
            "Verifying transaction: \\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bdone\n",
            "Executing transaction: | \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bdone\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pmdarima"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "Vb1y9zMP06Vv",
        "outputId": "7f14ecbb-5e44-450a-d64e-97efd3430385"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'pmdarima'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-111-0f67c249a471>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpmdarima\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pmdarima'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pmdarima import auto_arima"
      ],
      "metadata": {
        "id": "xzCv-JJ10YUS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "metadata": {
        "id": "zZGKYuZc1WiB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#ARIMA"
      ],
      "metadata": {
        "id": "dGqA4ZI_8oJD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfAverage_Monthly_TransactionLoan01 = dfAverage_Monthly_TransactionLoan.copy()"
      ],
      "metadata": {
        "id": "EhKWal8z31LS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# NON SEASONAL ARIMA    (ARIMA)\n",
        "# set seasonal = false"
      ],
      "metadata": {
        "id": "mjnuKeVN7bXX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Automatically finds the best non-seasonal ARIMA model for the \"Loans_diff\" time series using the auto_arima() function.\n",
        "\n",
        "stepwise_fit_ns = auto_arima(dfAverage_Monthly_TransactionLoan01['Loans_diff'], start_p=0, start_q=0, max_p=5, max_q=4, seasonal=False, trace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NbQ1rd5C81Ec",
        "outputId": "3ff6efb5-2b33-4618-b667-7f12aec280e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Performing stepwise search to minimize aic\n",
            " ARIMA(0,0,0)(0,0,0)[0]             : AIC=-84.944, Time=0.11 sec\n",
            " ARIMA(1,0,0)(0,0,0)[0]             : AIC=-94.375, Time=0.03 sec\n",
            " ARIMA(0,0,1)(0,0,0)[0]             : AIC=-107.181, Time=0.04 sec\n",
            " ARIMA(1,0,1)(0,0,0)[0]             : AIC=-105.977, Time=0.06 sec\n",
            " ARIMA(0,0,2)(0,0,0)[0]             : AIC=-106.056, Time=0.08 sec\n",
            " ARIMA(1,0,2)(0,0,0)[0]             : AIC=-103.983, Time=0.22 sec\n",
            " ARIMA(0,0,1)(0,0,0)[0] intercept   : AIC=-105.328, Time=0.08 sec\n",
            "\n",
            "Best model:  ARIMA(0,0,1)(0,0,0)[0]          \n",
            "Total fit time: 0.625 seconds\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Detailed summary of the best ARIMA model selected by auto_arima() for ARIMA\n",
        "stepwise_fit_ns.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "fZKH2Qqz-HP7",
        "outputId": "13c04354-3acf-4d0b-de76-688558079f26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                               SARIMAX Results                                \n",
              "==============================================================================\n",
              "Dep. Variable:                      y   No. Observations:                   71\n",
              "Model:               SARIMAX(0, 0, 1)   Log Likelihood                  55.590\n",
              "Date:                Mon, 05 May 2025   AIC                           -107.181\n",
              "Time:                        15:02:56   BIC                           -102.655\n",
              "Sample:                    03-01-2019   HQIC                          -105.381\n",
              "                         - 01-01-2025                                         \n",
              "Covariance Type:                  opg                                         \n",
              "==============================================================================\n",
              "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "ma.L1         -0.7491      0.083     -9.058      0.000      -0.911      -0.587\n",
              "sigma2         0.0121      0.002      5.258      0.000       0.008       0.017\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   0.83   Jarque-Bera (JB):                 0.69\n",
              "Prob(Q):                              0.36   Prob(JB):                         0.71\n",
              "Heteroskedasticity (H):               0.52   Skew:                             0.09\n",
              "Prob(H) (two-sided):                  0.11   Kurtosis:                         2.55\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>71</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>           <td>SARIMAX(0, 0, 1)</td> <th>  Log Likelihood     </th>  <td>55.590</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>            <td>Mon, 05 May 2025</td> <th>  AIC                </th> <td>-107.181</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                <td>15:02:56</td>     <th>  BIC                </th> <td>-102.655</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>             <td>03-01-2019</td>    <th>  HQIC               </th> <td>-105.381</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                   <td>- 01-01-2025</td>   <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>  <td>   -0.7491</td> <td>    0.083</td> <td>   -9.058</td> <td> 0.000</td> <td>   -0.911</td> <td>   -0.587</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th> <td>    0.0121</td> <td>    0.002</td> <td>    5.258</td> <td> 0.000</td> <td>    0.008</td> <td>    0.017</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>0.83</td> <th>  Jarque-Bera (JB):  </th> <td>0.69</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.36</td> <th>  Prob(JB):          </th> <td>0.71</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.52</td> <th>  Skew:              </th> <td>0.09</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.11</td> <th>  Kurtosis:          </th> <td>2.55</td>\n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &        y         & \\textbf{  No. Observations:  } &     71      \\\\\n\\textbf{Model:}                  & SARIMAX(0, 0, 1) & \\textbf{  Log Likelihood     } &   55.590    \\\\\n\\textbf{Date:}                   & Mon, 05 May 2025 & \\textbf{  AIC                } &  -107.181   \\\\\n\\textbf{Time:}                   &     15:02:56     & \\textbf{  BIC                } &  -102.655   \\\\\n\\textbf{Sample:}                 &    03-01-2019    & \\textbf{  HQIC               } &  -105.381   \\\\\n\\textbf{}                        &   - 01-01-2025   & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{ma.L1}  &      -0.7491  &        0.083     &    -9.058  &         0.000        &       -0.911    &       -0.587     \\\\\n\\textbf{sigma2} &       0.0121  &        0.002     &     5.258  &         0.000        &        0.008    &        0.017     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.83 & \\textbf{  Jarque-Bera (JB):  } & 0.69  \\\\\n\\textbf{Prob(Q):}                & 0.36 & \\textbf{  Prob(JB):          } & 0.71  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.52 & \\textbf{  Skew:              } & 0.09  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.11 & \\textbf{  Kurtosis:          } & 2.55  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.arima.model import ARIMA, ARIMAResults"
      ],
      "metadata": {
        "id": "7C3gfz_t-OyY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Build ARIMA model with its parameters\n",
        "#AR=0\n",
        "#I=0\n",
        "#MA=1\n",
        "\n",
        "arima_model = ARIMA(dfAverage_Monthly_TransactionLoan01['Loans_diff'], order=(0,0,1))"
      ],
      "metadata": {
        "id": "KDAvC51Y-fvX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arima_model_fit = arima_model.fit()"
      ],
      "metadata": {
        "id": "wOyvvgfj_F7F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arima_model_fit.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "AwWs-Z9h_U47",
        "outputId": "41339638-742f-4f1c-ae4c-be9b66e8d25c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                               SARIMAX Results                                \n",
              "==============================================================================\n",
              "Dep. Variable:             Loans_diff   No. Observations:                   71\n",
              "Model:                 ARIMA(0, 0, 1)   Log Likelihood                  55.664\n",
              "Date:                Sat, 10 May 2025   AIC                           -105.328\n",
              "Time:                        16:08:34   BIC                            -98.540\n",
              "Sample:                    03-01-2019   HQIC                          -102.629\n",
              "                         - 01-01-2025                                         \n",
              "Covariance Type:                  opg                                         \n",
              "==============================================================================\n",
              "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "const          0.0013      0.004      0.372      0.710      -0.006       0.008\n",
              "ma.L1         -0.7545      0.082     -9.208      0.000      -0.915      -0.594\n",
              "sigma2         0.0121      0.002      5.240      0.000       0.008       0.017\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   0.90   Jarque-Bera (JB):                 0.68\n",
              "Prob(Q):                              0.34   Prob(JB):                         0.71\n",
              "Heteroskedasticity (H):               0.50   Skew:                             0.09\n",
              "Prob(H) (two-sided):                  0.10   Kurtosis:                         2.55\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>      <td>Loans_diff</td>    <th>  No. Observations:  </th>    <td>71</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>            <td>ARIMA(0, 0, 1)</td>  <th>  Log Likelihood     </th>  <td>55.664</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>            <td>Sat, 10 May 2025</td> <th>  AIC                </th> <td>-105.328</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                <td>16:08:34</td>     <th>  BIC                </th>  <td>-98.540</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>             <td>03-01-2019</td>    <th>  HQIC               </th> <td>-102.629</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                   <td>- 01-01-2025</td>   <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th>  <td>    0.0013</td> <td>    0.004</td> <td>    0.372</td> <td> 0.710</td> <td>   -0.006</td> <td>    0.008</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>  <td>   -0.7545</td> <td>    0.082</td> <td>   -9.208</td> <td> 0.000</td> <td>   -0.915</td> <td>   -0.594</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th> <td>    0.0121</td> <td>    0.002</td> <td>    5.240</td> <td> 0.000</td> <td>    0.008</td> <td>    0.017</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>0.90</td> <th>  Jarque-Bera (JB):  </th> <td>0.68</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.34</td> <th>  Prob(JB):          </th> <td>0.71</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.50</td> <th>  Skew:              </th> <td>0.09</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.10</td> <th>  Kurtosis:          </th> <td>2.55</td>\n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &   Loans\\_diff    & \\textbf{  No. Observations:  } &     71      \\\\\n\\textbf{Model:}                  &  ARIMA(0, 0, 1)  & \\textbf{  Log Likelihood     } &   55.664    \\\\\n\\textbf{Date:}                   & Sat, 10 May 2025 & \\textbf{  AIC                } &  -105.328   \\\\\n\\textbf{Time:}                   &     16:08:34     & \\textbf{  BIC                } &  -98.540    \\\\\n\\textbf{Sample:}                 &    03-01-2019    & \\textbf{  HQIC               } &  -102.629   \\\\\n\\textbf{}                        &   - 01-01-2025   & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}  &       0.0013  &        0.004     &     0.372  &         0.710        &       -0.006    &        0.008     \\\\\n\\textbf{ma.L1}  &      -0.7545  &        0.082     &    -9.208  &         0.000        &       -0.915    &       -0.594     \\\\\n\\textbf{sigma2} &       0.0121  &        0.002     &     5.240  &         0.000        &        0.008    &        0.017     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.90 & \\textbf{  Jarque-Bera (JB):  } & 0.68  \\\\\n\\textbf{Prob(Q):}                & 0.34 & \\textbf{  Prob(JB):          } & 0.71  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.50 & \\textbf{  Skew:              } & 0.09  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.10 & \\textbf{  Kurtosis:          } & 2.55  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# check length of dependent variable\n",
        "len(dfAverage_Monthly_TransactionLoan01['Loans_diff'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qA7V7wSBAygW",
        "outputId": "0fa16d13-0e42-4f0c-edc5-d66a13efe8bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "71"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split data into train and test sets\n",
        "train_data = dfAverage_Monthly_TransactionLoan01['Loans_diff'].iloc[:56]\n",
        "test_data = dfAverage_Monthly_TransactionLoan01['Loans_diff'].iloc[55:]"
      ],
      "metadata": {
        "id": "s1VCmZkABBC5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train model on the train data\n",
        "model= ARIMA(train_data, order=(0,0,1))\n",
        "Arima_results= model.fit()\n",
        "Arima_results.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "4cdAqDUuCXD8",
        "outputId": "4294063d-d639-4e0a-bef7-075ebf9a23e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                               SARIMAX Results                                \n",
              "==============================================================================\n",
              "Dep. Variable:             Loans_diff   No. Observations:                   56\n",
              "Model:                 ARIMA(0, 0, 1)   Log Likelihood                  42.528\n",
              "Date:                Sat, 10 May 2025   AIC                            -79.055\n",
              "Time:                        16:09:42   BIC                            -72.979\n",
              "Sample:                    03-01-2019   HQIC                           -76.700\n",
              "                         - 10-01-2023                                         \n",
              "Covariance Type:                  opg                                         \n",
              "==============================================================================\n",
              "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "const          0.0023      0.005      0.471      0.637      -0.007       0.012\n",
              "ma.L1         -0.7232      0.103     -7.049      0.000      -0.924      -0.522\n",
              "sigma2         0.0127      0.003      4.775      0.000       0.007       0.018\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   1.20   Jarque-Bera (JB):                 0.48\n",
              "Prob(Q):                              0.27   Prob(JB):                         0.79\n",
              "Heteroskedasticity (H):               0.36   Skew:                             0.14\n",
              "Prob(H) (two-sided):                  0.03   Kurtosis:                         2.64\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>      <td>Loans_diff</td>    <th>  No. Observations:  </th>   <td>56</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>            <td>ARIMA(0, 0, 1)</td>  <th>  Log Likelihood     </th> <td>42.528</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>            <td>Sat, 10 May 2025</td> <th>  AIC                </th> <td>-79.055</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                <td>16:09:42</td>     <th>  BIC                </th> <td>-72.979</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>             <td>03-01-2019</td>    <th>  HQIC               </th> <td>-76.700</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                   <td>- 10-01-2023</td>   <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th>  <td>    0.0023</td> <td>    0.005</td> <td>    0.471</td> <td> 0.637</td> <td>   -0.007</td> <td>    0.012</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>  <td>   -0.7232</td> <td>    0.103</td> <td>   -7.049</td> <td> 0.000</td> <td>   -0.924</td> <td>   -0.522</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th> <td>    0.0127</td> <td>    0.003</td> <td>    4.775</td> <td> 0.000</td> <td>    0.007</td> <td>    0.018</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>1.20</td> <th>  Jarque-Bera (JB):  </th> <td>0.48</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.27</td> <th>  Prob(JB):          </th> <td>0.79</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.36</td> <th>  Skew:              </th> <td>0.14</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.03</td> <th>  Kurtosis:          </th> <td>2.64</td>\n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &   Loans\\_diff    & \\textbf{  No. Observations:  } &     56      \\\\\n\\textbf{Model:}                  &  ARIMA(0, 0, 1)  & \\textbf{  Log Likelihood     } &   42.528    \\\\\n\\textbf{Date:}                   & Sat, 10 May 2025 & \\textbf{  AIC                } &  -79.055    \\\\\n\\textbf{Time:}                   &     16:09:42     & \\textbf{  BIC                } &  -72.979    \\\\\n\\textbf{Sample:}                 &    03-01-2019    & \\textbf{  HQIC               } &  -76.700    \\\\\n\\textbf{}                        &   - 10-01-2023   & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}  &       0.0023  &        0.005     &     0.471  &         0.637        &       -0.007    &        0.012     \\\\\n\\textbf{ma.L1}  &      -0.7232  &        0.103     &    -7.049  &         0.000        &       -0.924    &       -0.522     \\\\\n\\textbf{sigma2} &       0.0127  &        0.003     &     4.775  &         0.000        &        0.007    &        0.018     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 1.20 & \\textbf{  Jarque-Bera (JB):  } & 0.48  \\\\\n\\textbf{Prob(Q):}                & 0.27 & \\textbf{  Prob(JB):          } & 0.79  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.36 & \\textbf{  Skew:              } & 0.14  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.03 & \\textbf{  Kurtosis:          } & 2.64  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Make predictions on the trained model\n",
        "start = len(train_data)\n",
        "end =len(train_data) + len(test_data)-1\n",
        "\n",
        "test_predictions = Arima_results.predict(start=start, end=end, typ = 'levels').rename('ARIMA Predictions')"
      ],
      "metadata": {
        "id": "lyuKXo9bAO6T"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "JxpAqdWMBoH8",
        "outputId": "60c8dc07-73fa-4e0f-eca1-471400608dde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-11-01   -0.045162\n",
              "2023-12-01    0.002334\n",
              "2024-01-01    0.002334\n",
              "2024-02-01    0.002334\n",
              "2024-03-01    0.002334\n",
              "2024-04-01    0.002334\n",
              "2024-05-01    0.002334\n",
              "2024-06-01    0.002334\n",
              "2024-07-01    0.002334\n",
              "2024-08-01    0.002334\n",
              "2024-09-01    0.002334\n",
              "2024-10-01    0.002334\n",
              "2024-11-01    0.002334\n",
              "2024-12-01    0.002334\n",
              "2025-01-01    0.002334\n",
              "2025-02-01    0.002334\n",
              "Freq: MS, Name: ARIMA Predictions, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ARIMA Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>-0.045162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-05-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-08-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-01</th>\n",
              "      <td>0.002334</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data.plot(legend=True, figsize=(10,5))\n",
        "test_predictions.plot(legend=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "id": "sWRf9kB4CvA0",
        "outputId": "68fe87a4-8ca5-49fc-d3ca-33bd07eaac3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 134
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluating Predictions\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error"
      ],
      "metadata": {
        "id": "AB_cM25ODHLr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# For MAE\n",
        "mean_absolute_error(test_data, test_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w04zQGihDR11",
        "outputId": "61011f59-79e3-4ce2-d8bc-7383d1f90215"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.1095065898726392"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For RMSE\n",
        "np.sqrt(mean_squared_error(test_data, test_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KF8FDpxDDShx",
        "outputId": "f2d3f7d2-1c71-47eb-cbf2-dab9ac2b1456"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.12939745979318423)"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  For MAPE\n",
        "mean_absolute_percentage_error(test_data, test_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ta9FZZelDS51",
        "outputId": "d5a9465b-34db-4e55-84d6-d3b11977c640"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.904396597955993"
            ]
          },
          "metadata": {},
          "execution_count": 138
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mK6zhIJn9qyI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# SEASONAL ARIMA  (SARIMA)\n",
        "# set seasonal = true"
      ],
      "metadata": {
        "id": "Y5g_WIfODTLA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.statespace.sarimax import SARIMAX"
      ],
      "metadata": {
        "id": "nQ-92dpoEzAc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#help (auto arima)\n",
        "#Automatically finds the best seasonal ARIMA model for the \"Loans_diff\" time series using the auto_arima() function.\n",
        "stepwise_fit_s= auto_arima(dfAverage_Monthly_TransactionLoan01['Loans_diff'],start_p=0, start_q=0, max_p=5, max_q=3,\n",
        "                         seasonal=True, trace=True, m=12)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JTWFbg9zE51m",
        "outputId": "286a4fd4-dd1e-4891-9cb8-33f2d0307a39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Performing stepwise search to minimize aic\n",
            " ARIMA(0,0,0)(1,0,1)[12] intercept   : AIC=inf, Time=0.38 sec\n",
            " ARIMA(0,0,0)(0,0,0)[12] intercept   : AIC=-82.962, Time=0.04 sec\n",
            " ARIMA(1,0,0)(1,0,0)[12] intercept   : AIC=-105.936, Time=0.24 sec\n",
            " ARIMA(0,0,1)(0,0,1)[12] intercept   : AIC=-112.312, Time=0.27 sec\n",
            " ARIMA(0,0,0)(0,0,0)[12]             : AIC=-84.944, Time=0.02 sec\n",
            " ARIMA(0,0,1)(0,0,0)[12] intercept   : AIC=-105.328, Time=0.08 sec\n",
            " ARIMA(0,0,1)(1,0,1)[12] intercept   : AIC=inf, Time=0.52 sec\n",
            " ARIMA(0,0,1)(0,0,2)[12] intercept   : AIC=-112.155, Time=0.48 sec\n",
            " ARIMA(0,0,1)(1,0,0)[12] intercept   : AIC=-114.884, Time=0.27 sec\n",
            " ARIMA(0,0,1)(2,0,0)[12] intercept   : AIC=-114.306, Time=1.08 sec\n",
            " ARIMA(0,0,1)(2,0,1)[12] intercept   : AIC=-118.164, Time=1.02 sec\n",
            " ARIMA(0,0,1)(2,0,2)[12] intercept   : AIC=inf, Time=1.29 sec\n",
            " ARIMA(0,0,1)(1,0,2)[12] intercept   : AIC=inf, Time=1.06 sec\n",
            " ARIMA(0,0,0)(2,0,1)[12] intercept   : AIC=inf, Time=1.37 sec\n",
            " ARIMA(1,0,1)(2,0,1)[12] intercept   : AIC=-114.642, Time=2.87 sec\n",
            " ARIMA(0,0,2)(2,0,1)[12] intercept   : AIC=-114.205, Time=0.99 sec\n",
            " ARIMA(1,0,0)(2,0,1)[12] intercept   : AIC=-110.400, Time=1.10 sec\n",
            " ARIMA(1,0,2)(2,0,1)[12] intercept   : AIC=-102.930, Time=0.66 sec\n",
            " ARIMA(0,0,1)(2,0,1)[12]             : AIC=inf, Time=0.87 sec\n",
            "\n",
            "Best model:  ARIMA(0,0,1)(2,0,1)[12] intercept\n",
            "Total fit time: 14.638 seconds\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Detailed summary of the best ARIMA model selected by auto_arima() for SARIMA.\n",
        "stepwise_fit_s.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "87WKKqXBFiFg",
        "outputId": "d16ca13b-5164-4ed5-f78c-80010afe86f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                                     SARIMAX Results                                      \n",
              "==========================================================================================\n",
              "Dep. Variable:                                  y   No. Observations:                   71\n",
              "Model:             SARIMAX(0, 0, 1)x(2, 0, 1, 12)   Log Likelihood                  65.082\n",
              "Date:                            Tue, 06 May 2025   AIC                           -118.164\n",
              "Time:                                    07:41:31   BIC                           -104.588\n",
              "Sample:                                03-01-2019   HQIC                          -112.765\n",
              "                                     - 01-01-2025                                         \n",
              "Covariance Type:                              opg                                         \n",
              "==============================================================================\n",
              "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "intercept   7.417e-05      0.000      0.185      0.853      -0.001       0.001\n",
              "ma.L1         -0.6994      0.099     -7.082      0.000      -0.893      -0.506\n",
              "ar.S.L12       1.0111      0.392      2.579      0.010       0.243       1.779\n",
              "ar.S.L24      -0.0472      0.263     -0.179      0.858      -0.564       0.469\n",
              "ma.S.L12      -0.7779      0.541     -1.438      0.151      -1.838       0.283\n",
              "sigma2         0.0079      0.002      3.756      0.000       0.004       0.012\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   0.17   Jarque-Bera (JB):                 1.76\n",
              "Prob(Q):                              0.68   Prob(JB):                         0.41\n",
              "Heteroskedasticity (H):               0.36   Skew:                            -0.39\n",
              "Prob(H) (two-sided):                  0.02   Kurtosis:                         3.05\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>                  <td>y</td>               <th>  No. Observations:  </th>    <td>71</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>           <td>SARIMAX(0, 0, 1)x(2, 0, 1, 12)</td> <th>  Log Likelihood     </th>  <td>65.082</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>                   <td>Tue, 06 May 2025</td>        <th>  AIC                </th> <td>-118.164</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                       <td>07:41:31</td>            <th>  BIC                </th> <td>-104.588</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>                    <td>03-01-2019</td>           <th>  HQIC               </th> <td>-112.765</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                          <td>- 01-01-2025</td>          <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "      <td></td>         <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>intercept</th> <td> 7.417e-05</td> <td>    0.000</td> <td>    0.185</td> <td> 0.853</td> <td>   -0.001</td> <td>    0.001</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>     <td>   -0.6994</td> <td>    0.099</td> <td>   -7.082</td> <td> 0.000</td> <td>   -0.893</td> <td>   -0.506</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L12</th>  <td>    1.0111</td> <td>    0.392</td> <td>    2.579</td> <td> 0.010</td> <td>    0.243</td> <td>    1.779</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L24</th>  <td>   -0.0472</td> <td>    0.263</td> <td>   -0.179</td> <td> 0.858</td> <td>   -0.564</td> <td>    0.469</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.S.L12</th>  <td>   -0.7779</td> <td>    0.541</td> <td>   -1.438</td> <td> 0.151</td> <td>   -1.838</td> <td>    0.283</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th>    <td>    0.0079</td> <td>    0.002</td> <td>    3.756</td> <td> 0.000</td> <td>    0.004</td> <td>    0.012</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>0.17</td> <th>  Jarque-Bera (JB):  </th> <td>1.76</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.68</td> <th>  Prob(JB):          </th> <td>0.41</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.36</td> <th>  Skew:              </th> <td>-0.39</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.02</td> <th>  Kurtosis:          </th> <td>3.05</td> \n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &               y                & \\textbf{  No. Observations:  } &     71      \\\\\n\\textbf{Model:}                  & SARIMAX(0, 0, 1)x(2, 0, 1, 12) & \\textbf{  Log Likelihood     } &   65.082    \\\\\n\\textbf{Date:}                   &        Tue, 06 May 2025        & \\textbf{  AIC                } &  -118.164   \\\\\n\\textbf{Time:}                   &            07:41:31            & \\textbf{  BIC                } &  -104.588   \\\\\n\\textbf{Sample:}                 &           03-01-2019           & \\textbf{  HQIC               } &  -112.765   \\\\\n\\textbf{}                        &          - 01-01-2025          & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &              opg               & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                   & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{intercept} &    7.417e-05  &        0.000     &     0.185  &         0.853        &       -0.001    &        0.001     \\\\\n\\textbf{ma.L1}     &      -0.6994  &        0.099     &    -7.082  &         0.000        &       -0.893    &       -0.506     \\\\\n\\textbf{ar.S.L12}  &       1.0111  &        0.392     &     2.579  &         0.010        &        0.243    &        1.779     \\\\\n\\textbf{ar.S.L24}  &      -0.0472  &        0.263     &    -0.179  &         0.858        &       -0.564    &        0.469     \\\\\n\\textbf{ma.S.L12}  &      -0.7779  &        0.541     &    -1.438  &         0.151        &       -1.838    &        0.283     \\\\\n\\textbf{sigma2}    &       0.0079  &        0.002     &     3.756  &         0.000        &        0.004    &        0.012     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.17 & \\textbf{  Jarque-Bera (JB):  } &  1.76  \\\\\n\\textbf{Prob(Q):}                & 0.68 & \\textbf{  Prob(JB):          } &  0.41  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.36 & \\textbf{  Skew:              } & -0.39  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.02 & \\textbf{  Kurtosis:          } &  3.05  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split data into train and test set\n",
        "train_data = dfAverage_Monthly_TransactionLoan01['Loans_diff'].iloc[:56]\n",
        "test_data = dfAverage_Monthly_TransactionLoan01['Loans_diff'].iloc[55:]"
      ],
      "metadata": {
        "id": "c_GkZXvxFxVG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Train the model on the train set\n",
        "sarima_model = SARIMAX(train_data, order=(0,0,1), seasonal_order=(2,0,1,12))\n",
        "Sarima_results = sarima_model.fit()\n",
        "Sarima_results.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "fJ-2Os0GGWjq",
        "outputId": "fbeac018-ddb5-4dbc-de20-23de66bed579"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                                     SARIMAX Results                                      \n",
              "==========================================================================================\n",
              "Dep. Variable:                         Loans_diff   No. Observations:                   56\n",
              "Model:             SARIMAX(0, 0, 1)x(2, 0, 1, 12)   Log Likelihood                  48.176\n",
              "Date:                            Sat, 10 May 2025   AIC                            -86.353\n",
              "Time:                                    16:14:32   BIC                            -76.226\n",
              "Sample:                                03-01-2019   HQIC                           -82.426\n",
              "                                     - 10-01-2023                                         \n",
              "Covariance Type:                              opg                                         \n",
              "==============================================================================\n",
              "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "ma.L1         -0.6378      0.138     -4.618      0.000      -0.908      -0.367\n",
              "ar.S.L12       1.0331      0.997      1.036      0.300      -0.921       2.987\n",
              "ar.S.L24      -0.0346      0.503     -0.069      0.945      -1.020       0.951\n",
              "ma.S.L12      -0.9575      7.253     -0.132      0.895     -15.173      13.258\n",
              "sigma2         0.0081      0.051      0.160      0.873      -0.091       0.107\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   0.35   Jarque-Bera (JB):                 1.10\n",
              "Prob(Q):                              0.56   Prob(JB):                         0.58\n",
              "Heteroskedasticity (H):               0.33   Skew:                            -0.34\n",
              "Prob(H) (two-sided):                  0.02   Kurtosis:                         3.03\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>             <td>Loans_diff</td>           <th>  No. Observations:  </th>   <td>56</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>           <td>SARIMAX(0, 0, 1)x(2, 0, 1, 12)</td> <th>  Log Likelihood     </th> <td>48.176</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>                   <td>Sat, 10 May 2025</td>        <th>  AIC                </th> <td>-86.353</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                       <td>16:14:32</td>            <th>  BIC                </th> <td>-76.226</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>                    <td>03-01-2019</td>           <th>  HQIC               </th> <td>-82.426</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                          <td>- 10-01-2023</td>          <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "      <td></td>        <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>    <td>   -0.6378</td> <td>    0.138</td> <td>   -4.618</td> <td> 0.000</td> <td>   -0.908</td> <td>   -0.367</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L12</th> <td>    1.0331</td> <td>    0.997</td> <td>    1.036</td> <td> 0.300</td> <td>   -0.921</td> <td>    2.987</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L24</th> <td>   -0.0346</td> <td>    0.503</td> <td>   -0.069</td> <td> 0.945</td> <td>   -1.020</td> <td>    0.951</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.S.L12</th> <td>   -0.9575</td> <td>    7.253</td> <td>   -0.132</td> <td> 0.895</td> <td>  -15.173</td> <td>   13.258</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th>   <td>    0.0081</td> <td>    0.051</td> <td>    0.160</td> <td> 0.873</td> <td>   -0.091</td> <td>    0.107</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>0.35</td> <th>  Jarque-Bera (JB):  </th> <td>1.10</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.56</td> <th>  Prob(JB):          </th> <td>0.58</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.33</td> <th>  Skew:              </th> <td>-0.34</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.02</td> <th>  Kurtosis:          </th> <td>3.03</td> \n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &          Loans\\_diff           & \\textbf{  No. Observations:  } &     56      \\\\\n\\textbf{Model:}                  & SARIMAX(0, 0, 1)x(2, 0, 1, 12) & \\textbf{  Log Likelihood     } &   48.176    \\\\\n\\textbf{Date:}                   &        Sat, 10 May 2025        & \\textbf{  AIC                } &  -86.353    \\\\\n\\textbf{Time:}                   &            16:14:32            & \\textbf{  BIC                } &  -76.226    \\\\\n\\textbf{Sample:}                 &           03-01-2019           & \\textbf{  HQIC               } &  -82.426    \\\\\n\\textbf{}                        &          - 10-01-2023          & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &              opg               & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                  & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{ma.L1}    &      -0.6378  &        0.138     &    -4.618  &         0.000        &       -0.908    &       -0.367     \\\\\n\\textbf{ar.S.L12} &       1.0331  &        0.997     &     1.036  &         0.300        &       -0.921    &        2.987     \\\\\n\\textbf{ar.S.L24} &      -0.0346  &        0.503     &    -0.069  &         0.945        &       -1.020    &        0.951     \\\\\n\\textbf{ma.S.L12} &      -0.9575  &        7.253     &    -0.132  &         0.895        &      -15.173    &       13.258     \\\\\n\\textbf{sigma2}   &       0.0081  &        0.051     &     0.160  &         0.873        &       -0.091    &        0.107     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.35 & \\textbf{  Jarque-Bera (JB):  } &  1.10  \\\\\n\\textbf{Prob(Q):}                & 0.56 & \\textbf{  Prob(JB):          } &  0.58  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.33 & \\textbf{  Skew:              } & -0.34  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.02 & \\textbf{  Kurtosis:          } &  3.03  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Make predictions on the trained model\n",
        "start = len(train_data)\n",
        "end =len(train_data) + len(test_data)-1"
      ],
      "metadata": {
        "id": "xUCPLNzgG_Mx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Predict the values for the test_data\n",
        "test_predictions = Sarima_results.predict(start=start, end=end, typ='levels').rename('SARIMA(0,0,1)(2,0,1,12) Predictions')"
      ],
      "metadata": {
        "id": "v27jIrA6HJRV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "SWyKa9VkHknZ",
        "outputId": "a5625b52-88da-427b-f432-dc58bb7217b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-11-01   -0.060401\n",
              "2023-12-01   -0.058682\n",
              "2024-01-01    0.025179\n",
              "2024-02-01   -0.007297\n",
              "2024-03-01    0.162522\n",
              "2024-04-01   -0.044334\n",
              "2024-05-01   -0.054666\n",
              "2024-06-01    0.006782\n",
              "2024-07-01   -0.002914\n",
              "2024-08-01   -0.064975\n",
              "2024-09-01    0.130123\n",
              "2024-10-01   -0.030563\n",
              "2024-11-01   -0.037538\n",
              "2024-12-01   -0.056725\n",
              "2025-01-01    0.022540\n",
              "2025-02-01   -0.007756\n",
              "Freq: MS, Name: SARIMA(0,0,1)(2,0,1,12) Predictions, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SARIMA(0,0,1)(2,0,1,12) Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>-0.060401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>-0.058682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>0.025179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>-0.007297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-01</th>\n",
              "      <td>0.162522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-01</th>\n",
              "      <td>-0.044334</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-05-01</th>\n",
              "      <td>-0.054666</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-01</th>\n",
              "      <td>0.006782</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-01</th>\n",
              "      <td>-0.002914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-08-01</th>\n",
              "      <td>-0.064975</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>0.130123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>-0.030563</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>-0.037538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>-0.056725</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>0.022540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-01</th>\n",
              "      <td>-0.007756</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot test data and predicted values\n",
        "test_data.plot(legend=True, figsize=(10,5))\n",
        "test_predictions.plot(legend=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "id": "q4fvEf4OHsiN",
        "outputId": "f523e8c5-b4c5-4a37-9d4d-c711cddd22d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 146
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For MAE\n",
        "mean_absolute_error(test_data, test_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rZqI1ClwIBgo",
        "outputId": "72dee20c-7a3f-4cf0-82b3-81a2bbaa8b12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.1333386010536453"
            ]
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For RMSE\n",
        "np.sqrt(mean_squared_error(test_data, test_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tNFJwm41IIMz",
        "outputId": "8e540361-fab3-41f0-a5a8-356de8387a0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.15757364281414643)"
            ]
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For MAPE\n",
        "mean_absolute_percentage_error(test_data, test_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tFJDRX_4IM05",
        "outputId": "0070329d-22c7-4926-a93e-cf4690004a40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.8169794376362765"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AjuaUqLu_CRK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# SARIMAX"
      ],
      "metadata": {
        "id": "OEuox12cIy7V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Run the arima function with exogeneous parameter for SARIMAX\n",
        "auto_arima(dfAverage_Monthly_TransactionLoan01['Loans_diff'], exogeneous= dfAverage_Monthly_TransactionLoan01[['InflationRate_diff']], seasonal=True, m=12).summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "3drdDgvvI30S",
        "outputId": "b9dbaa76-a72f-4605-cac8-466cac436a3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                                     SARIMAX Results                                      \n",
              "==========================================================================================\n",
              "Dep. Variable:                                  y   No. Observations:                   71\n",
              "Model:             SARIMAX(0, 0, 1)x(2, 0, 1, 12)   Log Likelihood                  65.082\n",
              "Date:                            Sat, 10 May 2025   AIC                           -118.164\n",
              "Time:                                    16:19:30   BIC                           -104.588\n",
              "Sample:                                03-01-2019   HQIC                          -112.765\n",
              "                                     - 01-01-2025                                         \n",
              "Covariance Type:                              opg                                         \n",
              "==============================================================================\n",
              "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "intercept   7.417e-05      0.000      0.185      0.853      -0.001       0.001\n",
              "ma.L1         -0.6994      0.099     -7.082      0.000      -0.893      -0.506\n",
              "ar.S.L12       1.0111      0.392      2.579      0.010       0.243       1.779\n",
              "ar.S.L24      -0.0472      0.263     -0.179      0.858      -0.564       0.469\n",
              "ma.S.L12      -0.7779      0.541     -1.438      0.151      -1.838       0.283\n",
              "sigma2         0.0079      0.002      3.756      0.000       0.004       0.012\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   0.17   Jarque-Bera (JB):                 1.76\n",
              "Prob(Q):                              0.68   Prob(JB):                         0.41\n",
              "Heteroskedasticity (H):               0.36   Skew:                            -0.39\n",
              "Prob(H) (two-sided):                  0.02   Kurtosis:                         3.05\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>                  <td>y</td>               <th>  No. Observations:  </th>    <td>71</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>           <td>SARIMAX(0, 0, 1)x(2, 0, 1, 12)</td> <th>  Log Likelihood     </th>  <td>65.082</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>                   <td>Sat, 10 May 2025</td>        <th>  AIC                </th> <td>-118.164</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                       <td>16:19:30</td>            <th>  BIC                </th> <td>-104.588</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>                    <td>03-01-2019</td>           <th>  HQIC               </th> <td>-112.765</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                          <td>- 01-01-2025</td>          <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "      <td></td>         <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>intercept</th> <td> 7.417e-05</td> <td>    0.000</td> <td>    0.185</td> <td> 0.853</td> <td>   -0.001</td> <td>    0.001</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>     <td>   -0.6994</td> <td>    0.099</td> <td>   -7.082</td> <td> 0.000</td> <td>   -0.893</td> <td>   -0.506</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L12</th>  <td>    1.0111</td> <td>    0.392</td> <td>    2.579</td> <td> 0.010</td> <td>    0.243</td> <td>    1.779</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L24</th>  <td>   -0.0472</td> <td>    0.263</td> <td>   -0.179</td> <td> 0.858</td> <td>   -0.564</td> <td>    0.469</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.S.L12</th>  <td>   -0.7779</td> <td>    0.541</td> <td>   -1.438</td> <td> 0.151</td> <td>   -1.838</td> <td>    0.283</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th>    <td>    0.0079</td> <td>    0.002</td> <td>    3.756</td> <td> 0.000</td> <td>    0.004</td> <td>    0.012</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>0.17</td> <th>  Jarque-Bera (JB):  </th> <td>1.76</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.68</td> <th>  Prob(JB):          </th> <td>0.41</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.36</td> <th>  Skew:              </th> <td>-0.39</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.02</td> <th>  Kurtosis:          </th> <td>3.05</td> \n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &               y                & \\textbf{  No. Observations:  } &     71      \\\\\n\\textbf{Model:}                  & SARIMAX(0, 0, 1)x(2, 0, 1, 12) & \\textbf{  Log Likelihood     } &   65.082    \\\\\n\\textbf{Date:}                   &        Sat, 10 May 2025        & \\textbf{  AIC                } &  -118.164   \\\\\n\\textbf{Time:}                   &            16:19:30            & \\textbf{  BIC                } &  -104.588   \\\\\n\\textbf{Sample:}                 &           03-01-2019           & \\textbf{  HQIC               } &  -112.765   \\\\\n\\textbf{}                        &          - 01-01-2025          & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &              opg               & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                   & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{intercept} &    7.417e-05  &        0.000     &     0.185  &         0.853        &       -0.001    &        0.001     \\\\\n\\textbf{ma.L1}     &      -0.6994  &        0.099     &    -7.082  &         0.000        &       -0.893    &       -0.506     \\\\\n\\textbf{ar.S.L12}  &       1.0111  &        0.392     &     2.579  &         0.010        &        0.243    &        1.779     \\\\\n\\textbf{ar.S.L24}  &      -0.0472  &        0.263     &    -0.179  &         0.858        &       -0.564    &        0.469     \\\\\n\\textbf{ma.S.L12}  &      -0.7779  &        0.541     &    -1.438  &         0.151        &       -1.838    &        0.283     \\\\\n\\textbf{sigma2}    &       0.0079  &        0.002     &     3.756  &         0.000        &        0.004    &        0.012     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.17 & \\textbf{  Jarque-Bera (JB):  } &  1.76  \\\\\n\\textbf{Prob(Q):}                & 0.68 & \\textbf{  Prob(JB):          } &  0.41  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.36 & \\textbf{  Skew:              } & -0.39  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.02 & \\textbf{  Kurtosis:          } &  3.05  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split data into train and test set\n",
        "train_data = dfAverage_Monthly_TransactionLoan01.iloc[:56]\n",
        "test_data = dfAverage_Monthly_TransactionLoan01.iloc[55:]"
      ],
      "metadata": {
        "id": "2W7s5vRvJtM9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Train the model on SARIMAX model with exogeneous variable\n",
        "sarimax_model = SARIMAX(train_data['Loans_diff'], exog=train_data[['InflationRate_diff']], order=(0,0,1), seasonal_order=(2,0,1,12),\n",
        "              enforce_invertibility=False)\n",
        "sarimax_results = sarimax_model.fit()\n",
        "sarimax_results.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "TjlXIX2TKXeb",
        "outputId": "235c38da-9001-4a4d-80a4-8d79f12acad1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                                     SARIMAX Results                                      \n",
              "==========================================================================================\n",
              "Dep. Variable:                         Loans_diff   No. Observations:                   56\n",
              "Model:             SARIMAX(0, 0, 1)x(2, 0, 1, 12)   Log Likelihood                  48.813\n",
              "Date:                            Sat, 10 May 2025   AIC                            -85.627\n",
              "Time:                                    16:20:09   BIC                            -73.475\n",
              "Sample:                                03-01-2019   HQIC                           -80.915\n",
              "                                     - 10-01-2023                                         \n",
              "Covariance Type:                              opg                                         \n",
              "======================================================================================\n",
              "                         coef    std err          z      P>|z|      [0.025      0.975]\n",
              "--------------------------------------------------------------------------------------\n",
              "InflationRate_diff     0.3498      0.356      0.984      0.325      -0.347       1.047\n",
              "ma.L1                 -0.6450      0.129     -5.004      0.000      -0.898      -0.392\n",
              "ar.S.L12               1.0572      1.456      0.726      0.468      -1.796       3.910\n",
              "ar.S.L24              -0.0720      0.710     -0.101      0.919      -1.463       1.319\n",
              "ma.S.L12              -0.8833      3.125     -0.283      0.777      -7.007       5.241\n",
              "sigma2                 0.0087      0.015      0.581      0.561      -0.021       0.038\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   0.46   Jarque-Bera (JB):                 0.90\n",
              "Prob(Q):                              0.50   Prob(JB):                         0.64\n",
              "Heteroskedasticity (H):               0.35   Skew:                            -0.31\n",
              "Prob(H) (two-sided):                  0.03   Kurtosis:                         3.07\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>             <td>Loans_diff</td>           <th>  No. Observations:  </th>   <td>56</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>           <td>SARIMAX(0, 0, 1)x(2, 0, 1, 12)</td> <th>  Log Likelihood     </th> <td>48.813</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>                   <td>Sat, 10 May 2025</td>        <th>  AIC                </th> <td>-85.627</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                       <td>16:20:09</td>            <th>  BIC                </th> <td>-73.475</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>                    <td>03-01-2019</td>           <th>  HQIC               </th> <td>-80.915</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                          <td>- 10-01-2023</td>          <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "           <td></td>             <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>InflationRate_diff</th> <td>    0.3498</td> <td>    0.356</td> <td>    0.984</td> <td> 0.325</td> <td>   -0.347</td> <td>    1.047</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>              <td>   -0.6450</td> <td>    0.129</td> <td>   -5.004</td> <td> 0.000</td> <td>   -0.898</td> <td>   -0.392</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L12</th>           <td>    1.0572</td> <td>    1.456</td> <td>    0.726</td> <td> 0.468</td> <td>   -1.796</td> <td>    3.910</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L24</th>           <td>   -0.0720</td> <td>    0.710</td> <td>   -0.101</td> <td> 0.919</td> <td>   -1.463</td> <td>    1.319</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.S.L12</th>           <td>   -0.8833</td> <td>    3.125</td> <td>   -0.283</td> <td> 0.777</td> <td>   -7.007</td> <td>    5.241</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th>             <td>    0.0087</td> <td>    0.015</td> <td>    0.581</td> <td> 0.561</td> <td>   -0.021</td> <td>    0.038</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>0.46</td> <th>  Jarque-Bera (JB):  </th> <td>0.90</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.50</td> <th>  Prob(JB):          </th> <td>0.64</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.35</td> <th>  Skew:              </th> <td>-0.31</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.03</td> <th>  Kurtosis:          </th> <td>3.07</td> \n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &          Loans\\_diff           & \\textbf{  No. Observations:  } &     56      \\\\\n\\textbf{Model:}                  & SARIMAX(0, 0, 1)x(2, 0, 1, 12) & \\textbf{  Log Likelihood     } &   48.813    \\\\\n\\textbf{Date:}                   &        Sat, 10 May 2025        & \\textbf{  AIC                } &  -85.627    \\\\\n\\textbf{Time:}                   &            16:20:09            & \\textbf{  BIC                } &  -73.475    \\\\\n\\textbf{Sample:}                 &           03-01-2019           & \\textbf{  HQIC               } &  -80.915    \\\\\n\\textbf{}                        &          - 10-01-2023          & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &              opg               & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                             & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{InflationRate\\_diff} &       0.3498  &        0.356     &     0.984  &         0.325        &       -0.347    &        1.047     \\\\\n\\textbf{ma.L1}               &      -0.6450  &        0.129     &    -5.004  &         0.000        &       -0.898    &       -0.392     \\\\\n\\textbf{ar.S.L12}            &       1.0572  &        1.456     &     0.726  &         0.468        &       -1.796    &        3.910     \\\\\n\\textbf{ar.S.L24}            &      -0.0720  &        0.710     &    -0.101  &         0.919        &       -1.463    &        1.319     \\\\\n\\textbf{ma.S.L12}            &      -0.8833  &        3.125     &    -0.283  &         0.777        &       -7.007    &        5.241     \\\\\n\\textbf{sigma2}              &       0.0087  &        0.015     &     0.581  &         0.561        &       -0.021    &        0.038     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.46 & \\textbf{  Jarque-Bera (JB):  } &  0.90  \\\\\n\\textbf{Prob(Q):}                & 0.50 & \\textbf{  Prob(JB):          } &  0.64  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.35 & \\textbf{  Skew:              } & -0.31  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.03 & \\textbf{  Kurtosis:          } &  3.07  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 152
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Make predictions on the trained model\n",
        "start = len(train_data)\n",
        "end =len(train_data) + len(test_data)-1"
      ],
      "metadata": {
        "id": "it-8wgHWK3Bi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_predictions_SX=sarimax_results.predict(start=start, end=end, exog=test_data[['InflationRate_diff']], typ='levels').rename('SARIMA(0,0,1)(2,0,1,12) Predictions')"
      ],
      "metadata": {
        "id": "c_0u9GrbLBr_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_predictions_SX"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "rw7YbQNELcn2",
        "outputId": "abc8f10a-b885-45d9-83a2-73ee5a65a47b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-11-01   -0.014230\n",
              "2023-12-01   -0.107177\n",
              "2024-01-01    0.058292\n",
              "2024-02-01   -0.021049\n",
              "2024-03-01    0.143503\n",
              "2024-04-01   -0.032092\n",
              "2024-05-01   -0.005833\n",
              "2024-06-01   -0.014114\n",
              "2024-07-01   -0.032749\n",
              "2024-08-01   -0.060539\n",
              "2024-09-01    0.121237\n",
              "2024-10-01   -0.011956\n",
              "2024-11-01   -0.024140\n",
              "2024-12-01   -0.059305\n",
              "2025-01-01    0.005193\n",
              "2025-02-01    0.006533\n",
              "Freq: MS, Name: SARIMA(0,0,1)(2,0,1,12) Predictions, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SARIMA(0,0,1)(2,0,1,12) Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>-0.014230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>-0.107177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>0.058292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>-0.021049</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-01</th>\n",
              "      <td>0.143503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-01</th>\n",
              "      <td>-0.032092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-05-01</th>\n",
              "      <td>-0.005833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-01</th>\n",
              "      <td>-0.014114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-01</th>\n",
              "      <td>-0.032749</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-08-01</th>\n",
              "      <td>-0.060539</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>0.121237</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>-0.011956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>-0.024140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>-0.059305</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>0.005193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-02-01</th>\n",
              "      <td>0.006533</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 155
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data['Loans_diff'].plot(legend=True, figsize=(10,5))\n",
        "test_predictions_SX.plot(legend=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "id": "bUidvvhFLumo",
        "outputId": "f4010b00-d59b-4688-f164-aa06fb298925"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 156
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluating predictions\n",
        "# For MAE\n",
        "mean_absolute_error(test_data['Loans_diff'], test_predictions_SX)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QO6vVvMBME7u",
        "outputId": "aadb5e68-d755-42aa-eb70-6ac0d6e32194"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.12929176578467086"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For RMSE\n",
        "np.sqrt(mean_squared_error(test_data['Loans_diff'], test_predictions_SX))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81PfgeKtMFJ2",
        "outputId": "6bf12e17-8849-4a0e-b292-f9519f85d230"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.15314961506148492)"
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For MAPE\n",
        "mean_absolute_percentage_error(test_data['Loans_diff'], test_predictions_SX)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CoKqLhFPMFYB",
        "outputId": "fba452c2-0a38-4a82-d3ce-44ffc4365fb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.8266896919480486"
            ]
          },
          "metadata": {},
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "b2iim5HrAEhf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "RMhB5kCJADiX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# VECTOR AUTOREGRESSION MODEL (VAR)"
      ],
      "metadata": {
        "id": "Ad6uk5kENSLk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.tsa.api import VAR"
      ],
      "metadata": {
        "id": "c954LnFLNTno"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Split data into train and test set\n",
        "nobs = 16\n",
        "train_data = dfAverage_Monthly_TransactionLoan01.iloc[:-nobs]\n",
        "test_data = dfAverage_Monthly_TransactionLoan01.iloc[-nobs:]"
      ],
      "metadata": {
        "id": "aArdgC3SNYKw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy.linalg import LinAlgError"
      ],
      "metadata": {
        "id": "oM_GqstlOoWZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CFGaKTP5AmKN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Fit model on train set\n",
        "model= VAR(train_data)\n",
        "\n",
        "for p in range(1, 9):\n",
        "    try:\n",
        "        results = model.fit(p)\n",
        "        print(f'Lag order: {p} AIC: {results.aic}')\n",
        "    except LinAlgError:\n",
        "        print(f'Lag order: {p} caused a LinAlgError (matrix not positive definite). Skipping...')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xCE_FFcvOsZr",
        "outputId": "7b685d45-4b6c-4432-bbd6-0a655f7db4f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lag order: 1 caused a LinAlgError (matrix not positive definite). Skipping...\n",
            "Lag order: 2 caused a LinAlgError (matrix not positive definite). Skipping...\n",
            "Lag order: 3 caused a LinAlgError (matrix not positive definite). Skipping...\n",
            "Lag order: 4 caused a LinAlgError (matrix not positive definite). Skipping...\n",
            "Lag order: 5 caused a LinAlgError (matrix not positive definite). Skipping...\n",
            "Lag order: 6 caused a LinAlgError (matrix not positive definite). Skipping...\n",
            "Lag order: 7 caused a LinAlgError (matrix not positive definite). Skipping...\n",
            "Lag order: 8 caused a LinAlgError (matrix not positive definite). Skipping...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rgJOCiwUAu13"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fq4b3JNBAuOz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " results = model.fit(1)"
      ],
      "metadata": {
        "id": "sj5124J1tLsg",
        "outputId": "7d600d4a-390f-4278-ec1b-4ce428b5352f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'model' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-bc7816687538>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions of the test data\n",
        "n_obs = len(test_data)\n",
        "forecast = results.forecast(y=model.endog, steps=n_obs)"
      ],
      "metadata": {
        "id": "rfyHwcT7SeJg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "forecast_dfAverage_Monthly_TransactionLoan01 = pd.DataFrame(forecast, index=test_data.index, columns=train_data.columns)"
      ],
      "metadata": {
        "id": "WRMuNJOrSxyn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loans_diff_forecast = forecast_dfAverage_Monthly_TransactionLoan01['Loans_diff'].rename('VAR Predicted Avg_Monthly_TransactionLoan')"
      ],
      "metadata": {
        "id": "E8GY9OhxSyzF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Loans_diff_forecast"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "eqDloKPtUoaj",
        "outputId": "858de1d0-fa6e-443b-9668-830bdf49b515"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2023-10-01   -0.110771\n",
              "2023-11-01    0.016108\n",
              "2023-12-01    0.001645\n",
              "2024-01-01   -0.004884\n",
              "2024-02-01    0.002738\n",
              "2024-03-01    0.004293\n",
              "2024-04-01    0.004428\n",
              "2024-05-01    0.005172\n",
              "2024-06-01    0.005429\n",
              "2024-07-01    0.005493\n",
              "2024-08-01    0.005553\n",
              "2024-09-01    0.005564\n",
              "2024-10-01    0.005554\n",
              "2024-11-01    0.005542\n",
              "2024-12-01    0.005530\n",
              "2025-01-01    0.005520\n",
              "Freq: MS, Name: VAR Predicted Avg_Monthly_TransactionLoan, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>VAR Predicted Avg_Monthly_TransactionLoan</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-10-01</th>\n",
              "      <td>-0.110771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>0.016108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>0.001645</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>-0.004884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>0.002738</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-01</th>\n",
              "      <td>0.004293</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-04-01</th>\n",
              "      <td>0.004428</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-05-01</th>\n",
              "      <td>0.005172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-06-01</th>\n",
              "      <td>0.005429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-01</th>\n",
              "      <td>0.005493</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-08-01</th>\n",
              "      <td>0.005553</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>0.005564</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>0.005554</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>0.005542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>0.005530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>0.005520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot test data and predicted values\n",
        "test_data['Loans_diff'].plot(legend=True, figsize=(10,5))\n",
        "Loans_diff_forecast.plot(legend=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "id": "30kAMQXMWQKi",
        "outputId": "901deb69-6b8f-43da-d5a1-6a79cbdcff69"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 169
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluating predictions\n",
        "# For MAE\n",
        "mean_absolute_error(test_data['Loans_diff'], Loans_diff_forecast)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "43BNC1UOXhyw",
        "outputId": "6eca2ad5-aa72-423e-e1b4-84f1d81b167d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.11483496162241541"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For RMSE\n",
        "np.sqrt(mean_squared_error(test_data['Loans_diff'], Loans_diff_forecast))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m7iNyOddXpXg",
        "outputId": "8144962e-1171-45ff-f5dc-0aadc683dffd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.float64(0.13321509770921713)"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For MAPE\n",
        "mean_absolute_percentage_error(test_data['Loans_diff'], Loans_diff_forecast)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_tPqbOrfXt8d",
        "outputId": "c86cd1d4-1a0e-4540-be36-b47143c712fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.223052761106914"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JTMPL676CqH-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#SARIMAX is the best model because it takes into consideration external factors."
      ],
      "metadata": {
        "id": "9HFRHltACMT3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm"
      ],
      "metadata": {
        "id": "y9E0sHQSahfA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating the estimate residuals of SARIMAX\n",
        "Actual_SX = test_data['Loans_diff']\n",
        "Predicted_SX = test_predictions_SX"
      ],
      "metadata": {
        "id": "cnVkMHT0arNO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Get residuals\n",
        "residuals_SX = (Actual_SX - Predicted_SX)"
      ],
      "metadata": {
        "id": "8Uowm2i5bani"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "residuals_SX = residuals_SX.dropna()"
      ],
      "metadata": {
        "id": "dXNOdWenbh_7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "O1a8VEAYFGVo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code print the first five rows of SARIMAX residual\n",
        "residuals_SX.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "PbXA7iHebp3y",
        "outputId": "d68e96d6-897b-4496-cc93-913012c132c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-11-01   -0.059960\n",
              "2023-12-01   -0.011968\n",
              "2024-01-01    0.090746\n",
              "2024-02-01   -0.001213\n",
              "2024-03-01   -0.035691\n",
              "Freq: MS, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>-0.059960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>-0.011968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>0.090746</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>-0.001213</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-01</th>\n",
              "      <td>-0.035691</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "d0CJni_RFclH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "residuals_SX.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "i0nf035jdQeL",
        "outputId": "29df5aff-64db-4ab6-a5e3-9c7b11dbf79c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2024-09-01    0.113830\n",
              "2024-10-01   -0.014435\n",
              "2024-11-01   -0.162082\n",
              "2024-12-01    0.145035\n",
              "2025-01-01   -0.080444\n",
              "Freq: MS, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>0.113830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>-0.014435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-11-01</th>\n",
              "      <td>-0.162082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-12-01</th>\n",
              "      <td>0.145035</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-01-01</th>\n",
              "      <td>-0.080444</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# SARIMAX Residuals plot\n",
        "residuals_SX.plot(figsize=(12,5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "jEzRP8XPdYgO",
        "outputId": "1db5480c-61f1-4fff-df36-ae52d8bf6868"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 180
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "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GDBAb7/9to4fP641a9Y4ztfU1Oi1117TjTfeqISEBAUHB7v0HgAArnPo0CHZbDb169fvguf79eunkpIS7dy5U6tXr9bSpUt1xx13KD4+XsnJybrrrrtkMpkUHh4uSYqMjFRUVJRCQ0NdeRuAS3hC5iDsw+dUVFRozpw52rVrlzZt2iSj0ag77rjjvLXGjz32mB5++GFlZ2fr2muv1ZQpU1RbW+umqoGOlZeXpx07dmjKlCmSJLPZrLvuuksZGRnNrktKSnL8OTw8XAkJCcrNzXUc8/f318CBA11TNADAI/x8FtjPHT58WCaTSTfffLOLKgI8jydkDnOHtAJcQSZPntzs/dKlSxUREaGDBw+qf//+juMPP/ywY4fyhQsX6rrrrtO3336rvn37urRewBkyMjJUW1urmJgYxzGbzaaAgAAtXry4ze0EBQXJYDA4o0TAIxmNxvOCzk+XtgDerE+fPjIYDMrNzdUdd9xx3vnc3Fx16dLlvCn+gC/yhMzByD58zqFDhzRlyhTFx8fLYrGoV69eknTexmI/Ha2Mjo6WJJ04ccJldQLOUltbq3feeUcvvviisrOzHa+9e/cqJiZGK1eudFz75ZdfOv5cUlKib775psXpm4AviIiI0LFjxxzvrVarfvjhBzdWBLhO165dNW7cOL322ms6e/Zss3NFRUV67733dNddd2nAgAGqr68/b2mYnb+/v6SGp7gA3soTMgdhHz7ntttuU3Fxsf7xj39o+/bt2r59uySpurq62XV+fn6OP9tHLnmsGLzBunXrVFJSohkzZqh///7NXpMnT242lf+pp57Spk2blJOTo9TUVHXr1s2jdpkFXG3MmDF699139fnnn2v//v2aPn26TCaTu8sCXGbx4sWqqqrShAkTtHXrVh05ckTr16/XuHHj1KNHDz3zzDPq1auXpk+frnvvvVcfffSRfvjhB2VmZmr16tWSpJ49e8pgMGjdunU6efKkysvL3XxXQMfzhMxB2IdPOX36tPLy8vT4448rOTnZsZEM4EsyMjI0duzYC26INHnyZO3atUv79u2TJP31r3/Vgw8+qKFDh6qoqEhr1651jMgAvqK+vl5mc8PKx/nz5+vmm2/WrbfeqpSUFE2aNEm9e/d2c4WA61xzzTXatWuX4uPj9dvf/la9e/fWrFmzNHr0aGVlZTk233v99dd155136v77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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if SARIMAX residuals_SX is normally distributed\n",
        "# Apply the Shapiro-Wilk test\n",
        "stat, p_value = shapiro(residuals_SX)\n",
        "\n",
        "print('Test statistic =', stat)\n",
        "print('p-value =', p_value)\n",
        "\n",
        "# Interpret the result\n",
        "if p_value > 0.05:\n",
        "    print(\" residuals_SX follows a normal distribution, which implies model is a good fit.\")\n",
        "else:\n",
        "    print(\" residuals_SX does not follow normal distributed, which implies model is not a good fit\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ox8LCCvGdQoX",
        "outputId": "2748b751-1cb1-4a99-c0c6-21049b42d53b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test statistic = 0.949852820477344\n",
            "p-value = 0.522135846579061\n",
            " residuals_SX follows a normal distribution, which implies model is a good fit.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "E-kmEH-pFxvt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Q-Q plot of SARIMAX residual\n",
        "sm.qqplot(residuals_SX, line='s');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "g9L9T5Rxf7sm",
        "outputId": "df8f2d10-8b12-47d6-93c8-25615b2b9065"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "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5eVp5syZatWqlfz9/RUTE6Nf//rX2r9/f53WccbkyZM1ZswYp7bY2FhlZ2erS5cubqkJAICf83V3AQAAeKvs7GzH92+88YYefPBB7dq1y9HWtGlTbdq0yR2l6fTp0/L397/o46OiomqwmgvLy8vTVVddJX9/fy1evFidO3fWvn379Kc//Ul9+/ZVenq62rZtW6c1VcbHx6fOfzYAAJwPM/0AANSSqKgox1dISIhsNptTW9OmTR1jN2/erD59+qhx48bq16+f04cDkrRixQr16tVLgYGBatu2rebPn6+ysjJH//79+zV69Gg1bdpUwcHB+sUvfqHDhw87+s/M2P/nP/9RmzZtFBgYKEk6fvy4fvOb3yg8PFzBwcEaPHiwvv76a0nSCy+8oPnz5+vrr792rE544YUXJJ27vP/AgQO6+eabFRYWpiZNmqhPnz7auHGjJGnPnj0aPXq0IiMj1bRpU/Xt21cffvihSz/LP/7xjzp06JA+/PBDDR8+XC1btlT//v31wQcfyM/PT7fddptjbGWXCvTo0cNpZcUTTzyhrl27qkmTJoqNjdXvf/97FRUVOfpfeOEFhYaG6oMPPlCnTp3UtGlTpaSkOD7ImTdvnv773/9qxYoVjp/N+vXrz1neX5nPPvtM1157rRo1aqTY2FjdcccdOnHihKP/6aef1hVXXKHAwEBFRkZq/PjxLv2sAAA4G6EfAIB64I9//KMef/xxbdq0Sb6+vvr1r3/t6Pv00091yy236M4779T27dv17LPP6oUXXtBf/vIXSVJFRYVGjx6tvLw8ffzxx1qzZo327t2rG2+80ek5du/erbfeektLly51hNLU1FTl5ubq/fff1+bNm9WrVy8NGTJEeXl5uvHGG3X33Xerc+fOys7OVnZ29jnnlKSioiINGDBABw8e1Ntvv62vv/5a9913nyoqKhz9I0aM0Nq1a/XVV18pJSVFo0aNqvay/IqKCr3++uuaMGHCObPojRo10u9//3t98MEHysvLq/bP226366mnntK2bdv03//+V+vWrdN9993nNObkyZN67LHH9NJLL+mTTz7R/v37dc8990iS7rnnHv3iF79wfBCQnZ2tfv36XfB59+zZo5SUFI0bN07ffPON3njjDX322WeaMWOGJGnTpk2644479NBDD2nXrl1atWqV+vfvX+3XBQDAOQwAAFDrnn/+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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Autocorrelation plot\n",
        "from statsmodels.graphics.tsaplots import plot_acf\n",
        "\n",
        "# Adjust the 'lags' parameter to a value less than or equal to the length of residuals_SX minus 1\n",
        "plot_acf(residuals_SX, lags=min(20, len(residuals_SX) - 1)); # or lags=15"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "8nOS1qMRgUJv",
        "outputId": "7d7e4206-5539-47eb-a97a-e2a728417f5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Train SARIMAX model on entire dataset"
      ],
      "metadata": {
        "id": "UkUjjEc6f3VG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "final_model_SX = SARIMAX(dfAverage_Monthly_TransactionLoan01['Loans_diff'], exog=dfAverage_Monthly_TransactionLoan01[['InflationRate_diff']], order=(0,0,1), seasonal_order=(2,0,1,12),\n",
        "              enforce_invertibility=False)\n",
        "sarimax_results = sarimax_model.fit()\n",
        "sarimax_results.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "ZvzDpVRoivpx",
        "outputId": "611ed543-4ac2-47a6-ed55-01723ec56417"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                                     SARIMAX Results                                      \n",
              "==========================================================================================\n",
              "Dep. Variable:                         Loans_diff   No. Observations:                   56\n",
              "Model:             SARIMAX(0, 0, 1)x(2, 0, 1, 12)   Log Likelihood                  48.813\n",
              "Date:                            Sat, 10 May 2025   AIC                            -85.627\n",
              "Time:                                    16:48:28   BIC                            -73.475\n",
              "Sample:                                03-01-2019   HQIC                           -80.915\n",
              "                                     - 10-01-2023                                         \n",
              "Covariance Type:                              opg                                         \n",
              "======================================================================================\n",
              "                         coef    std err          z      P>|z|      [0.025      0.975]\n",
              "--------------------------------------------------------------------------------------\n",
              "InflationRate_diff     0.3498      0.356      0.984      0.325      -0.347       1.047\n",
              "ma.L1                 -0.6450      0.129     -5.004      0.000      -0.898      -0.392\n",
              "ar.S.L12               1.0572      1.456      0.726      0.468      -1.796       3.910\n",
              "ar.S.L24              -0.0720      0.710     -0.101      0.919      -1.463       1.319\n",
              "ma.S.L12              -0.8833      3.125     -0.283      0.777      -7.007       5.241\n",
              "sigma2                 0.0087      0.015      0.581      0.561      -0.021       0.038\n",
              "===================================================================================\n",
              "Ljung-Box (L1) (Q):                   0.46   Jarque-Bera (JB):                 0.90\n",
              "Prob(Q):                              0.50   Prob(JB):                         0.64\n",
              "Heteroskedasticity (H):               0.35   Skew:                            -0.31\n",
              "Prob(H) (two-sided):                  0.03   Kurtosis:                         3.07\n",
              "===================================================================================\n",
              "\n",
              "Warnings:\n",
              "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>SARIMAX Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>             <td>Loans_diff</td>           <th>  No. Observations:  </th>   <td>56</td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>           <td>SARIMAX(0, 0, 1)x(2, 0, 1, 12)</td> <th>  Log Likelihood     </th> <td>48.813</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>                   <td>Sat, 10 May 2025</td>        <th>  AIC                </th> <td>-85.627</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                       <td>16:48:28</td>            <th>  BIC                </th> <td>-73.475</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Sample:</th>                    <td>03-01-2019</td>           <th>  HQIC               </th> <td>-80.915</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th></th>                          <td>- 10-01-2023</td>          <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>               <td>opg</td>              <th>                     </th>    <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "           <td></td>             <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>InflationRate_diff</th> <td>    0.3498</td> <td>    0.356</td> <td>    0.984</td> <td> 0.325</td> <td>   -0.347</td> <td>    1.047</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.L1</th>              <td>   -0.6450</td> <td>    0.129</td> <td>   -5.004</td> <td> 0.000</td> <td>   -0.898</td> <td>   -0.392</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L12</th>           <td>    1.0572</td> <td>    1.456</td> <td>    0.726</td> <td> 0.468</td> <td>   -1.796</td> <td>    3.910</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ar.S.L24</th>           <td>   -0.0720</td> <td>    0.710</td> <td>   -0.101</td> <td> 0.919</td> <td>   -1.463</td> <td>    1.319</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>ma.S.L12</th>           <td>   -0.8833</td> <td>    3.125</td> <td>   -0.283</td> <td> 0.777</td> <td>   -7.007</td> <td>    5.241</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>sigma2</th>             <td>    0.0087</td> <td>    0.015</td> <td>    0.581</td> <td> 0.561</td> <td>   -0.021</td> <td>    0.038</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Ljung-Box (L1) (Q):</th>     <td>0.46</td> <th>  Jarque-Bera (JB):  </th> <td>0.90</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Q):</th>                <td>0.50</td> <th>  Prob(JB):          </th> <td>0.64</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Heteroskedasticity (H):</th> <td>0.35</td> <th>  Skew:              </th> <td>-0.31</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(H) (two-sided):</th>    <td>0.03</td> <th>  Kurtosis:          </th> <td>3.07</td> \n",
              "</tr>\n",
              "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &          Loans\\_diff           & \\textbf{  No. Observations:  } &     56      \\\\\n\\textbf{Model:}                  & SARIMAX(0, 0, 1)x(2, 0, 1, 12) & \\textbf{  Log Likelihood     } &   48.813    \\\\\n\\textbf{Date:}                   &        Sat, 10 May 2025        & \\textbf{  AIC                } &  -85.627    \\\\\n\\textbf{Time:}                   &            16:48:28            & \\textbf{  BIC                } &  -73.475    \\\\\n\\textbf{Sample:}                 &           03-01-2019           & \\textbf{  HQIC               } &  -80.915    \\\\\n\\textbf{}                        &          - 10-01-2023          & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &              opg               & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                             & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{InflationRate\\_diff} &       0.3498  &        0.356     &     0.984  &         0.325        &       -0.347    &        1.047     \\\\\n\\textbf{ma.L1}               &      -0.6450  &        0.129     &    -5.004  &         0.000        &       -0.898    &       -0.392     \\\\\n\\textbf{ar.S.L12}            &       1.0572  &        1.456     &     0.726  &         0.468        &       -1.796    &        3.910     \\\\\n\\textbf{ar.S.L24}            &      -0.0720  &        0.710     &    -0.101  &         0.919        &       -1.463    &        1.319     \\\\\n\\textbf{ma.S.L12}            &      -0.8833  &        3.125     &    -0.283  &         0.777        &       -7.007    &        5.241     \\\\\n\\textbf{sigma2}              &       0.0087  &        0.015     &     0.581  &         0.561        &       -0.021    &        0.038     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.46 & \\textbf{  Jarque-Bera (JB):  } &  0.90  \\\\\n\\textbf{Prob(Q):}                & 0.50 & \\textbf{  Prob(JB):          } &  0.64  \\\\\n\\textbf{Heteroskedasticity (H):} & 0.35 & \\textbf{  Skew:              } & -0.31  \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.03 & \\textbf{  Kurtosis:          } &  3.07  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step)."
          },
          "metadata": {},
          "execution_count": 184
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Business Questions"
      ],
      "metadata": {
        "id": "OF2ONDmIe0v9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#1. What is the Avearge Monthly transaction Amount of Loan for the next 12 months"
      ],
      "metadata": {
        "id": "D6W0McOyvEHU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Number of months to forecast\n",
        "n_forecast = 12\n",
        "\n",
        "# Generate future exogenous variable values\n",
        "# Example: Use mean of last 12 months as a placeholder\n",
        "mean_inflation_diff = dfAverage_Monthly_TransactionLoan01['InflationRate_diff'].iloc[-12:].mean()\n",
        "\n",
        "# Generate future dates\n",
        "future_dates = pd.date_range(start=dfAverage_Monthly_TransactionLoan01.index[-1] + pd.DateOffset(months=1),\n",
        "                             periods=n_forecast, freq='MS')\n",
        "\n",
        "# Create future exog DataFrame\n",
        "future_exog = pd.DataFrame({'InflationRate_diff': [mean_inflation_diff] * n_forecast}, index=future_dates)\n",
        "\n",
        "# Forecast next 12 months of loan_diff\n",
        "loan_diff_forecast = sarimax_results.forecast(steps=n_forecast, exog=future_exog)\n",
        "\n",
        "# Rename and inspect\n",
        "loan_diff_forecast.name = 'Predicted_Loan_diff'\n",
        "print(loan_diff_forecast)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zpgXawMxxFZd",
        "outputId": "7fee5824-ec48-420e-fd52-928815d6c7a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2023-11-01   -0.027348\n",
            "2023-12-01   -0.064326\n",
            "2024-01-01    0.024186\n",
            "2024-02-01   -0.002684\n",
            "2024-03-01    0.147875\n",
            "2024-04-01   -0.062701\n",
            "2024-05-01   -0.029445\n",
            "2024-06-01    0.011247\n",
            "2024-07-01   -0.003890\n",
            "2024-08-01   -0.052668\n",
            "2024-09-01    0.111617\n",
            "2024-10-01   -0.028572\n",
            "Freq: MS, Name: Predicted_Loan_diff, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bjwggXBcG57i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# TO REVERSE DIFFERENCED DATA TO ORIGINAL SCALE\n",
        "# Get last known Average Monthly Transaction Amount of Loan value of \"Loans\" (not Loans_diff)\n",
        "last_actual_loan = dfAverage_Monthly_TransactionLoan01['Loans'].iloc[-1]\n",
        "\n",
        "# Reverse differencing\n",
        "future_loans = loan_diff_forecast.cumsum() + last_actual_loan\n"
      ],
      "metadata": {
        "id": "YDhPwvpV9xMj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "future_loans.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "g4FjKvrS_Fdp",
        "outputId": "bf0fcb51-9823-465f-f888-ae0e350a9d47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-11-01    93.782652\n",
              "2023-12-01    93.718326\n",
              "2024-01-01    93.742512\n",
              "2024-02-01    93.739828\n",
              "2024-03-01    93.887703\n",
              "Freq: MS, Name: Predicted_Loan_diff, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Predicted_Loan_diff</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>93.782652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-12-01</th>\n",
              "      <td>93.718326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01</th>\n",
              "      <td>93.742512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-02-01</th>\n",
              "      <td>93.739828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-03-01</th>\n",
              "      <td>93.887703</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 240
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "future_loans.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "2hm9JjLZ_Ty1",
        "outputId": "5f370326-765c-4823-e13e-93b697c9bc28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2024-06-01    93.806804\n",
              "2024-07-01    93.802914\n",
              "2024-08-01    93.750246\n",
              "2024-09-01    93.861863\n",
              "2024-10-01    93.833292\n",
              "Freq: MS, Name: Predicted_Loan_diff, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Predicted_Loan_diff</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-06-01</th>\n",
              "      <td>93.806804</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-07-01</th>\n",
              "      <td>93.802914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-08-01</th>\n",
              "      <td>93.750246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-09-01</th>\n",
              "      <td>93.861863</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-10-01</th>\n",
              "      <td>93.833292</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 241
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot of Original values VS Forecasted values"
      ],
      "metadata": {
        "id": "Ax7441gG_kxp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfAverage_Monthly_TransactionLoan01['Loans'].plot(figsize=(12,5),legend=True, label='original value')\n",
        "future_loans.plot(figsize=(12,5),legend=True, label='12 months forecast')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "e2cEUZLH_r7z",
        "outputId": "4ef3207d-2ae2-49eb-ba79-e1b5071b966b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 187
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2.\tDoes inflation Rate Granger-cause average monthly transaction amount?"
      ],
      "metadata": {
        "id": "2A0EfLXRHufL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#3.\tWhat is the average monthly transaction amount of loan growth rate from January 2019 to January 2025?"
      ],
      "metadata": {
        "id": "O9uPYxA7HfE5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Compute the monthly growth rate\n",
        "dfAverage_Monthly_TransactionLoan01['Loan_Growth_Rate'] = dfAverage_Monthly_TransactionLoan01['Loans'].pct_change()\n",
        "\n",
        "# Calculate the average monthly growth rate\n",
        "average_growth_rate = dfAverage_Monthly_TransactionLoan01['Loan_Growth_Rate'].mean()\n",
        "\n",
        "# Display the result\n",
        "print(f\"Average Monthly Loan Growth Rate: {average_growth_rate:.4f} or {average_growth_rate * 100:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "InKfb49bIjdU",
        "outputId": "7aa76a07-4aca-4ddb-a171-772979c8b75d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average Monthly Loan Growth Rate: 0.0041 or 0.41%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0GmBdSxzLNHs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#4. What is the long-term average monthly transaction amount of loan from January 2019 to December 2025?"
      ],
      "metadata": {
        "id": "8l_wR6_2JNdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 2: Compute the long-term average monthly transaction amount\n",
        "average_monthly_loan = dfAverage_Monthly_TransactionLoan01['Loans'].mean()\n",
        "\n",
        "# Display the result\n",
        "print(f\"Long-term Average Monthly Transaction Amount of Loans: {average_monthly_loan:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "08V9oMg3JfF2",
        "outputId": "9da02558-7f24-4127-f2a4-803d88e0125f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Long-term Average Monthly Transaction Amount of Loans: 91.10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5.\tWhat month has the highest and lowest average monthly transaction amount?"
      ],
      "metadata": {
        "id": "VaXx-ulDL4b3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the index to a datetime object if it's not already\n",
        "dfAverage_Monthly_TransactionLoan01.index = pd.to_datetime(dfAverage_Monthly_TransactionLoan01.index)\n",
        "\n",
        "# Reset the index to make 'Date' a regular column\n",
        "dfAverage_Monthly_TransactionLoan01 = dfAverage_Monthly_TransactionLoan01.reset_index()\n",
        "\n",
        "# Now you can access the 'Date' column and extract the month\n",
        "dfAverage_Monthly_TransactionLoan01['Date'] = pd.to_datetime(dfAverage_Monthly_TransactionLoan01['Date'])\n",
        "dfAverage_Monthly_TransactionLoan01['Month'] = dfAverage_Monthly_TransactionLoan01['Date'].dt.month\n",
        "\n",
        "\n",
        "# Group by month and calculate the average loan amount\n",
        "monthly_avg_loans = dfAverage_Monthly_TransactionLoan01.groupby('Month')['Loans'].mean()\n",
        "\n",
        "# Identify the month with the highest and lowest average\n",
        "highest_month = monthly_avg_loans.idxmax()  # Month with the highest average\n",
        "lowest_month = monthly_avg_loans.idxmin()   # Month with the lowest average\n",
        "\n",
        "highest_avg = monthly_avg_loans.max()       # Highest average loan amount\n",
        "lowest_avg = monthly_avg_loans.min()        # Lowest average loan amount\n",
        "\n",
        "# Map month numbers to month names for better readability\n",
        "month_names = {\n",
        "    1: \"January\", 2: \"February\", 3: \"March\", 4: \"April\", 5: \"May\", 6: \"June\",\n",
        "    7: \"July\", 8: \"August\", 9: \"September\", 10: \"October\", 11: \"November\", 12: \"December\"\n",
        "}\n",
        "\n",
        "# Display the results\n",
        "print(f\"Highest Average Monthly Transaction Amount: {highest_avg:.2f} in {month_names[highest_month]}\")\n",
        "print(f\"Lowest Average Monthly Transaction Amount: {lowest_avg:.2f} in {month_names[lowest_month]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dTfLLlm-L-pF",
        "outputId": "b5bfa683-aacc-427b-aa88-567a29036781"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Highest Average Monthly Transaction Amount: 99.38 in March\n",
            "Lowest Average Monthly Transaction Amount: 83.86 in August\n"
          ]
        }
      ]
    }
  ]
}